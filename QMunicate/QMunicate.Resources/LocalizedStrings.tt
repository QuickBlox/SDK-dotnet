<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

namespace QMunicate.Resources
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class LocalizedStrings : BindableObject
    {

<#  
    string projectPath = Path.GetDirectoryName(this.Host.TemplateFile);

	var pathSplitters = new char[2] { '/', '\\' };
    var allResourceFiles = Directory.GetFiles(projectPath, "*.resx", SearchOption.AllDirectories);
	var propertiesList = new List<string>();
    foreach (var path in allResourceFiles)
    {
        var pathParts = path.Split(pathSplitters, StringSplitOptions.RemoveEmptyEntries).ToList();
        var fileName = pathParts.Last();
        var fileNameParts = fileName.Split(new char[1] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (fileNameParts.Length == 2)
        {
            var resourceClassName = fileNameParts[0];
            int skipIndex = pathParts.IndexOf("QMunicate.Resources");
            var takeCount = pathParts.Count - skipIndex - 2;
            var namespaceParts = pathParts.Skip(skipIndex + 1).Take(takeCount);
            var resourceNamespace = "QMunicate.Resources." + String.Join(".", namespaceParts);
			var fullClassName = resourceNamespace + "." + resourceClassName;
			var fieldName = resourceClassName[0].ToString().ToLower() + resourceClassName.Substring(1);
			propertiesList.Add(resourceClassName);
			#>

		private static <#= fullClassName #> <#= fieldName #> = new <#= fullClassName #>();

		public static <#= fullClassName #> <#= resourceClassName #> 
		{
			get
			{
				return <#= fieldName #>;
			}
		}
	<#
        }
	}

	#>

		public void ChangeLanguage()
		{
			<# 
				foreach (var property in propertiesList)
				{
			#>

			RaisePropertyChanged("<#= property #>");
			<#
				}
			#>

		}
	}
}

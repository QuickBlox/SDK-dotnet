<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quickblox.Sdk</name>
    </assembly>
    <members>
        <member name="T:Quickblox.Sdk.Builder.DateTimeBuilder">
            <summary>
            DateTimeBuilder class.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Builder.UrlBuilder">
            <summary>
            UrlBuilder class.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.GeneralDataModel.Filters.FieldFilter`1.BuildFilter">
            <summary>
            Builds the filter.
            </summary>
            <returns>Formated string</returns>
        </member>
        <member name="M:Quickblox.Sdk.GeneralDataModel.Filters.FieldFilterWithOperator`1.BuildFilter">
            <summary>
            Builds the filter.
            </summary>
            <returns>Formated string</returns>
        </member>
        <member name="T:Quickblox.Sdk.GeneralDataModel.Filters.SearchOperators">
            <summary>
            lt (Less Than operator), 
            lte (Less Than or Equal to operator), 
            gt (Greater Than operator), 
            gte (Greater Than or Equal to operator), 
            ne (Not Equal to operator),
            in (Contained IN array operator), 
            nin (Not contained IN array), 
            all (ALL contained IN array),
            or (OR operator),
            ctn (Contains substring operator)
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Models.DeviceRequest.Platform">
            <summary>
            Platform of device, which is the source of API requests to Quickblox
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Models.DeviceRequest.Udid">
            <summary>
            UDID (Unique Device identifier) of device, which is the source of API requests to Quickblox. This must be anything sequence which uniquely identify particular device. This is needed to support schema: 1 User - Multiple devices.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Models.DeviceResponse.Platform">
            <summary>
            Platform of device, which is the source of API requests to Quickblox.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Models.DeviceResponse.Udid">
            <summary>
            UDID (Unique Device identifier) of device, which is the source of API requests to Quickblox. This must be anything sequence which uniquely identify particular device. This is needed to support schema: 1 User - Multiple devices.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Models.PlatformName.Platform">
            <summary>
            Platform of device, which is the source of API requests to Quickblox.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.GeneralDataModel.Models.DialogUpdateInfos">
            <summary>
            Information about what was modified in a dialog. Is sent as an extra param.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.GeneralDataModel.Models.Message">
            <summary>
            Message class representing Message from REST API and Message from XMPP.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Request.BaseRequestSettings.Headers">
            <summary>
            Возвращает коллекцию хедеров и их значений.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Request.ListRequest.Limit">
            <summary>
            Limit search results to N records. Useful for pagination. Default value - 100.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Request.ListRequest.Skip">
            <summary>
            Skip N records in search results. Useful for pagination. Default (if not specified): 0.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Request.ListRequest.Count">
            <summary>
            Count search results. Response will contain only count of records found.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Request.PagedRequestSettings.Page">
            <summary>
            page No  Unsigned Integer	3	Page number of the book of the results that you want to get.By default: 1
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.GeneralDataModel.Request.PagedRequestSettings.PerPage">
            <summary>
            per_page No  Unsigned Integer	15	The maximum number of results per page.Min: 1. Max: 100. By default: 10 
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.GeneralDataModel.Response.HttpHeadersExtensions">
            <summary>
            HttpHeadersExtensions class.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.GeneralDataModel.Response.HttpHeadersExtensions.SetRequestHeaders(System.Net.Http.Headers.HttpHeaders,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Длбавляет новый заголовок и его значения в коллекцию HttpHeaders без проверки предоставленных сведений.
            </summary>
            <param name="httpRequestHeaders">Представляет коллекцию заголовков запроса, как определено в RFC 2616.</param>
            <param name="headers">Коллекция заголовков и их значения, как указано в RFC 2616.</param>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Gt">
            <summary>
            Sample: will return users withs IDs greater than 3
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Lt">
            <summary>
            Sample: will return users withs IDs less than 34
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Ge">
            <summary>
            Sample: will return users withs IDs greater than or equal to 445
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Le">
            <summary>
            Sample: Will return users withs IDs less than or equal 2241
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Eq">
            <summary>
            Sample: Will return a user withs ID equal to 3
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Ne">
            <summary>
            Sample: Will return users withs IDs not equal to 3
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.Between">
            <summary>
            Sample: Will return users withs IDs between 3 and 2241
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.GeneralDataModel.Filter.UserOperator.In">
            <summary>
            Sample: Will return users withs IDs 3,45,2241
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Http.HttpBase.LastRequest">
            <summary>
            Возварщает время последнего запроса в UTC.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient">
            <summary>
            Authentication module allows to manage user sessions.
            http://quickblox.com/developers/Authentication_and_Authorization
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.CreateSessionBaseAsync(Quickblox.Sdk.GeneralDataModel.Models.DeviceRequest)">
            <summary>
            Creates an Application session (not User seesion).
            </summary>
            <param name="deviceRequestRequest">Device info</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.CreateSessionWithLoginAsync(System.String,System.String,System.String,System.String,System.String,System.String,Quickblox.Sdk.GeneralDataModel.Models.DeviceRequest)">
            <summary>
            Creates a User session.
            </summary>
            <param name="userLogin">User login</param>
            <param name="userPassword">User password</param>
            <param name="provider">Provider</param>
            <param name="scope">Scope</param>
            <param name="socialToken">Social Token</param>
            <param name="socialSecret">Social secret</param>
            <param name="deviceRequestRequest">deviceInfo</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.CreateSessionWithEmailAsync(System.String,System.String,System.String,System.String,System.String,System.String,Quickblox.Sdk.GeneralDataModel.Models.DeviceRequest)">
            <summary>
            Creates a User session.
            </summary>
            <param name="userEmail">User Email</param>
            <param name="userPassword">User password</param>
            <param name="provider">Provider</param>
            <param name="scope">Scope</param>
            <param name="socialToken">Social Token</param>
            <param name="socialSecret">Social secret</param>
            <param name="deviceRequestRequest">deviceInfo</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.CreateSessionWithSocialNetworkKey(System.String,System.String,System.String,System.String,Quickblox.Sdk.GeneralDataModel.Models.DeviceRequest)">
            <summary>
            Creates a User session.
            </summary>
            <param name="provider">Provider</param>
            <param name="scope">Scope</param>
            <param name="socialToken">Social Token</param>
            <param name="socialSecret">Social secret</param>
            <param name="deviceRequestRequest">deviceInfo</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.DeleteSessionAsync(System.String)">
            <summary>
            Deletes a session.
            </summary>
            <param name="token">Session token.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.GetSessionAsync">
            <summary>
            Returns current session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.ByLoginAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Upgrades current Application session to User session.
            </summary>
            <param name="login">User login</param>
            <param name="password">User password</param>
            <param name="provider">Privider</param>
            <param name="scope">Scope</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.AuthModule.AuthenticationClient.ByEmailAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Upgrades current Application session to User session.
            </summary>
            <param name="email">User email</param>
            <param name="password">User password</param>
            <param name="provider">Privider</param>
            <param name="scope">Scope</param>
            <returns></returns>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatModule.ChatClient">
            <summary>
            Chat module allows to manage user dialogs.
            http://quickblox.com/developers/Chat
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.CreateDialogAsync(System.String,Quickblox.Sdk.Modules.ChatModule.Models.DialogType,System.String,System.String)">
            <summary>
            Creates a new dialog.
            </summary>
            <param name="dialogName">Dialog name. Is ignored for Private dialogs.</param>
            <param name="dialogType">Dialog type</param>
            <param name="occupantsIds">Occupants IDs (in a string separated by comma)</param>
            <param name="photoId">Photo upload ID.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.GetDialogsAsync(Quickblox.Sdk.Modules.ChatModule.Requests.RetrieveDialogsRequest)">
            <summary>
            Returns all dialogs associated with current user
            </summary>
            <param name="retrieveDialogsRequest">Retrieve dialogs request info</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.UpdateDialogAsync(Quickblox.Sdk.Modules.ChatModule.Requests.UpdateDialogRequest)">
            <summary>
            Updates a dialog. Works only if type=1(PUBLIC_GROUP) or 2(GROUP). 
            Users who are in occupants_ids can update a dialog with type=2(GROUP). If type=1(PUBLIC_GROUP) - only dialog’s owner can update it. 
            </summary>
            <param name="updateDialogRequest">Update dialog request info</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.DeleteDialogAsync(System.String)">
            <summary>
            Deletes chat dialog. Each user from dialog’s occupant_ids field can remove the dialog.
            This doesn’t mean that this dialog will be removed completely for all the users in this dialog. It will be removed only for current user. 
            To completely remove a dialog - pass force=1. Only owner can do it.
            </summary>
            <param name="dialogId">Diglod ID to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.CreateMessageAsync(Quickblox.Sdk.Modules.ChatModule.Requests.CreateMessageRequest)">
            <summary>
            Creates a chat Message. It’s possible to inject a new chat Message to the chat history. In this case this new Message won't be delivered to the recipient(s) by XMPP real time transport, it will be just added to the history. If you wont to initiates a real 'send to chat' - pass send_to_chat=1 parameter.
            </summary>
            <param name="createMessageRequest">Create Message request info</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.GetMessagesAsync(System.String)">
            <summary>
            Retrieves all chat messages within particular dialog. It's only possible to read chat messages in dialog if current user id is in occupants_ids field or if dialog's type=1(PUBLIC_GROUP). Server will return dialog's chat messages sorted ascending by date_sent field. 
            All retrieved chat messages will be marked as read after request. 
            </summary>
            <param name="dialogId">Dialog ID</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.GetMessagesAsync(Quickblox.Sdk.Modules.ChatModule.Requests.RetrieveMessagesRequest)">
            <summary>
            Retrieves all chat messages within particular dialog. It's only possible to read chat messages in dialog if current user id is in occupants_ids field or if dialog's type=1(PUBLIC_GROUP). Server will return dialog's chat messages sorted ascending by date_sent field. 
            All retrieved chat messages will be marked as read after request. 
            </summary>
            <param name="retrieveMessagesRequest">Get messages info</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.GetMessagesAsync``1(System.String)">
            <summary>
            Retrieves all chat messages within particular dialog. It's only possible to read chat messages in dialog if current user id is in occupants_ids field or if dialog's type=1(PUBLIC_GROUP). Server will return dialog's chat messages sorted ascending by date_sent field. 
            All retrieved chat messages will be marked as read after request. 
            </summary>
            <param name="dialogId">Dialog ID</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.GetMessagesAsync``1(Quickblox.Sdk.Modules.ChatModule.Requests.RetrieveMessagesRequest)">
            <summary>
            Retrieves all chat messages within particular dialog. It's only possible to read chat messages in dialog if current user id is in occupants_ids field or if dialog's type=1(PUBLIC_GROUP). Server will return dialog's chat messages sorted ascending by date_sent field. 
            All retrieved chat messages will be marked as read after request. 
            </summary>
            <param name="retrieveMessagesRequest">Get messages info</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.UpdateMessageAsync(Quickblox.Sdk.Modules.ChatModule.Requests.UpdateMessageRequest)">
            <summary>
            Updates a chat Message.
            It's possible to mark all messages as read/delivered - just don't pass a Message id.
            </summary>
            <param name="updateMessageRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatModule.ChatClient.DeleteMessageAsync(System.String[])">
            <summary>
            Any user in the dialog’s occupant_ids is able to remove a Message from the dialog. The Message will only be removed for the current user - the Message will still be viewable and in the chat history for all other users in the dialog.
            </summary>
            <param name="messageIds"></param>
            <returns></returns>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatModule.Requests.UpdateDialogRequest.PullAll">
            <summary>
            Occupants to be removed
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatModule.Requests.UpdateDialogRequest.PushAll">
            <summary>
            Occupants to be added
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.MessageReceived">
            <summary>
            Occurs when a new Message is received.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.SystemMessageReceived">
            <summary>
            Occurs when a new system Message is received.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.ErrorReceived">
            <summary>
            Occurs when a new error is received.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.ActivityChanged">
            <summary>
            Occurs when a activity is changed.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.ChatStateChanged">
            <summary>
            Occurs when a new chatState is changed.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.MoodStateChanged">
            <summary>
            Occurs when a moodState is changed.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.RosterUpdated">
            <summary>
            Occurs when a roster is changed.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.StatusChanged">
            <summary>
            Occurs when a status is changed.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.SubscriptionsChanged">
            <summary>
            Occurs when a subscriptions is changed.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.Tune">
            <summary>
            Occurs when a new Message is received.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.GetPrivateChatManager(System.Int32,System.String)">
            <summary>
            Creates a private one-to-one chat manager.
            </summary>
            <param name="otherUserId">Another user ID</param>
            <param name="dialogId">Dialog ID with another user</param>
            <returns>PrivateChatManager instance.</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.ChatXmppClient.GetGroupChatManager(System.String,System.String)">
            <summary>
            Creates a group chat manager.
            </summary>
            <param name="groupJid">Group XMPP room JID.</param>
            <param name="dialogId">Group dialog ID.</param>
            <returns>GroupChatManager</returns>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ActivityChangedEventArgs.Activity">
            <summary>
            The general activity of the XMPP entity.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ActivityChangedEventArgs.Specific">
            <summary>
            The specific activity of the XMPP entity.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ActivityChangedEventArgs.Description">
            <summary>
            a natural-language description of, or reason for, the activity. This
            may be null.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.ChatStateChangedEventArgs">
            <summary>
            Provides data for the ChatStateChanged event.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ChatStateChangedEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the chat state information.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ChatStateChangedEventArgs.ChatState">
            <summary>
            The chat-state of the XMPP entity.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.ChatStateChangedEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.ChatState)">
            <summary>
            Initializes a new instance of the ChatStateChangedEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            chat-state.</param>
            <param name="state">The chat-state of the XMPP entity with the specified
            JID.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ErrorEventArgs.Reason">
            <summary>
            The reason why the error event was raised.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.ErrorEventArgs.Exception">
            <summary>
            The exception that caused the error event.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ErrorEventArgs class.
            </summary>
            <param name="e">The exception that causes the error event.</param>
            <exception cref="T:System.ArgumentNullException">The e parameter is null.</exception>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventHandler">
            <summary>
            Provide infromation about chat Message
            </summary>
            <param name="sender">The sender.</param>
            <param name="messageEventArgs">The <see cref="T:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventArgs">
            <summary>
            Provides data for the Message event.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventArgs.Jid">
            <summary>
            The JID of the user or resource who sent the Message.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventArgs.Message">
            <summary>
            The received chat Message.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventArgs.MessageType">
            <summary>
            Gets the type of the Message.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.MessageEventArgs.#ctor(Xmpp.Jid,Quickblox.Sdk.GeneralDataModel.Models.Message,Xmpp.Im.MessageType)">
            <summary>
            Initializes a new instance of the MessageEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the Message
            parameter is null.</exception>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.MoodChangedEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the mood information.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.MoodChangedEventArgs.Mood">
            <summary>
            The mood of the XMPP entity.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.MoodChangedEventArgs.Description">
            <summary>
            a natural-language description of, or reason for, the mood. This may be
            null.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.MoodChangedEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.Mood,System.String)">
            <summary>
            Initializes a new instance of the MoodChangedEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            mood information.</param>
            <param name="mood">One of the values from the Mood enumeration.</param>
            <param name="description">A natural-language description of, or
            reason for, the mood.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.RosterUpdatedEventArgs.Item">
            <summary>
            The contact that has been added to the user's roster.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.RosterUpdatedEventArgs.Removed">
            <summary>
            Determines whether the item has been removed from the roster or
            added/updated.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.RosterUpdatedEventArgs.#ctor(Xmpp.Im.RosterItem,System.Boolean)">
            <summary>
            Initializes a new instance of the RosterUpdatedEventArgs class.
            </summary>
            <param name="item">The item the RosterUpdated event is being raised
            for.</param>
            <param name="removed">Set to true if the item is being removed from
            the roster.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.StatusEventArgs">
            <summary>
            Provides data for the Status event.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.StatusEventArgs.Jid">
            <summary>
            The JID of the user or resource whose status has changed.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.StatusEventArgs.Status">
            <summary>
            The status of the user.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.StatusEventArgs.#ctor(Xmpp.Jid,Xmpp.Im.Status)">
            <summary>
            Initializes a new instance of the StatusEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the status
            parameter is null.</exception>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventHandler">
            <summary>
            Provide infromation about system Message
            </summary>
            <param name="sender">The sender.</param>
            <param name="messageEventArgs">The <see cref="T:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventArgs">
            <summary>
            Provides data for the Message event.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventArgs.Jid">
            <summary>
            The JID of the user or resource who sent the Message.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventArgs.Message">
            <summary>
            The received chat Message.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventArgs.MessageType">
            <summary>
            Gets the type of the Message.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.SystemMessageEventArgs.#ctor(Xmpp.Jid,Quickblox.Sdk.Modules.ChatXmppModule.Models.SystemMessage,Xmpp.Im.MessageType)">
            <summary>
            Initializes a new instance of the MessageEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the Message
            parameter is null.</exception>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.TuneEventArgs">
            <summary>
            Provides data for the Tune event.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.TuneEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the tune information.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.TuneEventArgs.Stop">
            <summary>
            Determines whether the XMPP entity stopped play back.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.TuneEventArgs.Information">
            <summary>
            Contains information about the music to which a user is listening.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.TuneEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.TuneInformation)">
            <summary>
            Initializes a new instance of the TuneEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            tune information.</param>
            <param name="information">The tune information to include as part of
            the event.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.MessageReceived">
            <summary>
            Event when a new group Message is received.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.SendMessage(System.String)">
            <summary>
            Sends a Message to other user.
            </summary>
            <param name="message">Message text</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.SendAttachemnt(Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag)">
            <summary>
            Sends an attachemnt to another user.
            </summary>
            <param name="attachment">Attachment</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.NotifyAboutGroupCreation(System.Collections.Generic.IList{System.Int32},Quickblox.Sdk.Modules.Models.Dialog)">
            <summary>
            Sends notification group chat Message that this group was created.
            </summary>
            <param name="addedOccupantsIds">Added occupants IDs</param>
            <param name="dialogInfo">Dialog information</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.NotifyAboutGroupUpdate(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},Quickblox.Sdk.Modules.Models.Dialog)">
            <summary>
            Sends notification group chat Message that new occupants were added to the group.
            </summary>
            <param name="addedOccupantsIds">Added occupants IDs</param>
            <param name="deletedOccupantsIds">deleted occupants IDs</param>
            <param name="dialogInfo">Dialog information</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.NotifyGroupImageChanged(System.String,System.DateTime)">
            <summary>
            Sends notification group chat Message that group chat image has been changed.
            </summary>
            <param name="groupImageUrl">New group chat image URL</param>
            <param name="updatedAt">DateTime when a group was updated (from update response)</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.NotifyGroupNameChanged(System.String,System.DateTime)">
            <summary>
            Sends notification group chat Message that group chat name has been changed.
            </summary>
            <param name="groupName">New group chat name</param>
            <param name="updatedAt">DateTime when a group was updated (from update response)</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.GroupChatManager.JoinGroup(System.String)">
            <summary>
            Joins XMPP chat room.
            This is obligatory for group chat Message sending/receiving.
            </summary>
            <param name="nickName">User nickname in XMPP room.</param>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag">
            <summary>
            Information about attachment to be sent
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag.Id">
            <summary>
            UID 
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag.Type">
            <summary>
            Attachment type
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.Models.ExtraParamsList">
            <summary>
            List of extra params used in Quickblox SDK
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.ExtraParamsList.moduleIdentifier">
            <summary>
            Information for System messages
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.ExtraParamsList.type">
            <summary>
            Dialog Type (Private/Group/Public Group)
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.ExtraParamsList.dialog_update_info">
            <summary>
            Information about what was updated in a dialog
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.ExtraParamsList.attachment">
            <summary>
            Message attachment
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.JidType.Unknown">
            <summary>
            Type is unknown
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.JidType.Private">
            <summary>
            User's JID
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ChatXmppModule.Models.JidType.Group">
            <summary>
            User's JID in some group chat
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.Models.MessageCarbonsMessageSent">
            <summary>
            A Message that contains a forwarded Message sent by the current user, but from a different device.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.Models.ForwardedMessage">
            <summary>
            Element that contains the Message sent by the current user, but from a different device.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.Models.SystemMessage">
            <summary>
            System messages (type = headline) that are not to be saved to history
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.Models.GroupInfoMessage">
            <summary>
            GroupInfo Message is sent when a user was added to a new or already existing group dialog.
            </summary>
        </member>
        <member name="E:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.MessageReceived">
            <summary>
            Event when a new Message is received.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.SendMessage(System.String)">
            <summary>
            Sends a Message to other user.
            </summary>
            <param name="message">Message text</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.SendAttachemnt(Quickblox.Sdk.Modules.ChatXmppModule.Models.AttachmentTag)">
            <summary>
            Sends an attachemnt to another user.
            </summary>
            <param name="attachment">Attachment</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.NotifyIsTyping">
            <summary>
            Notifies other user that you are composing a Message.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.NotifyPausedTyping">
            <summary>
            Notifies other user that you are paused a Message.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.NotifyActiveInChat">
            <summary>
            Notifies other user that you are active a Message.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.NotifyInactiveInChat">
            <summary>
            Notifies other user that you are inactive a Message.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.NotifyGoneInChat">
            <summary>
            Notifies the gone in chat.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.AddToFriends(System.String,System.Boolean)">
            <summary>
            Adds other user to your roster, subsribes for his presence, and sends FriendRequest notification Message.
            </summary>
            <param name="contactName">Opponents name in your contact list</param>
            <param name="createChatMessage">Notify an opponent with a chat Message and add this Message to the chat history.</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.AcceptFriend(System.String,System.Boolean)">
            <summary>
            Adds other user to your roster, accepts presence subscription request, and sends FriendAccepted notification Message.
            </summary>
            <param name="contactName">Opponents name in your contact list</param>
            <param name="createChatMessage">Notify an opponent with a chat Message and add this Message to the chat history.</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.RejectFriend(System.Boolean)">
            <summary>
            Rejects subsription requests and sends FriendRejected notification Message.
            </summary>
            <param name="createChatMessage">Notify an opponent with a chat Message and add this Message to the chat history.</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ChatXmppModule.PrivateChatManager.DeleteFromFriends(System.Boolean)">
            <summary>
            Sends FriendRemoved notification messages, removes other user from your roster and unsubscribes from presence.
            </summary>
            <param name="createChatMessage">Notify an opponent with a chat Message and add this Message to the chat history.</param>
            <returns>Is operation successful</returns>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ChatXmppModule.WebSyncClient">
            <summary>
            The signaling in the QuickBox WebRTC module is implemented over the XMPP protocol using QuickBlox Chat Module. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Quickblox.Sdk.Modules.ChatXmppModule.WebSyncClient.Call(System.String,System.String,System.String,System.Int32,System.Int32,Xmpp.Im.MessageType)" -->
        <!-- Badly formed XML comment ignored for member "M:Quickblox.Sdk.Modules.ChatXmppModule.WebSyncClient.Accept(System.String,System.String,System.String,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Quickblox.Sdk.Modules.ChatXmppModule.WebSyncClient.Reject(System.String,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Quickblox.Sdk.Modules.ChatXmppModule.WebSyncClient.HangUp(System.String,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Quickblox.Sdk.Modules.ChatXmppModule.WebSyncClient.IceCandidates(System.String,System.Int32,System.Collections.ObjectModel.Collection{Quickblox.Sdk.Modules.ChatXmppModule.ExtraParameters.IceCandidate})" -->
        <member name="T:Quickblox.Sdk.Modules.ContentModule.BlobUploadInfo">
            <summary>
            Information about Blob uploaded with Content module.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ContentModule.ContentClient">
            <summary>
            Content module allows to manage app contents and settings.
            http://quickblox.com/developers/Content
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.ContentModule.ContentClient.quickbloxClient">
            <summary>
            QuickbloxClient instance. 
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.#ctor(Quickblox.Sdk.QuickbloxClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Quickblox.Sdk.Modules.ContentModule.ContentClient"/> class.
            </summary>
            <param name="client">QuickbloxClient</param>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.CreateFileInfoAsync(Quickblox.Sdk.Modules.ContentModule.Requests.CreateFileRequest)">
            <summary>
            Creates an entity which is a file in a system.
            </summary>
            <param name="createFileRequest">The file parameter.</param>
            <returns>Success HTTP Status Code 201</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.GetFilesAsync">
            <summary>
            Get list of files for the current user. The ID of the user is taken from the token specified in the request.
            </summary>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.FileUploadAsync(Quickblox.Sdk.Modules.ContentModule.Requests.UploadFileRequest)">
            <summary>
            Upload a file with the params of BlobObjectAccess info to make a possibility to create items with a content.
            </summary>
            <param name="uploadFileRequest">The upload file request.</param>
            <returns>Success HTTP Status Code 201</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.FileUploadCompleteAsync(System.Int32,Quickblox.Sdk.Modules.ContentModule.Requests.BlobUploadCompleteRequest)">
            <summary>
            Declaring file uploaded. Set file status to 'Complete'. If the specified file size does not match to the actual, the actual will be set.
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="blobUploadCompleteRequest">The BLOB upload complete request.</param>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.GetFileInfoByIdAsync(System.Int32)">
            <summary>
            Get information about file by ID.
            </summary>
            <param name="fileId">The file identifier.</param>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.DownloadFileByUid(System.String,System.Boolean)">
            <summary>
            Download File (Get File as a redirect to the S3 object) by uid. 'uid' is a parameter which should be taken from the response of the request for the creating a file. To have a possibility to download a file you should set a status complete to your file firstly.
            </summary>
            <param name="fileGuid">The file unique identifier.</param>
            <param name="isPublic">Is file public</param>
            <returns>Success HTTP Status Code 301</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.DownloadFileById(System.Int32)">
            <summary>
            Download File (Get File as a redirect to the S3 object) by Id.
            </summary>
            <param name="uploadId">UploadId</param>
            <returns>Success HTTP Status Code 301</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.EditFileByIdAsync(System.Int32,Quickblox.Sdk.Modules.ContentModule.Requests.UpdateFileByIdRequest)">
            <summary>
            Edit a file by ID.
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="updateFileByIdRequest">The update file request parameter.</param>
            <returns>FileInfoResponse</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClient.DeleteFileAsync(System.Int32)">
            <summary>
            Delete file by ID. If there are some referents to the file the number of links will be reduced by 1 after deleting. A file will be deleted in fact when the number of links will be equal to 0.
            </summary>
            <param name="fileId">The file identifier.</param>
            <returns>HttpResponse</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClientHelper.UploadImage(System.Byte[],System.Boolean)">
            <summary>
            Uploads an image to cloud. 
            </summary>
            <param name="imageBytes">Image bytes</param>
            <param name="isPublic">Is image publicly accessible</param>
            <returns>Blob upload info (contains Uid)</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClientHelper.DownloadImage(System.String)">
            <summary>
            Downloads an image from cloud.
            </summary>
            <param name="blobUid">Upload blob UID</param>
            <returns>Image bytes</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClientHelper.GenerateImageUrl(System.String,System.Boolean)">
            <summary>
            Generates a URL for uploaded file blob. You can use this URL to download file.
            </summary>
            <param name="imageBlobUid">File blob UId</param>
            <param name="isPublic">Is file public</param>
            <returns>Image URL</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClientHelper.UploadPublicImage(System.Byte[])">
            <summary>
            Uploads publicly accessible image.
            </summary>
            <param name="imageBytes">Image bytes</param>
            <returns>Image link</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.ContentClientHelper.UploadPrivateImage(System.Byte[])">
            <summary>
            Uploads privatly accessible image.
            </summary>
            <param name="imageBytes">Image bytes</param>
            <returns>Upload ID</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest"/> class.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest.ContentType">
            <summary>
            Mime content type.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest.Name">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest.IsPublic">
            <summary>
            Blob visibility (by default: false)
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest.TagList">
            <summary>
            Should be a coma separated string with tags
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.ContentModule.Models.BlobRequest.NewId">
            <summary>
            Use it to update blob file.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ContentModule.Requests.CreateFileRequest">
            <summary>
            Create an entity which is a file in a system
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.ContentModule.Response.PostResponse">
            <summary>
            Parse AWS response after uploading file
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.CustomObjectModule.CustomObjectsClient.quickbloxClient">
            <summary>
            The quickblox client
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.CustomObjectModule.CustomObjectsClient.#ctor(Quickblox.Sdk.QuickbloxClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Quickblox.Sdk.Modules.CustomObjectModule.CustomObjectsClient"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Quickblox.Sdk.Modules.CustomObjectModule.CustomObjectsClient.CustomGetRequest``1(System.String)">
            <summary>
            Customs get request for private API
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="requestUri">The request URI.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Quickblox.Sdk.Modules.CustomObjectModule.CustomObjectsClient.CustomPostRequest``2(System.String,``1)">
            <summary>
            Customs post request for private API
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <param name="requestUri">The request URI.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Quickblox.Sdk.Modules.CustomObjectModule.Models.CustomObjectFilter`1.BuildFilter">
            <summary>
            Builds the filter.
            </summary>
            <returns>Formated string</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.IsActive" -->
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.NotificationType">
            <summary>
            push: Push notification
            email
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.PushType">
            <summary>
            Used only if notification_type == push, ignored in other cases
            If not present - Notification will be delivered to all possible devices for specified users.Each platform will have their own standard format.See Quickblox Standard Push Notifications Formats for more information
            If specified - Notification will be delivered to specified platform only
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.Environment">
            <summary>
            Environment of the notification..
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.User">
            <summary>
            Filter by user parameters.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.Message">
            <summary>
            Pushes: event[push_type] not present - should be Base64 encoded text.
                    event[push_type] specified - should be formatted as described in QuickBlox Push Notifications Formats
            Email:  Base64 encoded tex
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.Date">
            <summary>
            The date of the event. If the 'event type'=='fixed_date', the date can not be in the past.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.EndDate">
            <summary>
            Date of completion of the event. Can't be less than the 'date'.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.Period">
            <summary>
            The period of the event in seconds.
            Possible values:
            86400 (1 day)
            604800 (1 week)
            2592000 (1 month)
            31557600 (1 year)
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.EventName">
            <summary>
            The name of the event. Service information. Only for the user.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.ExternalUserId">
            <summary>
            Should contain a string of external users' ids divided by commas.
            </summary>
            <value>
            The external user identifier.
            </value>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.CreateEvent.EventType">
            <summary>
            one_shot - a one-time event, which causes by an external object (the value is only valid if the 'date' is not specified)
            fixed_date - a one-time event, which occurs at a specified 'date' (the value is valid only if the 'date' is given)
            period_date - reusable event that occurs within a given 'period' from the initial 'date' (the value is only valid if the 'period' specified)
            By default:
            fixed_date, if 'date' is specified
            period_date, if 'period' is specified
            one_shot, if 'date' is not specified
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.EditEvent.IsActive">
            <summary>
            Marks event as active/inactive
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.EditEvent.Message">
            <summary>
            Buid Message in base64 data with reqqired parameters
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.EditEvent.Date">
            <summary>
            The date of the event.
            If the 'event type'=='fixed_date', the date can not be in the past.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.EditEvent.Period">
            <summary>
            The period of the event in seconds.
            Possible values:
            86400 (1 day)
            604800 (1 week)
            2592000 (1 month)
            31557600 (1 year)
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.EditEvent.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.NotificationModule.Models.EventType">
            <summary>
            one_shot - a one-time event, which causes by an external object (the value is only valid if the 'date' is not specified)
            fixed_date - a one-time event, which occurs at a specified 'date' (the value is valid only if the 'date' is given)
            period_date - reusable event that occurs within a given 'period' from the initial 'date' (the value is only valid if the 'period' specified)
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.NotificationModule.Models.NotificationChannelType">
            <summary>
            Declare which notification channels could be used to notify user about events. Allowed values: email, apns, gcm, mpns, bbps.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.PushToken.Environment">
            <summary>
            Determine application mode. It allows conveniently separate development and production modes. Allowed values: development, production
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.PushToken.ClientIdentificationSequence">
            <summary>
            Identifies client device in 3-rd party service like APNS, GCM, BBPS or MPNS. Initially retrieved from 3-rd service and should be send to QuickBlox to let it send push notifications to the client.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.PushToken.PushTokenId">
            <summary>
            Generated push token identifier by quickblox server.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.Tags.TagsAny">
            <summary>
            Should contain a string of tags divided by commas. Recipients (users) must have at least one tag that specified in list.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.Tags.TagsAll">
            <summary>
            Should contain a string of tags divided by commas. Recipients (users) must exactly have only all tags that specified in list
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.Tags.TagsExclude">
            <summary>
            Should contain a string of tags divided by commas. Recipients (users) mustn't have tags that specified in list
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.NotificationModule.Models.TagsAny">
            <summary>
            Should contain a string of tags divided by commas. Recipients (users) must have at least one tag that specified in list.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.NotificationModule.Models.User.Ids">
            <summary>
            Should contain a string of external users' ids divided by commas.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.NotificationModule.NotificationClient">
            <summary>
            Push and email notifications client 
            http://quickblox.com/developers/Messages
            </summary>
        </member>
        <member name="F:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.quickbloxClient">
            <summary>
            The quickblox client
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.#ctor(Quickblox.Sdk.QuickbloxClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Quickblox.Sdk.Modules.NotificationModule.NotificationClient"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.CreateSubscriptionsAsync(Quickblox.Sdk.Modules.NotificationModule.Requests.CreateSubscriptionsRequest)">
            <summary>
            Сreate device based subscriptions. The authorization token should contain the device parameters. If the subscription is creating for the windows phone pushes make sure that Microsoft Push Notifications have a status "enabled" in the Web Administration Panel.
            </summary>
            <param name="createSubscriptionsRequest">Parameter for subscription request</param>
            <returns>Success HTTP Status Code 201</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.GetSubscriptionsAsync">
            <summary>
            Retrieve subscriptions for the device which is specified in the authorization token.
            </summary>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.DeleteSubscriptionsAsync(System.Int32)">
            <summary>
            Remove a subscription by the identifier.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.CreateEventAsync(Quickblox.Sdk.Modules.NotificationModule.Requests.CreateEventRequest)">
            <summary>
            Create notification event
            </summary>
            <param name="сreateEventRequest">The сreate event parameter.</param>
            <returns>Success HTTP Status Code 201</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.GetEventsAsync">
            <summary>
            Get all events which were created by a user specified in the authorization token.
            </summary>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.GetEventByIdAsync(System.UInt32)">
            <summary>
            Retrieve event by the ID. The event specified in the request should belong to the application for which the authorization token has been received.
            </summary>
            <param name="eventId">The event identifier.</param>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.EditEventAsync(System.UInt32,Quickblox.Sdk.Modules.NotificationModule.Requests.EditEventRequest)">
            <summary>
            Edit event by ID.
            </summary>
            <param name="eventId">The event identifier.</param>
            <param name="editEventRequest">The edit event parameter.</param>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.NotificationModule.NotificationClient.DeleteEventAsync(System.UInt32)">
            <summary>
            Deletes the event.
            </summary>
            <param name="eventId">The event identifier.</param>
            <returns>Success HTTP Status Code 200</returns>
        </member>
        <member name="T:Quickblox.Sdk.Modules.UsersModule.Models.CustomData">
            <summary>
            Custom data for User
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.Models.RetrieveUserFilter`1.BuildFilter">
            <summary>
            Builds the filter.
            </summary>
            <returns>Formated string</returns>
        </member>
        <member name="T:Quickblox.Sdk.Modules.UsersModule.Models.User">
            <summary>
            User that is returned in response for user sign up.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest">
            <summary>
            Used for updating user information.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.Login">
            <summary>
            API User login.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.Password">
            <summary>
            API User password.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.Email">
            <summary>
            API User e-mail.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.BlobId">
            <summary>
            ID of associated blob (for example, API User photo).
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.ExternalUserId">
            <summary>
            ID of API User in external system.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.FacebookId">
            <summary>
            ID of API User in Facebook.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.TwitterId">
            <summary>
            ID of API User in Twitter.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.Website">
            <summary>
            Gets or sets the website.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.TagList">
            <summary>
            Gets or sets the tag list.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.CustomData">
            <summary>
            User's additional info.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequest.OldPassword">
            <summary>
            Old user password (required only if new password provided)
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.Modules.UsersModule.Requests.UserRequestWithTag.Tags">
            <summary>
            API User login.
            </summary>
        </member>
        <member name="T:Quickblox.Sdk.Modules.UsersModule.UsersClient">
            <summary>
            Provide methods to User module API
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.#ctor(Quickblox.Sdk.QuickbloxClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Quickblox.Sdk.Modules.UsersModule.UsersClient"/> class.
            </summary>
            <param name="quickbloxClient">The quickblox client.</param>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.RetrieveUsersAsync(Quickblox.Sdk.Modules.UsersModule.Requests.RetrieveUsersRequest)">
            <summary>
            Retrieve all Users for current account
            </summary>
            <param name="retrieveUsersesRequest">Filter settings</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.RetrieveUsersAsync``1(Quickblox.Sdk.Modules.UsersModule.Requests.RetrieveUsersRequest)">
            <summary>
            Retrieve all Users for current account. Return custom User's model that extended UserModule.Models.User class
            </summary>
            <typeparam name="T"></typeparam>
            <param name="retrieveUsersesRequest">Filter settings</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.SignUpUserAsync(Quickblox.Sdk.Modules.UsersModule.Requests.UserSignUpRequest)">
            <summary>
            API User sign up. Use for the identification of the mobile applications users. The request can contain all, some or none of the optional parameters.
            Login, email, facebook ID, twitter ID and the external user ID should not be taken previously.
            If you want to create a user with a some content (f.e. with a photo) you have to create a blob firstly.
            The same tags can be used for any number of users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByIdAsync(System.Int32)">
            <summary>
            Show API User by identifier.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByIdAsync``1(System.Int32)">
            <summary>
            Show API User by identifier (generic)
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByLogin(System.String)">
            <summary>
            Gets the user by login.
            </summary>
            <param name="login">The login.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByFullNameAsync(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Gets the full name of the user by.
            </summary>
            <param name="fullName">API User full name</param>
            <param name="page">Page number of the book of the results that you want to get. By default: 1</param>
            <param name="perPage">The maximum number of results per page. Min: 1. Max: 100. By default: 10</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByFacebookIdAsync(System.Int64)">
            <summary>
            Search API User by Facebook identifier.
            </summary>
            <param name="facebookId">API User Facebook ID</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByTwitterIdAsync(System.Int32)">
            <summary>
            Retrieve API User by Twitter identifier
            </summary>
            <param name="twitterId">API User Twitter ID</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByEmailAsync(System.String)">
            <summary>
            Retrieve API User by email.
            </summary>
            <param name="email">API User email</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByTagsAsync(System.String[],System.UInt32,System.UInt32)">
            <summary>
            Search API Users by tags
            </summary>
            <param name="tags">API User tag(s) The maximum number of tags per user: 5.</param>
            <param name="page">Page number of the book of the results that you want to get. By default: 1</param>
            <param name="perPage">The maximum number of results per page. Min: 1. Max: 100. By default: 10</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.GetUserByExeternalUserIdAsync(System.Int32)">
            <summary>
            Retrieve API User by external user id
            </summary>
            <param name="externalUserId">The external user Id.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.UpdateUserAsync(System.Int32,Quickblox.Sdk.Modules.UsersModule.Requests.UpdateUserRequest)">
            <summary>
            Update API User by identifier
            </summary>
            <param name="userRequest">Agregate all user parameters</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.UpdateUserAsync``1(System.Int32,Quickblox.Sdk.Modules.UsersModule.Requests.UpdateUserRequest{``0})">
            <summary>
            Updates the user by Id (generic).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userId">The user identifier.</param>
            <param name="userRequest">The user request.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.DeleteUserByIdAsync(System.Int32)">
            <summary>
            Delete API User by id
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.DeleteUserByExternalUserIdAsync(System.Int32)">
            <summary>
            Delete API User by external user id
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Quickblox.Sdk.Modules.UsersModule.UsersClient.ResetUserPasswordByEmailAsync(System.String)">
            <summary>
            Reset API User password by e-mail.
            </summary>
            <param name="email">API User e-mail.</param>
            <returns></returns>
        </member>
        <member name="T:Quickblox.Sdk.QuickbloxClient">
            <summary>
            QuickbloxClient class. Primary class in this SDK.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.QuickbloxClient.#ctor(System.Int32,System.String,System.String,System.String,System.String,Quickblox.Sdk.Platform.ICryptographicProvider,Quickblox.Sdk.Logger.ILogger)">
            <summary>
            QuickbloxClient ctor.
            </summary>
            <param name="applicationId">Quickblox application ID</param>
            <param name="authKey">Auth Key</param>
            <param name="authSecret">Auth Secret</param>
            <param name="apiEndpoint">API endpoint</param>
            <param name="chatEndpoint">XMPP chat endpoint</param>
            <param name="cryptographicProvider">HMAC SHA1 Cryptographic Provider</param>
            <param name="logger">Logger instance. Allows to log API calls, xmpp messages etc.</param>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.ContentClient">
            <summary>
            Content module allows to manage app contents and settings.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.AuthenticationClient">
            <summary>
            Authentication module allows to manage user sessions.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.ChatClient">
            <summary>
            Chat module allows to manage user dialogs.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.UsersClient">
            <summary>
            User module manages all things related to user accounts handling, authentication, account data, password reminding etc.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.NotificationClient">
            <summary>
            Notification module allows to manage push and email notifications to users.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.ChatXmppClient">
            <summary>
            ChatXmpp module allows users to chat with each other in private or group dialogs via XMPP protocol.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.CustomObjectsClient">
            <summary>
            Custom Objects module provides flexibility to define any data structure(schema) you need.
            Schema is defined in QuickBlox Administration Panel. The schema is called Class and contains field names and their type.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.ApplicationId">
            <summary>
            Quickblox aplication ID.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.AuthKey">
            <summary>
            Authorization Key
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.AuthSecret">
            <summary>
            Authorization Secret
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.ApiEndPoint">
            <summary>
            API endpoint
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.ChatEndpoint">
            <summary>
            XMPP Chat endpoint
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.MucChatEndpoint">
            <summary>
            Group chats XMPP endpoint.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.Token">
            <summary>
            Quickblox token. Must be set before calling any methods that require authentication.
            </summary>
        </member>
        <member name="P:Quickblox.Sdk.QuickbloxClient.LastRequest">
            <summary>
            UTC DateTime of the last request to the server.
            </summary>
        </member>
        <member name="M:Quickblox.Sdk.QuickbloxClient.GetAccountSettingsAsync(System.String)">
            <summary>
            Returns account settings (account ID, endpoints, etc.)
            </summary>
            <param name="accountKey">Account key from admin panel</param>
            <returns>AccountResponse</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Quickblox.Sdk.Core.QuickbloxMethods.CreateRelationMethod" -->
        <member name="T:Quickblox.Sdk.Serializer.JsonSerializer">
            <summary>
            Serializer class.
            </summary>
        </member>
        <member name="T:Xmpp.Client.XmppClient">
            <summary>
            Implements an XMPP client providing basic instant messaging (IM) and
            presence functionality as well as various XMPP extension functionality.
            </summary>
            <remarks>
            This provides most of the functionality exposed by the XmppIm class but
            simplifies some of the more complicated aspects such as privacy lists and
            roster management. It also implements various XMPP protocol extensions.
            </remarks>
        </member>
        <member name="F:Xmpp.Client.XmppClient.disposed">
            <summary>
            True if the instance has been disposed of.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.im">
            <summary>
            The instance of the XmppIm class used for implementing the basic messaging
            and presence funcionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.version">
            <summary>
            Provides access to the 'Software Version' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.sdisco">
            <summary>
            Provides access to the 'Service Discovery' XMPP extension funtionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.ecapa">
            <summary>
            Provides access to the 'Entity Capabilities' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.ping">
            <summary>
            Provides access to the 'Ping' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.cusiqextension">
            <summary>
            Provides access to the 'Custom Iq Extension' functionality
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.attention">
            <summary>
            Provides access to the 'Attention' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.time">
            <summary>
            Provides access to the 'Entity Time' XMPP extension funcionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.block">
            <summary>
            Provides access to the 'Blocking Command' XMPP extension funcionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.pep">
            <summary>
            Provides access to the 'Personal Eventing Protocol' extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.userTune">
            <summary>
            Provides access to the 'User Tune' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.userMood">
            <summary>
            Provides access to the 'User Mood' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.dataForms">
            <summary>
            Provides access to the 'Data Forms' XMPP extension functionality.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.featureNegotiation">
            <summary>
            Provides access to the 'Feature Negotiation' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.streamInitiation">
            <summary>
            Provides access to the 'Stream Initiation' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.userActivity">
            <summary>
            Provides access to the 'User Activity' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.serverIpCheck">
            <summary>
            Provides access to the 'Server IP Check' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.inBandRegistration">
            <summary>
            Provides access to the 'In-Band Registration' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.chatStateNotifications">
            <summary>
            Provides access to the 'Chat State Nofitications' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.bitsOfBinary">
            <summary>
            Provides access to the 'Bits of Binary' XMPP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.vcardAvatars">
            <summary>
            Provides vcard Based Avatar functionality
            </summary>
        </member>
        <member name="F:Xmpp.Client.XmppClient.messageCarbons">
            <summary>
            Provides the Message Carbons extension
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Hostname">
            <summary>
            The hostname of the XMPP server to connect to.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Port">
            <summary>
            The port number of the XMPP service of the server.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Username">
            <summary>
            The username with which to authenticate. In XMPP jargon this is known
            as the 'node' part of the JID.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Password">
            <summary>
            The password with which to authenticate.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Tls">
            <summary>
            If true the session will be TLS/SSL-encrypted if the server supports it.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.IsEncrypted">
            <summary>
            Determines whether the session with the server is TLS/SSL encrypted.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Jid">
            <summary>
            The address of the Xmpp entity.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Connected">
            <summary>
            Determines whether the instance is connected to the XMPP server.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Authenticated">
            <summary>
            Determines whether the instance has been authenticated.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.DefaultTimeOut">
            <summary>
            The default IQ Set Time out in Milliseconds. -1 means no timeout
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.DebugStanzas">
            <summary>
            If true prints XML stanzas
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.Im">
            <summary>
            The underlying XmppIm instance.
            </summary>
        </member>
        <member name="P:Xmpp.Client.XmppClient.SubscriptionRequest">
            <summary>
            A callback method to invoke when a request for a subscription is received
            from another XMPP user.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="Examples.xml" path="S22/Xmpp/Client/XmppClient[@name=&quot;SubscriptionRequest&quot;]/*" />
        </member>
        <member name="E:Xmpp.Client.XmppClient.StatusChanged">
            <summary>
            The event that is raised when a status notification has been received.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.MoodChanged">
            <summary>
            The event that is raised when a mood notification has been received.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.ActivityChanged">
            <summary>
            The event that is raised when an activity notification has been received.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.Tune">
            <summary>
            The event that is raised when a contact has published tune information.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.Message">
            <summary>
            The event that is raised when a chat Message is received.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.ChatStateChanged">
            <summary>
            The event that is raised when the chat-state of an XMPP entity has
            changed.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.RosterUpdated">
            <summary>
            The event that is raised when the roster of the user has been updated,
            i.e. a contact has been added, removed or updated.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.Unsubscribed">
            <summary>
            The event that is raised when a user or resource has unsubscribed from
            receiving presence notifications of the JID associated with this instance.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.SubscriptionApproved">
            <summary>
            The event that is raised when a subscription request made by the JID
            associated with this instance has been approved.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.SubscriptionRefused">
            <summary>
            The event that is raised when a subscription request made by the JID
            associated with this instance has been refused.
            </summary>
        </member>
        <member name="E:Xmpp.Client.XmppClient.Error">
            <summary>
            The event that is raised when an unrecoverable error condition occurs.
            </summary>
        </member>
        <member name="M:Xmpp.Client.XmppClient.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the XmppClient class.
            </summary>
            <param name="hostname">The hostname of the XMPP server to connect to.</param>
            <param name="username">The username with which to authenticate. In XMPP jargon
            this is known as the 'node' part of the JID.</param>
            <param name="password">The password with which to authenticate.</param>
            <param name="port">The port number of the XMPP service of the server.</param>
            <param name="tls">If true the session will be TLS/SSL-encrypted if the server
            supports TLS/SSL-encryption.</param>
            <param name="validate">A delegate used for verifying the remote Secure Sockets
            Layer (SSL) certificate which is used for authentication. Can be null if not
            needed.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter or the
            username parameter or the password parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The hostname parameter or the username
            parameter is the empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the port parameter
            is not a valid port number.</exception>
            <remarks>Use this constructor if you wish to connect to an XMPP server using
            an existing set of user credentials.</remarks>
        </member>
        <member name="M:Xmpp.Client.XmppClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the XmppClient class.
            </summary>
            <param name="hostname">The hostname of the XMPP server to connect to.</param>
            <param name="port">The port number of the XMPP service of the server.</param>
            <param name="tls">If true the session will be TLS/SSL-encrypted if the server
            supports TLS/SSL-encryption.</param>
            <param name="validate">A delegate used for verifying the remote Secure Sockets
            Layer (SSL) certificate which is used for authentication. Can be null if not
            needed.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The hostname parameter is the empty
            string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the port parameter
            is not a valid port number.</exception>
            <remarks>Use this constructor if you wish to register an XMPP account using
            the in-band account registration process supported by some servers.</remarks>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Connect(System.String)">
            <summary>
            Establishes a connection to the XMPP server.
            </summary>
            <param name="resource">The resource identifier to bind with. If this is null,
            a resource identifier will be assigned by the server.</param>
            <returns>The user's roster (contact list).</returns>
            <exception cref="!:System.Security.Authentication.AuthenticationException">An
            authentication error occured while trying to establish a secure connection, or
            the provided credentials were rejected by the server, or the server requires
            TLS/SSL and the Tls property has been set to false.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or
            reading from the network. If the InnerException is of type SocketExcption, use
            the ErrorCode property to obtain the specific socket error code.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppException">An XMPP error occurred while negotiating the
            XML stream with the server, or resource binding failed, or the initialization
            of an XMPP extension failed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates with the XMPP server using the specified username and
            password.
            </summary>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The password to authenticate with.</param>
            <exception cref="T:System.ArgumentNullException">The username parameter or the
            password parameter is null.</exception>
            <exception cref="!:System.Security.Authentication.AuthenticationException">
            An authentication error occured while trying to establish a secure connection,
            or the provided credentials were rejected by the server, or the server requires
            TLS/SSL and the Tls property has been set to false.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network. If the InnerException is of type SocketExcption, use the
            ErrorCode property to obtain the specific socket error code.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppException">An XMPP error occurred while negotiating the
            XML stream with the server, or resource binding failed, or the initialization
            of an XMPP extension failed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SendMessage(Xmpp.Jid,System.String,System.String,System.String,System.String,System.Xml.Linq.XElement,Xmpp.Im.MessageType,System.Globalization.CultureInfo)">
            <summary>
            Sends a chat Message with the specified content to the specified JID.
            </summary>
            <param name="to">The JID of the intended recipient.</param>
            <param name="body">The content of the Message.</param>
            <param name="subject">The subject of the Message.</param>
            <param name="thread">The conversation thread the Message belongs to.</param>
            <param name="type">The type of the Message. Can be one of the values from
            the MessagType enumeration.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ArgumentNullException">The to parameter or the body parameter
            is null.</exception>
            <exception cref="T:System.ArgumentException">The body parameter is the empty
            string.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SendMessage(Xmpp.Im.Message)">
            <summary>
            Sends the specified chat Message.
            </summary>
            <param name="xmppMessage">The chat Message to send.</param>
            <exception cref="T:System.ArgumentNullException">The Message parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetStatus(Xmpp.Im.Availability,System.String,System.SByte,System.Globalization.CultureInfo)">
            <summary>
            Sets the availability status.
            </summary>
            <param name="availability">The availability state. Can be one of the
            values from the Availability enumeration, however not
            Availability.Offline.</param>
            <param name="message">An optional Message providing a detailed
            description of the availability state.</param>
            <param name="priority">Provides a hint for stanza routing.</param>
            <param name="language">The language of the description of the
            availability state.</param>
            <exception cref="T:System.ArgumentException">The availability parameter has a
            value of Availability.Offline.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetStatus(Xmpp.Im.Availability,System.Collections.Generic.Dictionary{System.String,System.String},System.SByte)">
            <summary>
            Sets the availability status.
            </summary>
            <param name="availability">The availability state. Can be one of the
            values from the Availability enumeration, however not
            Availability.Offline.</param>
            <param name="messages">A dictionary of messages providing detailed
            descriptions of the availability state. The dictionary keys denote
            the languages of the messages and must be valid ISO 2 letter language
            codes.</param>
            <param name="priority">Provides a hint for stanza routing.</param>
            <exception cref="T:System.ArgumentException">The availability parameter has a
            value of Availability.Offline.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetStatus(Xmpp.Im.Status)">
            <summary>
            Sets the availability status.
            </summary>
            <param name="status">An instance of the Status class.</param>
            <exception cref="T:System.ArgumentNullException">The status parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The Availability property of the status
            parameter has a value of Availability.Offline.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.JoinToGroup(Xmpp.Jid,Xmpp.Jid)">
            <summary>
            Joins to group.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.LeaveGroup(Xmpp.Jid,Xmpp.Jid)">
            <summary>
            Joins to group.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.RequestSubscription(Xmpp.Jid)">
            <summary>
            Requests the subscription.
            </summary>
            <param name="jid">The JID of the roster item.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.RefuseSubscriptionRequest(Xmpp.Jid)">
            <summary>
            Refuses the subscription request.
            </summary>
            <param name="jid">The JID of the roster item.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.ApproveSubscriptionRequest(Xmpp.Jid)">
            <summary>
            Approves the subscription request.
            </summary>
            <param name="jid">The JID of the roster item.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.RevokeSubscription(Xmpp.Jid)">
            <summary>
            Revokes the subscription.
            </summary>
            <param name="jid">The JID of the roster item.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.GetRoster">
            <summary>
            Retrieves the user's roster (contact list).
            </summary>
            <returns>The user's roster.</returns>
            <remarks>In XMPP jargon, the user's contact list is called a
            'roster'.</remarks>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <!-- No matching elements were found for the following include tag --><include file="Examples.xml" path="S22/Xmpp/Client/XmppClient[@name=&quot;GetRoster&quot;]/*" />
        </member>
        <member name="M:Xmpp.Client.XmppClient.AddContact(Xmpp.Jid,System.String,System.String[])">
            <summary>
            Adds the contact with the specified JID to the user's roster.
            </summary>
            <param name="jid">The JID of the contact to add to the user's roster.</param>
            <param name="name">The nickname with which to associate the contact.</param>
            <param name="groups">An array of groups or categories the new contact
            will be added to.</param>
            <remarks>This method creates a new item on the user's roster and requests
            a subscription from the contact with the specified JID.</remarks>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.RemoveContact(Xmpp.Jid)">
            <summary>
            Removes the item with the specified JID from the user's roster.
            </summary>
            <param name="jid">The JID of the roster item to remove.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.RemoveContact(Xmpp.Im.RosterItem)">
            <summary>
            Removes the specified item from the user's roster.
            </summary>
            <param name="item">The item to remove.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.RequestCustomIq(Xmpp.Jid,System.String,System.Action)">
            <summary>
            Requests a Custom Iq from the XMPP entinty Jid
            </summary>
            <param name="jid">The XMPP entity to request the custom IQ</param>
            <param name="str">The payload string to provide to the Request</param>
            <param name="callback">The callback method to call after the Request Result has being received. Included the serialised dat
            of the answer to the request</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetMood(Xmpp.Extensions.Mood,System.String)">
            <summary>
            Sets the user's mood to the specified mood value.
            </summary>
            <param name="mood">A value from the Mood enumeration to set the user's
            mood to.</param>
            <param name="description">A natural-language description of, or reason
            for, the mood.</param>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetActivity(Xmpp.Extensions.GeneralActivity,Xmpp.Extensions.SpecificActivity,System.String)">
            <summary>
            Sets the user's activity to the specified activity value(s).
            </summary>
            <param name="activity">A value from the GeneralActivity enumeration to
            set the user's general activity to.</param>
            <param name="specific">A value from the SpecificActivity enumeration
            best describing the user's activity in more detail.</param>
            <param name="description">A natural-language description of, or reason
            for, the activity.</param>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <!-- No matching elements were found for the following include tag --><include file="Examples.xml" path="S22/Xmpp/Client/XmppClient[@name=&quot;SetActivity&quot;]/*" />
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetTune(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Publishes the specified music information to contacts on the user's
            roster.
            </summary>
            <param name="title">The title of the song or piece.</param>
            <param name="artist">The artist or performer of the song or piece.</param>
            <param name="track">A unique identifier for the tune; e.g., the track number
            within a collection or the specific URI for the object (e.g., a
            stream or audio file).</param>
            <param name="length">The duration of the song or piece in seconds.</param>
            <param name="rating">The user's rating of the song or piece, from 1
            (lowest) to 10 (highest).</param>
            <param name="source">The collection (e.g., album) or other source
            (e.g., a band website that hosts streams or audio files).</param>
            <param name="uri">A URI or URL pointing to information about the song,
            collection, or artist</param>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Personal Eventing Protocol' extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <remarks>Publishing no information (i.e. calling Publish without any parameters
            is considered a "stop command" to disable publishing).</remarks>
        </member>
        <member name="M:Xmpp.Client.XmppClient.SetTune(Xmpp.Extensions.TuneInformation)">
            <summary>
            Publishes the specified music information to contacts on the user's
            roster.
            </summary>
            <param name="tune">The tune information to publish.</param>
            <exception cref="T:System.ArgumentNullException">The tune parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Personal Eventing Protocol' extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppClient instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <!-- No matching elements were found for the following include tag --><include file="Examples.xml" path="S22/Xmpp/Client/XmppClient[@name=&quot;SetTune&quot;]/*" />
        </member>
        <member name="P:Xmpp.Client.XmppClient.CustomIqDelegate">
            <summary>
            A callback method to invoke when a Custom Iq Request is received
            from another XMPP user.
            </summary>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Register(Xmpp.Extensions.RegistrationCallback)">
            <summary>
            Initiates in-band registration with the XMPP server in order to register
            a new XMPP account.
            </summary>
            <param name="callback">A callback method invoked to let the user
            enter any information required by the server in order to complete the
            registration.</param>
            <exception cref="T:System.ArgumentNullException">The callback parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP server with does not
            support the 'In-Band Registration' XMPP extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <remarks>
            See the "Howto: Register an account" guide for a walkthrough on how to
            register an XMPP account through the in-band registration process.
            </remarks>
        </member>
        <member name="M:Xmpp.Client.XmppClient.GetTime(Xmpp.Jid)">
            <summary>
            Retrieves the current time of the XMPP client with the specified JID.
            </summary>
            <param name="jid">The JID of the user to retrieve the current time
            for.</param>
            <returns>The current time of the XMPP client with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or
            reading from the network.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP client of the
            user with the specified JID does not support the retrieval of the
            current time.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the XMPP client of
            the user with the specified JID returned an XMPP error code. Use the
            Error property of the XmppErrorException to obtain the specific error
            condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.GetVersion(Xmpp.Jid)">
            <summary>
            Retrieves the software version of the XMPP client with the specified JID.
            </summary>
            <param name="jid">The JID of the user to retrieve version information
            for.</param>
            <returns>An initialized instance of the VersionInformation class providing
            the name and version of the XMPP client used by the user with the specified
            JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host, or the XmppCleint instance has not authenticated
            with the XMPP server.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or
            reading from the network.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP client of the
            user with the specified JID does not support the retrieval of version
            information.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the XMPP client of
            the user with the specified JID returned an XMPP error code. Use the
            Error property of the XmppErrorException to obtain the specific error
            condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.GetFeatures(Xmpp.Jid)">
            <summary>
            Returns an enumerable collection of XMPP features supported by the XMPP
            client with the specified JID.
            </summary>
            <param name="jid">The JID of the XMPP client to retrieve a collection of
            supported features for.</param>
            <returns>An enumerable collection of XMPP extensions supported by the
            XMPP client with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or
            reading from the network.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP client of the
            user with the specified JID does not support the retrieval of feature
            information.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the XMPP client of
            the user with the specified JID returned an XMPP error code. Use the
            Error property of the XmppErrorException to obtain the specific error
            condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <!-- No matching elements were found for the following include tag --><include file="Examples.xml" path="S22/Xmpp/Client/XmppClient[@name=&quot;GetFeatures&quot;]/*" />
        </member>
        <member name="M:Xmpp.Client.XmppClient.Buzz(Xmpp.Jid,System.String)">
            <summary>
            Buzzes the user with the specified JID in order to get his or her attention.
            </summary>
            <param name="jid">The JID of the user to buzz.</param>
            <param name="message">An optional Message to send along with the buzz
            notification.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or
            reading from the network.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP client of the
            user with the specified JID does not support buzzing.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the XMPP client of
            the user with the specified JID returned an XMPP error code. Use the
            Error property of the XmppErrorException to obtain the specific error
            condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Ping(Xmpp.Jid)">
            <summary>
            Pings the user with the specified JID.
            </summary>
            <param name="jid">The JID of the user to ping.</param>
            <returns>The time it took to ping the user with the specified
            JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or
            reading from the network.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP client of the
            user with the specified JID does not support the 'Ping' XMPP protocol
            extension.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the XMPP client of
            the user with the specified JID returned an XMPP error code. Use the
            Error property of the XmppErrorException to obtain the specific error
            condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Block(Xmpp.Jid)">
            <summary>
            Blocks all communication to and from the XMPP entity with the specified JID.
            </summary>
            <param name="jid">The JID of the XMPP entity to block.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Blocking Command' extension and does not support privacy-list management.
            </exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Unblock(Xmpp.Jid)">
            <summary>
            Unblocks all communication to and from the XMPP entity with the specified
            JID.
            </summary>
            <param name="jid">The JID of the XMPP entity to unblock.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Blocking Command' extension and does not support privacy-list management.
            </exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.GetBlocklist">
            <summary>
            Returns an enumerable collection of blocked contacts.
            </summary>
            <returns>An enumerable collection of JIDs which are on the client's
            blocklist.</returns>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Blocking Command' extension and does not support privacy-list management.
            </exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is
            not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object
            has been disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Close">
            <summary>
            Closes the connection with the XMPP server. This automatically disposes
            of the object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Dispose">
            <summary>
            Releases all resources used by the current instance of the XmppClient class.
            </summary>
        </member>
        <member name="M:Xmpp.Client.XmppClient.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the XmppClient
            class, optionally disposing of managed resource.
            </summary>
            <param name="disposing">true to dispose of managed resources, otherwise
            false.</param>
        </member>
        <member name="M:Xmpp.Client.XmppClient.AssertValid">
            <summary>
            Asserts the instance has not been disposed of and is connected to the
            XMPP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The XmppClient object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppClient instance is not
            connected to a remote host.</exception>
        </member>
        <member name="M:Xmpp.Client.XmppClient.LoadExtensions">
            <summary>
            Initializes the various XMPP extension modules.
            </summary>
        </member>
        <member name="T:Xmpp.Core.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Xmpp.Core.ErrorEventArgs.Reason">
            <summary>
            The reason why the error event was raised.
            </summary>
        </member>
        <member name="P:Xmpp.Core.ErrorEventArgs.Exception">
            <summary>
            The exception that caused the error event.
            </summary>
        </member>
        <member name="M:Xmpp.Core.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ErrorEventArgs class.
            </summary>
            <param name="e">The exception that causes the error event.</param>
            <exception cref="T:System.ArgumentNullException">The e parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Core.Iq">
            <summary>
            Represents an IQ XML stanza.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Iq.Type">
            <summary>
            The type of the IQ stanza.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Iq.IsRequest">
            <summary>
            Determines whether the IQ stanza is a request.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Iq.IsResponse">
            <summary>
            Determines whether the IQ stanza is a response.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Iq.#ctor(Xmpp.Core.IqType,System.String,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the Iq class.
            </summary>
            <param name="type">The type of the IQ stanza.</param>
            <param name="id">The ID of the IQ stanza.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">The content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
        </member>
        <member name="M:Xmpp.Core.Iq.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the Iq class from the specified
            Xml element.
            </summary>
            <param name="element">An Xml element representing an IQ stanza.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Core.Iq.ParseType(System.String)">
            <summary>
            Parses the IQ type from the specified string.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The IqType value parsed from the string.</returns>
            <exception cref="T:System.ArgumentNullException">The value parameter is
            null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="T:Xmpp.Core.IqEventArgs">
            <summary>
            Provides data for the Iq event.
            </summary>
        </member>
        <member name="P:Xmpp.Core.IqEventArgs.Stanza">
            <summary>
            The IQ stanza.
            </summary>
        </member>
        <member name="M:Xmpp.Core.IqEventArgs.#ctor(Xmpp.Core.Iq)">
            <summary>
            Initializes a new instance of the IqEventArgs class.
            </summary>
            <param name="stanza">The IQ stanza on whose behalf the event is
            raised.</param>
            <exception cref="T:System.ArgumentNullException">The stanza parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Core.IqType">
            <summary>
            Defines the possible types for IQ stanzas.
            </summary>
        </member>
        <member name="F:Xmpp.Core.IqType.Set">
            <summary>
            The stanza provides required data, sets new values, or replaces
            existing values.
            </summary>
        </member>
        <member name="F:Xmpp.Core.IqType.Get">
            <summary>
            The stanza is a request for information or requirements.
            </summary>
        </member>
        <member name="F:Xmpp.Core.IqType.Result">
            <summary>
            The stanza is a response to a successful get or set request.
            </summary>
        </member>
        <member name="F:Xmpp.Core.IqType.Error">
            <summary>
            An error has occurred regarding processing or delivery of a
            previously-sent get or set.
            </summary>
        </member>
        <member name="T:Xmpp.Core.Message">
            <summary>
            Represents a Message XML stanza.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Message.#ctor(Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the Message class.
            </summary>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">The content of the stanza.</param>
            <param name="id">The ID of the Message stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
        </member>
        <member name="M:Xmpp.Core.Message.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the Message class from the specified
            Xml element.
            </summary>
            <param name="element">An Xml element representing an Message stanza.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Core.MessageEventArgs">
            <summary>
            Provides data for the Message event.
            </summary>
        </member>
        <member name="P:Xmpp.Core.MessageEventArgs.Stanza">
            <summary>
            The Message stanza.
            </summary>
        </member>
        <member name="M:Xmpp.Core.MessageEventArgs.#ctor(Xmpp.Core.Message)">
            <summary>
            Initializes a new instance of the MessageEventArgs class.
            </summary>
            <param name="stanza">The Message stanza on whose behalf the event is
            raised.</param>
            <exception cref="T:System.ArgumentNullException">The stanza parameter
            is null.</exception>
        </member>
        <member name="T:Xmpp.Core.Presence">
            <summary>
            Represents a Presence XML stanza.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Presence.#ctor(Xmpp.Jid,Xmpp.Jid,System.String,System.Globalization.CultureInfo,System.Xml.Linq.XElement[])">
            <summary>
            Initializes a new instance of the Presence class.
            </summary>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">The content of the stanza.</param>
            <param name="id">The ID of the Presence stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
        </member>
        <member name="M:Xmpp.Core.Presence.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the Presence class from the specified
            Xml element.
            </summary>
            <param name="element">An Xml element representing an Presence stanza.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Core.PresenceEventArgs">
            <summary>
            Provides data for the Presence event.
            </summary>
        </member>
        <member name="P:Xmpp.Core.PresenceEventArgs.Stanza">
            <summary>
            The Presence stanza.
            </summary>
        </member>
        <member name="M:Xmpp.Core.PresenceEventArgs.#ctor(Xmpp.Core.Presence)">
            <summary>
            Initializes a new instance of the PresenceEventArgs class.
            </summary>
            <param name="stanza">The Presence stanza on whose behalf the event is
            raised.</param>
            <exception cref="T:System.ArgumentNullException">The stanza parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5">
            <summary>
            Implements the Sasl Digest-Md5 authentication method as described in
            RFC 2831.
            </summary>
        </member>
        <member name="F:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.Cnonce">
            <summary>
            The client nonce value used during authentication.
            </summary>
        </member>
        <member name="F:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.Step">
            <summary>
            Cram-Md5 involves several steps.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.IsCompleted">
            <summary>
            True if the authentication exchange between client and server
            has been completed.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.HasInitial">
            <summary>
            The server sends the first Message in the authentication exchange.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.Name">
            <summary>
            The IANA name for the Digest-Md5 authentication mechanism as described
            in RFC 2195.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.Username">
            <summary>
            The username to authenticate with.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.Password">
            <summary>
            The password to authenticate with.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.#ctor">
            <summary>
            Private constructor for use with Sasl.SaslFactory.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.#ctor(System.String,System.String,System.String)">
            <summary>
            Internal constructor used for unit testing.
            </summary>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The plaintext password to authenticate
            with.</param>
            <param name="cnonce">The client nonce value to use.</param>
            <exception cref="T:System.ArgumentNullException">The username or the
            password parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The username parameter is
            the empty string.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.#ctor(System.String,System.String)">
            <summary>
            Creates and initializes a new instance of the SaslDigestMd5 class
            using the specified username and password.
            </summary>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The plaintext password to authenticate
            with.</param>
            <exception cref="T:System.ArgumentNullException">The username or the
            password parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The username parameter is
            the empty string.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.ComputeResponse(System.Byte[])">
            <summary>
            Computes the client response to the specified Digest-Md5 challenge.
            </summary>
            <param name="challenge">The challenge sent by the server</param>
            <returns>The response to the Digest-Md5 challenge.</returns>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">The response could not be
            computed.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.ParseDigestChallenge(System.String)">
            <summary>
            Parses the challenge string sent by the server in response to a Digest-Md5
            authentication request.
            </summary>
            <param name="challenge">The challenge sent by the server as part of
            "Step One" of the Digest-Md5 authentication mechanism.</param>
            <returns>An initialized NameValueCollection instance made up of the
            attribute/value pairs contained in the challenge.</returns>
            <exception cref="T:System.ArgumentNullException">The challenge parameter
            is null.</exception>
            <remarks>Refer to RFC 2831 section 2.1.1 for a detailed description of the
            format of the challenge sent by the server.</remarks>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.ComputeDigestResponseValue(Xmpp.Cryptography.NameValueCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Computes the "response-value" hex-string which is part of the
            Digest-MD5 challenge-response.
            </summary>
            <param name="challenge">A collection containing the attributes
            and values of the challenge sent by the server.</param>
            <param name="cnonce">The cnonce value to use for computing
            the response-value.</param>
            <param name="digestUri">The "digest-uri" string to use for
            computing the response-value.</param>
            <param name="username">The username to use for computing the
            response-value.</param>
            <param name="password">The password to use for computing the
            response-value.</param>
            <returns>A string containing a hash-value which is part of the
            response sent by the client.</returns>
            <remarks>Refer to RFC 2831, section 2.1.2.1 for a detailed
            description of the computation of the response-value.</remarks>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.MD5(System.String,System.Text.Encoding)">
            <summary>
            Calculates the MD5 hash value for the specified string.
            </summary>
            <param name="s">The string to calculate the MD5 hash value for.</param>
            <param name="encoding">The encoding to employ for encoding the
            characters in the specified string into a sequence of bytes for
            which the MD5 hash will be calculated.</param>
            <returns>An MD5 hash as a 32-character hex-string.</returns>
            <exception cref="T:System.ArgumentException">The input string
            is null.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.Dquote(System.String)">
            <summary>
            Encloses the specified string in double-quotes.
            </summary>
            <param name="s">The string to enclose in double-quote characters.</param>
            <returns>The enclosed string.</returns>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.UsernameBackslashEscapeXep106(System.String)">
            <summary>
            Add an additional backslash, if any backslashes are found in the username
            For XEP106 jid nodes, Openfire seems that it needs to escape the backslash
            within the user name. See discussion at https://community.igniterealtime.org/Message/254096#254096
            It is not clear if this is an Openfire bug or a Xmpp issue, so please treat this
            as experimental
            </summary>
            <param name="s">String to escape in order to resolve https://community.igniterealtime.org/Message/254096#254096 issue</param>
            <returns>String with backslashes escaped</returns>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslDigestMd5.GenerateCnonce">
            <summary>
            Generates a random cnonce-value which is a "client-specified data string
            which must be different each time a digest-response is sent".
            </summary>
            <returns>A random "cnonce-value" string.</returns>
        </member>
        <member name="T:Xmpp.Core.Sasl.Mechanisms.SaslPlain">
            <summary>
            Implements the Sasl Plain authentication method as described in
            RFC 4616.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslPlain.IsCompleted">
            <summary>
            True if the authentication exchange between client and server
            has been completed.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslPlain.HasInitial">
            <summary>
            Sasl Plain just sends one initial response.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslPlain.Name">
            <summary>
            The IANA name for the Plain authentication mechanism as described
            in RFC 4616.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslPlain.Username">
            <summary>
            The username to authenticate with.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.Mechanisms.SaslPlain.Password">
            <summary>
            The plain-text password to authenticate with.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslPlain.#ctor">
            <summary>
            Private constructor for use with Sasl.SaslFactory.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslPlain.#ctor(System.String,System.String)">
            <summary>
            Creates and initializes a new instance of the SaslPlain class
            using the specified username and password.
            </summary>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The plaintext password to authenticate
            with.</param>
            <exception cref="T:System.ArgumentNullException">The username or the
            password parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The username parameter
            is empty.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.Mechanisms.SaslPlain.ComputeResponse(System.Byte[])">
            <summary>
            Computes the client response for a plain-challenge.
            </summary>
            <param name="challenge">The challenge sent by the server. For the
            "plain" mechanism this will usually be empty.</param>
            <returns>The response for the "plain"-challenge.</returns>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">The response could not be
            computed.</exception>
        </member>
        <member name="T:Xmpp.Core.Sasl.SaslException">
            <summary>
            The exception is thrown when a Sasl-related error or unexpected condition occurs.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslException.#ctor">
            <summary>
            Initializes a new instance of the SaslException class
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SaslException class with its Message
            string set to <paramref name="message"/>.
            </summary>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SaslException class with its Message
            string set to <paramref name="message"/> and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xmpp.Core.Sasl.SaslFactory">
            <summary>
            A factory class for producing instances of Sasl mechanisms.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.SaslFactory.Mechanisms">
            <summary>
            A dictionary of Sasl mechanisms registered with the factory class.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslFactory.Create(System.String)">
            <summary>
            Creates an instance of the Sasl mechanism with the specified
            name.
            </summary>
            <param name="name">The name of the Sasl mechanism of which an
            instance will be created.</param>
            <returns>An instance of the Sasl mechanism with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">A Sasl mechanism with the
            specified name is not registered with Sasl.SaslFactory.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslFactory.Add(System.String,System.Type)">
            <summary>
            Registers a Sasl mechanism with the factory using the specified name.
            </summary>
            <param name="name">The name with which to register the Sasl mechanism
            with the factory class.</param>
            <param name="t">The type of the class implementing the Sasl mechanism.
            The implementing class must be a subclass of Sasl.SaslMechanism.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter or the t
            parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The class represented by the
            specified type does not derive from Sasl.SaslMechanism.</exception>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">The Sasl mechanism could not be
            registered with the factory. Refer to the inner exception for error
            details.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslFactory.#cctor">
            <summary>
            Static class constructor. Initializes static properties.
            </summary>
        </member>
        <member name="T:Xmpp.Core.Sasl.SaslMechanism">
            <summary>
            The abstract base class from which all classes implementing a Sasl
            authentication mechanism must derive.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.SaslMechanism.Name">
            <summary>
            IANA name of the authentication mechanism.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.SaslMechanism.IsCompleted">
            <summary>
            True if the authentication exchange between client and server
            has been completed.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.SaslMechanism.HasInitial">
            <summary>
            True if the mechanism requires initiation by the client.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Sasl.SaslMechanism.Properties">
            <summary>
            A map of mechanism-specific properties which are needed by the
            authentication mechanism to compute it's challenge-responses.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslMechanism.ComputeResponse(System.Byte[])">
            <summary>
            Computes the client response to a challenge sent by the server.
            </summary>
            <param name="challenge"></param>
            <returns>The client response to the specified challenge.</returns>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslMechanism.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslMechanism.GetResponse(System.String)">
            <summary>
            Retrieves the base64-encoded client response for the specified
            base64-encoded challenge sent by the server.
            </summary>
            <param name="challenge">A base64-encoded string representing a challenge
            sent by the server.</param>
            <returns>A base64-encoded string representing the client response to the
            server challenge.</returns>
            <remarks>The IMAP, POP3 and SMTP authentication commands expect challenges
            and responses to be base64-encoded. This method automatically decodes the
            server challenge before passing it to the Sasl implementation and
            encodes the client response to a base64-string before returning it to the
            caller.</remarks>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">The client response could not be retrieved.
            Refer to the inner exception for error details.</exception>
        </member>
        <member name="M:Xmpp.Core.Sasl.SaslMechanism.GetResponse(System.Byte[])">
            <summary>
            Retrieves the client response for the specified server challenge.
            </summary>
            <param name="challenge">A byte array containing the challenge sent by
            the server.</param>
            <returns>An array of bytes representing the client response to the
            server challenge.</returns>
        </member>
        <member name="T:Xmpp.Core.Stanza">
            <summary>
            Represents the base class for XML stanzas as are used by XMPP from which
            all implementations must derive.
            </summary>
        </member>
        <member name="F:Xmpp.Core.Stanza.element">
            <summary>
            The XElement containing the actual data.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.To">
            <summary>
            Specifies the JID of the intended recipient for the stanza.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.From">
            <summary>
            Specifies the JID of the sender. If this is null, the stanza was generated
            by the client's server.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.Id">
            <summary>
            The ID of the stanza, which may be used for internal tracking of stanzas.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.Language">
            <summary>
            The language of the XML character data if the stanza contains data that is
            intended to be presented to a human user.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.Data">
            <summary>
            The data of the stanza.
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.DataString">
            <summary>
            Represent xml in string format
            </summary>
        </member>
        <member name="P:Xmpp.Core.Stanza.IsEmpty">
            <summary>
            Determines whether the stanza is empty, i.e. has no child nodes.
            </summary>
        </member>
        <member name="M:Xmpp.Core.Stanza.#ctor(System.String,Xmpp.Jid,Xmpp.Jid,System.String,System.Globalization.CultureInfo,System.Xml.Linq.XElement[])">
            <summary>
            Initializes a new instance of the Stanza class.
            </summary>
            <param name="namespace">The xml namespace of the stanza, if any.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="id">The ID of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <param name="data">The content of the stanza.</param>
        </member>
        <member name="M:Xmpp.Core.Stanza.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the Stanza class using the specified
            XElement.
            </summary>
            <param name="element">The XElement to create the stanza from.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Core.Stanza.ToString">
            <summary>
            Returns a textual representation of this instance of the Stanza class.
            </summary>
            <returns>A textual representation of this Stanza instance.</returns>
        </member>
        <member name="T:Xmpp.Core.StreamParser">
            <summary>
            Implements a parser for parsing XMPP XML-streams as defined per XMPP:Core
            Section 4 ('XML Streams').
            </summary>
        </member>
        <member name="F:Xmpp.Core.StreamParser.reader">
            <summary>
            The reader that provides the fast-forward access to the XML stream.
            </summary>
        </member>
        <member name="F:Xmpp.Core.StreamParser.leaveOpen">
            <summary>
            If true, the stream is not closed when the StreamParser instance is
            disposed of.
            </summary>
        </member>
        <member name="F:Xmpp.Core.StreamParser.stream">
            <summary>
            The stream on which the reader operates.
            </summary>
        </member>
        <member name="P:Xmpp.Core.StreamParser.Language">
            <summary>
            The default language of any human-readable XML character send over
            that stream.
            </summary>
        </member>
        <member name="M:Xmpp.Core.StreamParser.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamParser class for the specified
            stream.
            </summary>
            <param name="stream">The stream to read the XML data from.</param>
            <param name="leaveOpen">true to leave the stream open when the StreamParser
            instance is closed, otherwise false.</param>
            <exception cref="T:System.ArgumentNullException">The stream parameter is
            null.</exception>
            <exception cref="T:System.Xml.XmlException">The parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.Globalization.CultureNotFoundException">The culture specified by the
            XML-stream in it's 'xml:lang' attribute could not be found.</exception>
        </member>
        <member name="M:Xmpp.Core.StreamParser.NextElement(System.String[])">
            <summary>
            Reads the next XML element from the input stream.
            </summary>
            <param name="expected">A list of element names, that are expected. If
            provided, and the read element does not match any of the provided names,
            an XmlException is thrown.</param>
            <returns>The XML element read from the stream.</returns>
            <exception cref="T:System.Xml.XmlException">The input stream contains invalid XML, or
            the read element is not an XML node of type XElement, or the read element
            is not a start element, or the read element is not one of the expected
            elements.</exception>
            <exception cref="T:System.IO.IOException">An unrecoverable stream error condition
            has been encountered and the server has closed the connection.</exception>
        </member>
        <member name="M:Xmpp.Core.StreamParser.Close">
            <summary>
            Closes the stream parser.
            </summary>
        </member>
        <member name="M:Xmpp.Core.StreamParser.Dispose">
            <summary>
            Releases all resources used by the current instance of the XmppParser class.
            </summary>
        </member>
        <member name="M:Xmpp.Core.StreamParser.ReadRootElement">
            <summary>
            Reads the XML stream up to the 'stream:stream' opening tag.
            </summary>
            <exception cref="T:System.Xml.XmlException">The parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.Globalization.CultureNotFoundException">The culture specified by the
            XML-stream in it's 'xml:lang' attribute could not be found.</exception>
        </member>
        <member name="T:Xmpp.Core.XmppCore">
            <summary>
            Implements the core features of the XMPP protocol.
            </summary>
            <remarks>For implementation details, refer to RFC 3920.</remarks>
        </member>
        <member name="F:Xmpp.Core.XmppCore.dnsIsInit">
            <summary>
            Bool variable indicating whether DNS records are initialised
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.client">
            <summary>
            The TCP connection to the XMPP server.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.stream">
            <summary>
            The (network) stream used for sending and receiving XML data.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.parser">
            <summary>
            The parser instance used for parsing incoming XMPP XML-stream data.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.disposed">
            <summary>
            True if the instance has been disposed of.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.id">
            <summary>
            Used for creating unique IQ stanza ids.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.port">
            <summary>
            The port number of the XMPP service of the server.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.hostname">
            <summary>
            The hostname of the XMPP server to connect to.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.username">
            <summary>
            The username with which to authenticate.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.password">
            <summary>
            The password with which to authenticate.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.resource">
            <summary>
            The resource to use for binding.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.writeLock">
            <summary>
            Write lock for the network stream.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.millisecondsDefaultTimeout">
            <summary>
            The default Time Out for IQ Requests
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.debugStanzas">
            <summary>
            The default value for debugging stanzas is false
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.waitHandles">
            <summary>
            A thread-safe dictionary of wait handles for pending IQ requests.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.iqResponses">
            <summary>
            A thread-safe dictionary of IQ responses for pending IQ requests.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.iqCallbacks">
            <summary>
            A thread-safe dictionary of callback methods for asynchronous IQ requests.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.cancelIq">
            <summary>
            A cancellation token source that is set when the listener threads shuts
            down due to an exception.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.stanzaQueue">
            <summary>
            A FIFO of stanzas waiting to be processed.
            </summary>
        </member>
        <member name="F:Xmpp.Core.XmppCore.cancelDispatch">
            <summary>
            A cancellation token source for cancelling the dispatcher, if neccessary.
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Hostname">
            <summary>
            The hostname of the XMPP server to connect to.
            </summary>
            <exception cref="T:System.ArgumentNullException">The Hostname property is being
            set and the value is null.</exception>
            <exception cref="T:System.ArgumentException">The Hostname property is being set
            and the value is the empty string.</exception>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Port">
            <summary>
            The port number of the XMPP service of the server.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The Port property is being
            set and the value is not between 0 and 65536.</exception>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Username">
            <summary>
            The username with which to authenticate. In XMPP jargon this is known
            as the 'node' part of the JID.
            </summary>
            <exception cref="T:System.ArgumentNullException">The Username property is being
            set and the value is null.</exception>
            <exception cref="T:System.ArgumentException">The Username property is being set
            and the value is the empty string.</exception>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Password">
            <summary>
            The password with which to authenticate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The Password property is being
            set and the value is null.</exception>
        </member>
        <member name="P:Xmpp.Core.XmppCore.MillisecondsDefaultTimeout">
            <summary>
            The Default IQ Set /Request Message timeout
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.DebugStanzas">
            <summary>
            Print XML stanzas for debugging purposes
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Tls">
            <summary>
            If true the session will be TLS/SSL-encrypted if the server supports it.
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.IsEncrypted">
            <summary>
            Determines whether the session with the server is TLS/SSL encrypted.
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Jid">
            <summary>
            The address of the Xmpp entity.
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Language">
            <summary>
            The default language of the XML stream.
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Connected">
            <summary>
            Determines whether the instance is connected to the XMPP server.
            </summary>
        </member>
        <member name="P:Xmpp.Core.XmppCore.Authenticated">
            <summary>
            Determines whether the instance has been authenticated.
            </summary>
        </member>
        <member name="E:Xmpp.Core.XmppCore.Error">
            <summary>
            The event that is raised when an unrecoverable error condition occurs.
            </summary>
        </member>
        <member name="E:Xmpp.Core.XmppCore.Iq">
            <summary>
            The event that is raised when an IQ-request stanza has been received.
            </summary>
        </member>
        <member name="E:Xmpp.Core.XmppCore.Message">
            <summary>
            The event that is raised when a Message stanza has been received.
            </summary>
        </member>
        <member name="E:Xmpp.Core.XmppCore.Presence">
            <summary>
            The event that is raised when a Presence stanza has been received.
            </summary>
        </member>
        <member name="M:Xmpp.Core.XmppCore.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the XmppCore class.
            </summary>
            <param name="hostname">The hostname of the XMPP server to connect to.</param>
            <param name="username">The username with which to authenticate. In XMPP jargon
            this is known as the 'node' part of the JID.</param>
            <param name="password">The password with which to authenticate.</param>
            <param name="port">The port number of the XMPP service of the server.</param>
            <param name="tls">If true the session will be TLS/SSL-encrypted if the server
            supports TLS/SSL-encryption.</param>
            <param name="validate">A delegate used for verifying the remote Secure Sockets
            Layer (SSL) certificate which is used for authentication. Can be null if not
            needed.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter or the
            username parameter or the password parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The hostname parameter or the username
            parameter is the empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the port parameter
            is not a valid port number.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the XmppCore class.
            </summary>
            <param name="hostname">The hostname of the XMPP server to connect to.</param>
            <param name="port">The port number of the XMPP service of the server.</param>
            <param name="tls">If true the session will be TLS/SSL-encrypted if the server
            supports TLS/SSL-encryption.</param>
            <param name="validate">A delegate used for verifying the remote Secure Sockets
            Layer (SSL) certificate which is used for authentication. Can be null if not
            needed.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The hostname parameter is the empty
            string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the port parameter
            is not a valid port number.</exception>
        </member>
        <member name="F:Xmpp.Core.XmppCore.STREAM_ELEMENT_NAME">
            <summary>
            Initialises and resolves the DNS Domain, and set to dnsCurrent the next
            SRV record to use
            </summary>
            <param name="domain">XMPP Domain</param>
            <returns>XMPP server hostname for the Domain</returns>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Connect(System.String)">
            <summary>
            Establishes a connection to the XMPP server.
            </summary>
            <param name="resource">The resource identifier to bind with. If this is null,
            it is assigned by the server.</param>
            <exception cref="!:SocketException">An error occurred while accessing the socket
            used for establishing the connection to the XMPP server. Use the ErrorCode
            property to obtain the specific error code.</exception>
            <exception cref="!:AuthenticationException">An authentication error occured while
            trying to establish a secure connection, or the provided credentials were
            rejected by the server, or the server requires TLS/SSL and TLS has been
            turned off.</exception>
            <exception cref="T:Xmpp.XmppException">An XMPP error occurred while negotiating the
            XML stream with the server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <remarks>If a username has been supplied, this method automatically performs
            authentication.</remarks>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Authenticate(System.String,System.String)">
            <summary>
            Authenticates with the XMPP server using the specified username and
            password.
            </summary>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The password to authenticate with.</param>
            <exception cref="T:System.ArgumentNullException">The username parameter or the
            password parameter is null.</exception>
            <exception cref="!:SocketException">An error occurred while accessing the socket
            used for establishing the connection to the XMPP server. Use the ErrorCode
            property to obtain the specific error code.</exception>
            <exception cref="!:AuthenticationException">An authentication error occured while
            trying to establish a secure connection, or the provided credentials were
            rejected by the server, or the server requires TLS/SSL and TLS has been
            turned off.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:Xmpp.XmppException">Authentication has already been performed, or
            an XMPP error occurred while negotiating the XML stream with the
            server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SendMessage(Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.String,System.Globalization.CultureInfo)">
            <summary>
            Sends a Message stanza with the specified attributes and content to the
            server.
            </summary>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="id">The ID of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SendMessage(Xmpp.Core.Message)">
            <summary>
            Sends the specified Message stanza to the server.
            </summary>
            <param name="message">The Message stanza to send to the server.</param>
            <exception cref="T:System.ArgumentNullException">The Message parameter is
            null.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SendPresence(Xmpp.Jid,Xmpp.Jid,System.String,System.Globalization.CultureInfo,System.Xml.Linq.XElement[])">
            <summary>
            Sends a Presence stanza with the specified attributes and content to the
            server.
            </summary>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="id">The ID of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SendPresence(Xmpp.Core.Presence)">
            <summary>
            Sends the specified presence stanza to the server.
            </summary>
            <param name="presence">The presence stanza to send to the server.</param>
            <exception cref="T:System.ArgumentNullException">The presence parameter
            is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.IqRequest(Xmpp.Core.IqType,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Performs an IQ set/get request and blocks until the response IQ comes in.
            </summary>
            <param name="type">The type of the request. This must be either
            IqType.Set or IqType.Get.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait
            for the arrival of the IQ response or -1 to wait indefinitely.</param>
            <returns>The IQ response sent by the server.</returns>
            <exception cref="T:System.ArgumentException">The type parameter is not
            IqType.Set or IqType.Get.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of millisecondsTimeout
            is a negative number other than -1, which represents an indefinite
            timeout.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network, or there was a failure reading from the network.</exception>
            <exception cref="T:System.TimeoutException">A timeout was specified and it
            expired.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.IqRequest(Xmpp.Core.Iq,System.Int32)">
            <summary>
            Performs an IQ set/get request and blocks until the response IQ comes in.
            </summary>
            <param name="request">The IQ request to send.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait
            for the arrival of the IQ response or -1 to wait indefinitely.</param>
            <returns>The IQ response sent by the server.</returns>
            <exception cref="T:System.ArgumentNullException">The request parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Set
            or IqType.Get.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of millisecondsTimeout
            is a negative number other than -1, which represents an indefinite
            timeout.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network, or there was a failure reading from the network.</exception>
            <exception cref="T:System.TimeoutException">A timeout was specified and it
            expired.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.IqRequestAsync(Xmpp.Core.IqType,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Action{System.String,Xmpp.Core.Iq})">
            <summary>
            Performs an IQ set/get request asynchronously and optionally invokes a
            callback method when the IQ response comes in.
            </summary>
            <param name="type">The type of the request. This must be either
            IqType.Set or IqType.Get.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <param name="callback">A callback method which is invoked once the
            IQ response from the server comes in.</param>
            <returns>The ID value of the pending IQ stanza request.</returns>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Set
            or IqType.Get.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.IqRequestAsync(Xmpp.Core.Iq,System.Action{System.String,Xmpp.Core.Iq})">
            <summary>
            Performs an IQ set/get request asynchronously and optionally invokes a
            callback method when the IQ response comes in.
            </summary>
            <param name="request">The IQ request to send.</param>
            <param name="callback">A callback method which is invoked once the
            IQ response from the server comes in.</param>
            <returns>The ID value of the pending IQ stanza request.</returns>
            <exception cref="T:System.ArgumentNullException">The request parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Set
            or IqType.Get.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.IqResponse(Xmpp.Core.IqType,System.String,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo)">
            <summary>
            Sends an IQ response for the IQ request with the specified id.
            </summary>
            <param name="type">The type of the response. This must be either
            IqType.Result or IqType.Error.</param>
            <param name="id">The id of the IQ request.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Result
            or IqType.Error.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.IqResponse(Xmpp.Core.Iq)">
            <summary>
            Sends an IQ response for the IQ request with the specified id.
            </summary>
            <param name="response">The IQ response to send.</param>
            <exception cref="T:System.ArgumentNullException">The response parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The Type property of the response
            parameter is not IqType.Result or IqType.Error.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Close">
            <summary>
            Closes the connection with the XMPP server. This automatically disposes
            of the object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Dispose">
            <summary>
            Releases all resources used by the current instance of the XmppCore class.
            </summary>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the XmppCore
            class, optionally disposing of managed resource.
            </summary>
            <param name="disposing">true to dispose of managed resources, otherwise
            false.</param>
        </member>
        <member name="M:Xmpp.Core.XmppCore.AssertValid">
            <summary>
            Asserts the instance has not been disposed of and is connected to the
            XMPP server.
            </summary>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SetupConnection(System.String)">
            <summary>
            Negotiates an XML stream over which XML stanzas can be sent.
            </summary>
            <param name="resource">The resource identifier to bind with. If this is null,
            it is assigned by the server.</param>
            <exception cref="T:Xmpp.XmppException">The resource binding process failed.</exception>
            <exception cref="T:System.Xml.XmlException">Invalid or unexpected XML data has been
            received from the XMPP server.</exception>
            <exception cref="!:AuthenticationException">An authentication error occured while
            trying to establish a secure connection, or the provided credentials were
            rejected by the server, or the server requires TLS/SSL and TLS has been
            turned off.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.InitiateStream(System.String)">
            <summary>
            Initiates an XML stream with the specified entity.
            </summary>
            <param name="hostname">The name of the receiving entity with which to
            initiate an XML stream.</param>
            <returns>The 'stream:features' XML element as received from the
            receiving entity upon stream establishment.</returns>
            <exception cref="T:System.Xml.XmlException">The XML parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.Globalization.CultureNotFoundException">The culture specified by the
            XML-stream in it's 'xml:lang' attribute could not be found.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network, or there was a failure while reading from the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.StartTls(System.String)">
            <summary>
            Secures the network stream by negotiating TLS-encryption with the server.
            </summary>
            <param name="hostname">The hostname of the XMPP server.</param>
            <param name="validate">A delegate used for verifying the remote Secure
            Sockets Layer (SSL) certificate which is used for authentication. Can be
            null if not needed.</param>
            <returns>The 'stream:features' XML element as received from the
            receiving entity upon establishment of a new XML stream.</returns>
            <exception cref="!:AuthenticationException">An
            authentication error occured while trying to establish a secure
            connection.</exception>
            <exception cref="T:System.Xml.XmlException">The XML parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.Globalization.CultureNotFoundException">The culture specified by the
            XML-stream in it's 'xml:lang' attribute could not be found.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network, or there was a failure while reading from the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Authenticate(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
            <summary>
            Performs SASL authentication.
            </summary>
            <param name="mechanisms">An enumerable collection of SASL mechanisms
            supported by the server.</param>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The password to authenticate with.</param>
            <param name="hostname">The hostname of the XMPP server.</param>
            <returns>The 'stream:features' XML element as received from the
            receiving entity upon establishment of a new XML stream.</returns>
            <remarks>Refer to RFC 3920, Section 6 (Use of SASL).</remarks>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">A SASL error condition occured.</exception>
            <exception cref="T:System.Xml.XmlException">The XML parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.Globalization.CultureNotFoundException">The culture specified by the
            XML-stream in it's 'xml:lang' attribute could not be found.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network, or there was a failure while reading from the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SelectMechanism(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Selects the best SASL mechanism that we support from the list of mechanisms
            advertised by the server.
            </summary>
            <param name="mechanisms">An enumerable collection of SASL mechanisms
            advertised by the server.</param>
            <returns>The IANA name of the selcted SASL mechanism.</returns>
            <exception cref="T:Xmpp.Core.Sasl.SaslException">No supported mechanism could be found in
            the list of mechanisms advertised by the server.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.BindResource(System.String)">
            <summary>
            Performs resource binding and returns the 'full JID' with which this
            session associated.
            </summary>
            <param name="resourceName">The resource identifier to bind to. If this
            is null, the server generates a random identifier.</param>
            <returns>The full JID to which this session has been bound.</returns>
            <remarks>Refer to RFC 3920, Section 7 (Resource Binding).</remarks>
            <exception cref="T:Xmpp.XmppException">The resource binding process
            failed due to an erroneous server response.</exception>
            <exception cref="T:System.Xml.XmlException">The XML parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network, or there was a failure while reading from the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Send(System.Xml.Linq.XElement)">
            <summary>
            Serializes and sends the specified XML element to the server.
            </summary>
            <param name="element">The XML element to send.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter
            is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing
            to the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Send(System.String)">
            <summary>
            Sends the specified string to the server.
            </summary>
            <param name="xml">The string to send.</param>
            <exception cref="T:System.ArgumentNullException">The xml parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to
            the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Send(Xmpp.Core.Stanza)">
            <summary>
            Sends the specified stanza to the server.
            </summary>
            <param name="stanza">The stanza to send.</param>
            <exception cref="T:System.ArgumentNullException">The stanza parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to
            the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.SendAndReceive(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Serializes and sends the specified XML element to the server and
            subsequently waits for a response.
            </summary>
            <param name="element">The XML element to send.</param>
            <param name="expected">A list of element names that are expected. If
            provided, and the read element does not match any of the provided names,
            an XmmpException is thrown.</param>
            <returns>The XML element read from the stream.</returns>
            <exception cref="T:System.Xml.XmlException">The XML parser has encountered invalid
            or unexpected XML data.</exception>
            <exception cref="T:System.ArgumentNullException">The element parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to
            the network, or there was a failure while reading from the network.</exception>
        </member>
        <member name="M:Xmpp.Core.XmppCore.ReadXmlStream">
            <summary>
            Listens for incoming XML stanzas and raises the appropriate events.
            </summary>
            <remarks>This runs in the context of a separate thread. In case of an
            exception, the Error event is raised and the thread is shutdown.</remarks>
        </member>
        <member name="M:Xmpp.Core.XmppCore.DispatchEvents">
            <summary>
            Continously removes stanzas from the FIFO of incoming stanzas and raises
            the respective events.
            </summary>
            <remarks>This runs in the context of a separate thread. All stanza events
            are streamlined and execute in the context of this thread.</remarks>
        </member>
        <member name="M:Xmpp.Core.XmppCore.HandleIqResponse(Xmpp.Core.Iq)">
            <summary>
            Handles incoming IQ responses for previously issued IQ requests.
            </summary>
            <param name="iq">The received IQ response stanza.</param>
        </member>
        <member name="M:Xmpp.Core.XmppCore.GetId">
            <summary>
            Generates a unique id.
            </summary>
            <returns>A unique id.</returns>
        </member>
        <member name="M:Xmpp.Core.XmppCore.Disconnect">
            <summary>
            Disconnects from the XMPP server.
            </summary>
        </member>
        <member name="T:Xmpp.ErrorCondition">
            <summary>
            Defines possible values for the condition of XMPP errors.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.BadRequest">
            <summary>
            The sender has sent XML that is malformed or that cannot be processed.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.Conflict">
            <summary>
            Access cannot be granted because an existing resource or session exists
            with the same name or address.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.FeatureNotImplemented">
            <summary>
            The feature requested is not implemented by the recipient or server and
            therefore cannot be processed.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.Forbidden">
            <summary>
            The requesting entity does not possess the required permissions to
            perform the action.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.Gone">
            <summary>
            The recipient or server can no longer be contacted at this address.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.InternalServerError">
            <summary>
            The server could not process the stanza because of a misconfiguration or
            an otherwise-undefined internal server error.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.ItemNotFound">
            <summary>
            The addressed JID or item requested cannot be found.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.JidMalformed">
            <summary>
            The sending entity has provided or communicated an XMPP address or aspect
            thereof that does not adhere to the XMPP syntax.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.NotAcceptable">
            <summary>
            The recipient or server understands the request but is refusing to process
            it.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.NotAllowed">
            <summary>
            The recipient or server does not allow any entity to perform the action.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.NotAuthorized">
            <summary>
            The sender must provide proper credentials before being allowed to perform
            the action, or has provided improper credentials.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.PaymentRequired">
            <summary>
            The requesting entity is not authorized to access the requested service
            because payment is required.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.RecipientUnavailable">
            <summary>
            The intended recipient is temporarily unavailable.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.Redirect">
            <summary>
            The recipient or server is redirecting requests for this information to
            another entity, usually temporarily.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.RegistrationRequired">
            <summary>
            The requesting entity is not authorized to access the requested service
            because registration is required.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.RemoteServerNotFound">
            <summary>
            A remote server or service specified as part or all of the JID of the
            intended recipient does not exist.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.RemoteServerTimeout">
            <summary>
            A remote server or service specified as part or all of the JID of the
            intended recipient could not be contacted within a reasonable amount
            of time.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.ResourceConstraint">
            <summary>
            The server or recipient lacks the system resources necessary to service
            the request.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.ServiceUnavailable">
            <summary>
            The server or recipient does not currently provide the requested service.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.SubscriptionRequired">
            <summary>
            The requesting entity is not authorized to access the requested service
            because a subscription is required.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.UndefinedCondition">
            <summary>
            The error condition is not one of those defined by the other conditions in
            this enumeration.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorCondition.UnexpectedRequest">
            <summary>
            The recipient or server understood the request but was not expecting it at
            this time (e.g., the request was out of order).
            </summary>
        </member>
        <member name="T:Xmpp.ErrorType">
            <summary>
            Defines possible values for the type of XMPP errors.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorType.Cancel">
            <summary>
            Do not retry (the error is unrecoverable).
            </summary>
        </member>
        <member name="F:Xmpp.ErrorType.Continue">
            <summary>
            Proceed (the condition was only a warning).
            </summary>
        </member>
        <member name="F:Xmpp.ErrorType.Modify">
            <summary>
            Retry after changing the data sent.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorType.Auth">
            <summary>
            Retry after providing credentials.
            </summary>
        </member>
        <member name="F:Xmpp.ErrorType.Wait">
            <summary>
            Retry after waiting (the error is temporary).
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.CustomIqExtension">
            <summary>
            Implements Mechanism for providing Custom IQ Extensions
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.CustomIqExtension.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.CustomIqExtension.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.CustomIqExtension.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.CustomIqExtension.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.CustomIqExtension.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            If the Iq is correctly received a Result response is included
            with extension specific metadata included.
            If the Iq is not correctly received an error is returned
            Semantics of error on the response refer only to the XMPP level
            and not the application specific level
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.CustomIqExtension.RequestCustomIqAsync(Xmpp.Jid,System.String,System.Action)">
            <summary>
            Requests the XMPP entity with the specified JID a GET command.
            When the Result is received and it not not an error
            if fires the callback function
            </summary>
            <param name="jid">The JID of the XMPP entity to get.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Ping' XMPP extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.CustomIqExtension.RequestCustomIq(Xmpp.Jid,System.String)">
            <summary>
            Requests the XMPP entity with the specified JID a GET command.
            When the Result is received and it not not an error
            if fires the callback function
            </summary>
            <param name="jid">The JID of the XMPP entity to get.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Ping' XMPP extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.CustomIqExtension.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the CustomIq class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.CustomIqRequestDelegate">
            <summary>
            Invoked when a CustomIqRequest is made.
            </summary>
            <param name="jid">The jid</param>
            <param name="str">The serialised data stream</param>
            <returns>The serialised anwser string</returns>
        </member>
        <member name="T:Xmpp.Extensions.Extension">
            <summary>
            An enumeration of supported XMPP extensions.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.ServiceDiscovery">
            <summary>
            An extension for discovering information about other XMPP entities.
            </summary>
            <remarks>Defined in XEP-0030.</remarks>
        </member>
        <member name="F:Xmpp.Extensions.Extension.SoftwareVersion">
            <summary>
            An extension for retrieving information about the software application
            associated with an XMPP entity.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.EntityCapabilities">
            <summary>
            An extension for broadcasting and dynamically discovering client,
            device, or generic entity capabilities.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.Ping">
            <summary>
            An extension for sending application-level pings over XML streams.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.Attention">
            <summary>
            An extension for getting the attention of another user.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.EntityTime">
            <summary>
            An extension for communicating the local time of an entity.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.BlockingCommand">
            <summary>
            An extension for communications blocking that is intended to be
            simpler than privacy lists.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.PersonalEventingProcotol">
            <summary>
            An extension for publishing and subscribing to broadcast state change
            events associated with an instant messaging and presence account.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.UserTune">
            <summary>
            An extension for communicating information about music to which a user
            is listening, including the title, track number, length and others.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.UserAvatar">
            <summary>
            An extension for exchanging user avatars, which are small images or
            icons associated with human users.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.UserMood">
            <summary>
            An extension for for communicating information about user moods, such
            as whether a person is currently happy, sad, angy, or annoyed.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.DataForms">
            <summary>
            An extension extension for data forms that can be used in workflows
            such as service configuration as well as for application-specific
            data description and reporting.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.FeatureNegotiation">
            <summary>
            An extension that enables two entities to mutually negotiate feature
            options, such as parameters related to a file transfer or a
            communications session.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.StreamInitiation">
            <summary>
            An extension for initiating a data stream between any two XMPP
            entities.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.SIFileTransfer">
            <summary>
            An extension for transferring files between two entities.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.InBandBytestreams">
            <summary>
            An extension that enables any two entities to establish a one-to-one
            bytestream between themselves, where the data is broken down into
            smaller chunks and transported in-band over XMPP.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.UserActivity">
            <summary>
            An extension for communicating information about user activities,
            such as whether a person is currently working, travelling, or
            relaxing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.Socks5Bytestreams">
            <summary>
            An extension for establishing an out-of-band bytestream between any
            two XMPP users, mainly for the purpose of file transfer.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.ServerIpCheck">
            <summary>
            An extension that enables a client to discover its external IP
            address.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.InBandRegistration">
            <summary>
            An extension for in-band registration with XMPP-based instant messaging
            servers and other services hosted on an XMPP network.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.BitsOfBinary">
            <summary>
            An extension for including or referring to small bits of binary data in
            an XML stanza.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.ChatStateNotifications">
            <summary>
            An extension for communicating the status of a user in a chat session,
            thus indicating whether a chat partner is actively engaged in the chat,
            composing a Message, temporarily paused, inactive, or gone.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.vCardsAvatars">
            <summary>
            An extestion for downloading-uploading avatar vcard data
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.CustomIqExtension">
            <summary>
            Wrapper for providing Custom IQ Extensions
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Extension.MessageCarbons">
            <summary>
            An extension for receiving messages directed to the bare Jid
            on multiple resources that have opted-in
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.IInputFilter`1">
            <summary>
            Represents an extension that filters incoming stanzas.
            </summary>
            <typeparam name="T">The type of the stanzas to filter.</typeparam>
        </member>
        <member name="M:Xmpp.Extensions.IInputFilter`1.Input(`0)">
            <summary>
            Invoked when a stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="T:Xmpp.Extensions.IOutputFilter`1">
            <summary>
            Represents an extension that filters outgoing stanzas.
            </summary>
            <typeparam name="T">The type of the stanzas to filter.</typeparam>
        </member>
        <member name="M:Xmpp.Extensions.IOutputFilter`1.Output(`0)">
            <summary>
            Invoked when a stanza is being sent.
            </summary>
            <param name="stanza">The stanza which is being sent.</param>
        </member>
        <member name="T:Xmpp.Extensions.vCardAvatars">
            <summary>
            Implements the 'vCard based Avatars' extension as defined in XEP-0153.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.vCardAvatars.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.vCardAvatars.cachedImages">
            <summary>
            A cache of images indexed by their respective SHA-1 hashes.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.vCardAvatars.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.vCardAvatars.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.vCardAvatars.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.vCardAvatars.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.vCardAvatars.RequestAvatar(Xmpp.Jid,System.String,System.Action)">
            <summary>
            Requests the avatar image with the specified hash from the node service
            running at the specified JID.
            </summary>
            <param name="jid">The JID of the node service to request the avatar
            image from.</param>
            <param name="hash">The hash of the avatar image to retrieve.</param>
            <returns>An Image instance representing the retrieved avatar image.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the
            hash parameter is null.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.vCardAvatars.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the vCard-Avatar class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.DataForms">
            <summary>
            Implements the 'Data Forms' extension as defined in XEP-0004.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.DataForms.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.DataForms.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.DataForms.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the DataForms class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.BooleanField">
            <summary>
            Represents a field that provides an either-or choice between two options.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.BooleanField.Value">
            <summary>
            The value of the field. If no choice has been made, this may be null.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.BooleanField.#ctor(System.String,System.Boolean,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the BooleanField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="value">The default value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.BooleanField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the BooleanField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.BooleanField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the BooleanField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'boolean'.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.BooleanField.ParseValue(System.String)">
            <summary>
            Converts the specified string representation of a logical value to its
            boolean equivalent.
            </summary>
            <param name="value">The string value to pars.</param>
            <returns>The boolean equivalent of the string value.</returns>
            <exception cref="T:System.ArgumentNullException">The value paramter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.CancelForm">
            <summary>
            Represents a data-form that signals cancellation of submission of data.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.CancelForm.#ctor">
            <summary>
            Initializes a new instance of the CancelForm class.
            </summary>
            <remarks>This creates a read-only data-form to which no fields must
            be added.</remarks>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.CancelForm.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the CancelForm class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-form element of type 'cancel'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.DataField">
            <summary>
            The base class from which all implementations of data-fields must derive.
            </summary>
            <remarks>Unfortunately, this can not be an abstract class the way the
            data-forms extension has been designed; Forms of type 'submit' are not
            required to include a type-attribute for fields and thus make strongly
            typed data-fields impossible.</remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataField.element">
            <summary>
            The underlying XML element representing the data-field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataField.Label">
            <summary>
            A human-readable name for the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataField.Description">
            <summary>
            A natural-language description of the field, intended for presentation
            in a user-agent.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataField.Required">
            <summary>
            Determines whether the field is required to fill out, or optional.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataField.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataField.Type">
            <summary>
            The type of the field or null if no type has been specified.
            </summary>
            <exception cref="T:System.Xml.XmlException">The 'type' attribute of the underlying
            XML element is invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.ToString">
            <summary>
            Returns a textual XML representation of the data-field.
            </summary>
            <returns>A string containing the XML representation of the
            data-field.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.ToXmlElement">
            <summary>
            Returns an XElement instance representing the data-field.
            </summary>
            <returns>An XElement representing the data-field.</returns>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataField.Values">
            <summary>
            Returns a collection of the data-field's values.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.#ctor(Xmpp.Extensions.Dataforms.DataFieldType,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the DataField class for use in a
            requesting dataform.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the DataField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.AssertType(Xmpp.Extensions.Dataforms.DataFieldType)">
            <summary>
            Asserts the data-field is of the specified type.
            </summary>
            <param name="expected">The type to assert.</param>
            <exception cref="T:System.ArgumentException">The data-field is not of the
            expected type.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.SetType(System.Nullable{Xmpp.Extensions.Dataforms.DataFieldType})">
            <summary>
            Sets the type of the data-field to the specified value.
            </summary>
            <param name="type">The value to set the type of the data-field to. Can be
            one of the values from the DataFieldType enumeration.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.TypeToAttributeValue(Xmpp.Extensions.Dataforms.DataFieldType)">
            <summary>
            Converts the specified value from the DataFieldType enumeration into
            its respective textual representation.
            </summary>
            <param name="type">The value to convert into a string.</param>
            <returns>A string representing the specified value.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.AttributeValueToType(System.String)">
            <summary>
            Converts the specified string into a value of the DataFieldType
            enumeration.
            </summary>
            <param name="value">The string value to convert.</param>
            <returns>An object of the DataFieldType enumeration whose value is
            represented by value.</returns>
            <exception cref="T:System.ArgumentNullException">The value parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">value is either an empty string
            or only contains white space, or value is a name, but not one of
            the named constants of the DataFieldType enumeration.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataField.GetDataFieldType">
            <summary>
            Returns the type of the data-field.
            </summary>
            <returns>The type of the data-field or null if no type has been
            specified.</returns>
            <exception cref="T:System.Xml.XmlException">The 'type' attribute of the underlying
            XML element is invalid.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.DataFieldType">
            <summary>
            Defines possible values for the different types of data-fields.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.Boolean">
            <summary>
            The field provides an either-or choice between two options.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.Fixed">
            <summary>
            The field is intended for data description rather than data gathering.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.Hidden">
            <summary>
            The field is not shown to the form-submitting entity, but instead is
            returned with the form.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.JidMulti">
            <summary>
            The field enables an entity to gather or provide multiple Jabber IDs.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.JidSingle">
            <summary>
            The field enables an entity to gather or provide a single Jabber ID.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.ListMulti">
            <summary>
            The field enables an entity to gather or provide one or more options
            from among many.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.ListSingle">
            <summary>
            The field enables an entity to gather or provide one option from among
            many.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.TextMulti">
            <summary>
            The field enables an entity to gather or provide multiple lines of text.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.TextSingle">
            <summary>
            The field enables an entity to gather or provide a single line or word of
            text, which may be shown in an interface.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFieldType.TextPrivate">
            <summary>
            The field enables an entity to gather or provide a single line or word of
            text, which shall be obscured in an interface (e.g., with multiple
            instances of the asterisk character).
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.DataForm">
            <summary>
            The abstract base class from which all implementations of concrete
            data-forms must derive.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataForm.fields">
            <summary>
            The fields contained in the data-form.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataForm.element">
            <summary>
            The underlying XML element representing the data-form.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataForm.Title">
            <summary>
            The title of the data-form.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataForm.Instructions">
            <summary>
            The natural-language instructions to be followed by the
            form-submitting entity.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataForm.Type">
            <summary>
            The type of the data-form.
            </summary>
            <exception cref="T:System.Xml.XmlException">The 'type' attribute of the underlying
            XML element is invalid.</exception>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.DataForm.Fields">
            <summary>
            A list of fields contained in the data-form.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataForm.ToString">
            <summary>
            Returns a textual XML representation of the data-form.
            </summary>
            <returns>A string containing the XML representation of the
            data-form.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataForm.ToXmlElement">
            <summary>
            Returns an XML element representing the data-form.
            </summary>
            <returns>An XML element representing the data-form.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataForm.#ctor(System.String,System.String,System.Boolean,Xmpp.Extensions.Dataforms.DataField[])">
            <summary>
            Initializes a new instance of the DataForm class.
            </summary>
            <param name="title">The title of the data-form.</param>
            <param name="instructions">The natural-language instructions to be
            followed by the form-submitting entity.</param>
            <param name="readOnly">Set to true to create a read-only form to
            which no fields may be added, otherwise false.</param>
            <param name="fields">One or several data-fields to add to the
            form.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataForm.#ctor(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Initializes a new instance of the DataForm class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <param name="readOnly">Set to true to create a read-only form to
            which no fields may be added, otherwise false.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-form element.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataForm.AssertType(Xmpp.Extensions.Dataforms.DataFormType)">
            <summary>
            Asserts the data-form is of the specified type.
            </summary>
            <param name="expected">The type to assert.</param>
            <exception cref="T:System.ArgumentException">The data-form is not of the
            expected type.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataForm.GetDataFormType">
            <summary>
            Returns the type of the data-form.
            </summary>
            <returns>The type of the data-form.</returns>
            <exception cref="T:System.Xml.XmlException">The 'type' attribute of the underlying
            XML element is invalid.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.DataFormFactory">
            <summary>
            A factory for creating data-form instances.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.DataFormFactory.Create(System.Xml.Linq.XElement)">
            <summary>
            Creates a data-form instance of the proper type from the specified
            XML element.
            </summary>
            <param name="element">The XML element to create the data-form instance
            from.</param>
            <returns>An initialized instance of a data-form class of the respectiv
            type which derives from the DataForm base class.</returns>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-form element.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.DataFormType">
            <summary>
            Defines possible values for the different types of data-forms.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFormType.Form">
            <summary>
            The form is a requesting form, i.e. the form-processing entity is
            asking the form-submitting entity to complete it.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFormType.Submit">
            <summary>
            The form-submitting entity is submitting data to the form-processing
            entity.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFormType.Cancel">
            <summary>
            The form-submitting entity wishes to signal cancellation of submission
            of data to the form-processing entity.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.DataFormType.Result">
            <summary>
            The form-processing entity is returning data (e.g., search results) to
            the form-submitting entity, or the data is a generic data set.
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.FieldList">
            <summary>
            Represents a list of data-fields contained in a data-form.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.FieldList.element">
            <summary>
            The underlying XML element of the data-form.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.FieldList.readOnly">
            <summary>
            Determines whether the collection of data-fields is read-only.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.FieldList.Count">
            <summary>
            Gets the number of elements contained in the list of data-fields.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.FieldList.IsReadOnly">
            <summary>
            Determines whether the FieldList is read-only.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.FieldList.Item(System.Int32)">
            <summary>
            Returns the data-field at the specified index.
            </summary>
            <param name="index">The zero-based index of the data-field in the list
            of data-fields to return.</param>
            <returns>The data-field instance at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is
            negative, or the specified index is greater or equal to the number of
            data-fields in the list of data-fields.</exception>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.FieldList.Item(System.String)">
            <summary>
            Returns the data-field with the specified name.
            </summary>
            <param name="name">The name of the data-field to return.</param>
            <returns>The data-field with the specified name or null if no such
            data-field exists in the list of data-fields-</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.Add(Xmpp.Extensions.Dataforms.DataField)">
            <summary>
            Adds the specified data-field to the end of the list of data-fields.
            </summary>
            <param name="item">The data-field to add to the end of the list of
            data-fields.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">A field with the same name already
            exists in the list of data-fields.</exception>
            <exception cref="T:System.NotSupportedException">The instance of the FieldList
            class is read-only.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.Remove(Xmpp.Extensions.Dataforms.DataField)">
            <summary>
            Removes the specified data-field from the list of data-fields.
            </summary>
            <param name="item">The data-field to remove from the list of
            data-fields.</param>
            <remarks>If the specified data-field is not contained in the list of
            data-fields, this method does nothing.</remarks>
            <exception cref="T:System.ArgumentNullException">The item parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.Remove(System.String)">
            <summary>
            Remove the data-field with the specifid name from the list of data-fields.
            </summary>
            <param name="name">The name of the data-field to remove.</param>
            <remarks>If a data-field element with the specified name is not contained
            in the list of data-fields, this method does nothing.</remarks>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.Clear">
            <summary>
            Removes all data-fields.
            </summary>
            <exception cref="T:System.NotSupportedException">The FieldList instance is
            read-only.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.Contains(System.String)">
            <summary>
            Determines whether a data-field with the specified name is contained
            in the list of data-fields.
            </summary>
            <param name="name">The name of the data-field to look for.</param>
            <returns>true if a data-field with the specified name exists within
            list of data-fields; Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the FieldList instance.
            </summary>
            <returns>An enumerator that iterates through the FieldList
            instance.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the FieldList instance.
            </summary>
            <returns>An enumerator that iterates through the FieldList
            instance.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.#ctor(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Initializes a new instance of the FieldList class from the specified
            XML element.
            </summary>
            <param name="element">The XML element to initialize this instance
            from.</param>
            <param name="readOnly">If true, the list of data-fields can not be
            modified.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified element is not a
            valid XML data-form.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.GetFieldElements">
            <summary>
            Returns a list of XML data-field elements contained in the underlying
            data-form.
            </summary>
            <returns>A list of XML data-field elements.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.GetFields">
            <summary>
            Returns a list of DataField instances contained in the FieldList.
            </summary>
            <returns>A list of DataField instances contained in the FieldList
            instance.</returns>
            <exception cref="T:System.Xml.XmlException">A 'field' XML element in the underlying
            data-form is invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.FieldFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates a strongly-typed data-field instance of the proper type from the
            specified data-field XML element.
            </summary>
            <param name="element">The data-field XML element to create a DataField
            instance from.</param>
            <returns>An instance of a class derived from the DataField class
            representing the specified data-field element.</returns>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.GetFieldElementByName(System.String)">
            <summary>
            Returns the data-field XML element with the specified name.
            </summary>
            <param name="name">The name of the data-field element to retrieve.</param>
            <returns>The data-field XML element with the specified name or null
            if no such element exists in the list of data-fields.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.AttributeValueToType(System.String)">
            <summary>
            Converts the specified string into a value of the DataFieldType
            enumeration.
            </summary>
            <param name="value">The string value to convert.</param>
            <returns>An object of the DataFieldType enumeration whose value is
            represented by value.</returns>
            <exception cref="T:System.ArgumentNullException">The value parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">value is either an empty string
            or only contains white space, or value is a name, but not one of
            the named constants of the DataFieldType enumeration.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FieldList.GetDataFieldType(System.Xml.Linq.XElement)">
            <summary>
            Returns the type of the data-field.
            </summary>
            <param name="element">The data-field element whose type to
            retrieve.</param>
            <returns>The type of the specified data-field.</returns>
            <exception cref="T:System.Xml.XmlException">The 'type' attribute of the underlying
            XML element is invalid.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.FixedField">
            <summary>
            Represents a field that is intended for data description rather
            than data gathering.
            </summary>
            <remarks>
            This is a label of static text and corresponds to the Winforms Label
            control.
            </remarks>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.FixedField.Value">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FixedField.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the FixedField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="value">The default value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FixedField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FixedField class for use in a
            requesting dataform.
            </summary>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.FixedField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the FixedField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'fixed'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.HiddenField">
            <summary>
            Represents a field that is intended to be invisible to the form-submitting
            entity, and is returned with the form.
            </summary>
            <remarks>
            Hidden fields should not be shown to the user but just be submitted with
            the form, much like a hidden field in an HTML form.
            </remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.HiddenField.values">
            <summary>
            The values of the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.HiddenField.Values">
            <summary>
            Gets an enumerable collection of values set on the field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.HiddenField.#ctor(System.String,System.Boolean,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the HiddenField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="values">The default values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.HiddenField.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the HiddenField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="values">The values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.HiddenField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the HiddenField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'hidden'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.JidField">
            <summary>
            Represents a field for gathering or providing a single Jabber ID.
            </summary>
            <remarks>
            This corresponds to a Winforms TextField control with the added requirement
            that the entered text be a valid JID.
            </remarks>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.JidField.Jid">
            <summary>
            The gathered or provided JID.
            </summary>
            <exception cref="T:System.Xml.XmlException">The value of the underlying XML element
            is not a valid JID.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidField.#ctor(System.String,System.Boolean,System.String,System.String,Xmpp.Jid)">
            <summary>
            Initializes a new instance of the JidField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="jid">The default value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidField.#ctor(System.String,Xmpp.Jid)">
            <summary>
            Initializes a new instance of the JidField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="jid">The value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the JidField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'jid-single'.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidField.GetJid">
            <summary>
            Retrieves the gathered or provided JID.
            </summary>
            <returns>The gathered or provided JID.</returns>
            <exception cref="T:System.Xml.XmlException">The value of the underlying XML element
            is not a valid JID.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.JidMultiField">
            <summary>
            Represents a field for gathering or providing multiple Jabber IDs.
            </summary>
            <remarks>
            This corresponds to a Winforms ListBox control in which multiple options
            can be selected with the added requirement that each option be a valid
            JID.
            </remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.JidMultiField.values">
            <summary>
            The values of the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.JidMultiField.Values">
            <summary>
            Gets an enumerable collection of values set on the field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidMultiField.#ctor(System.String,System.Boolean,System.String,System.String,Xmpp.Jid[])">
            <summary>
            Initializes a new instance of the JidMultiField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="values">The default values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidMultiField.#ctor(System.String,Xmpp.Jid[])">
            <summary>
            Initializes a new instance of the JidMultiField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="values">The values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.JidMultiField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the JidMultiField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'jid-multi'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.ListField">
            <summary>
            Represents a field for gathering or providing one option from among many.
            </summary>
            <remarks>
            This corresponds to a Winforms ComboBox control or a Listview control
            in which only a single option can be selected.
            </remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.ListField.options">
            <summary>
            The options of the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.ListField.Options">
            <summary>
            Gets an enumerable collection of options.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.ListField.Value">
            <summary>
            The selected value.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListField.#ctor(System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{Xmpp.Extensions.Dataforms.Option},System.String)">
            <summary>
            Initializes a new instance of the ListField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="options">An enumerable collection of options to add to
            the field.</param>
            <param name="value">The default value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ListField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the ListField class from the specified
            XML element.
            </summary>
            <param name="e">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The e parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'list-single'.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListField.OptionFromElement(System.Xml.Linq.XElement)">
            <summary>
            Creates an Option instance from the specified XML element.
            </summary>
            <param name="element">The XML element to create an option from.</param>
            <returns>An initialized instance of the Option class.</returns>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not
            a valid 'option' element.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.ListMultiField">
            <summary>
            Represents a field for gathering or providing one or more options
            from among many.
            </summary>
            <remarks>
            This corresponds to a Winforms ListBox control in which multiple options
            can be selected.
            </remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.ListMultiField.values">
            <summary>
            The values of the field.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.ListMultiField.options">
            <summary>
            The options of the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.ListMultiField.Values">
            <summary>
            Gets an enumerable collection of selected values.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.ListMultiField.Options">
            <summary>
            Gets an enumerable collection of options.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListMultiField.#ctor(System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{Xmpp.Extensions.Dataforms.Option},System.String[])">
            <summary>
            Initializes a new instance of the ListField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="options">An enumerable collection of options to add to
            the field.</param>
            <param name="values">The default values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListMultiField.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the ListMultiField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="values">The values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListMultiField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the ListField class from the specified
            XML element.
            </summary>
            <param name="e">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The e parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'list-multi'.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ListMultiField.OptionFromElement(System.Xml.Linq.XElement)">
            <summary>
            Creates an Option instance from the specified XML element.
            </summary>
            <param name="element">The XML element to create an option from.</param>
            <returns>An initialized instance of the Option class.</returns>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not
            a valid 'option' element.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.Option">
            <summary>
            Represents an option of a list data-field.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.Option.element">
            <summary>
            The underlying XML element.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.Option.Label">
            <summary>
            A human-readable name for the option.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.Option.Value">
            <summary>
            The value of the option field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.Option.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Option class.
            </summary>
            <param name="value">The value of the option field.</param>
            <param name="label">A human-readable name for the option.</param>
            <exception cref="T:System.ArgumentNullException">The value parameter
            is null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.Option.ToString">
            <summary>
            Returns a textual XML representation of the Option instance.
            </summary>
            <returns>A textual XML representation of the Option instance.</returns>
            <remarks>This actually only returns the inner XML of the option
            XML element, so that the Option class can be used with the generic
            XmlCollection class.</remarks>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.PasswordField">
            <summary>
            Represents a field for gathering or providing a single line or word of
            text, which shall be obscured in an interface (e.g., with multiple
            instances of the asterisk character).
            </summary>
            <remarks>
            This corresponds to a Winforms TextBox control with the added
            requirement that entered characters be obscured.
            </remarks>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.PasswordField.Value">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.PasswordField.#ctor(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PasswordFild class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="value">The default value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.PasswordField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PasswordField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.PasswordField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the PasswordField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'text-private'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.RequestForm">
            <summary>
            Represents a requesting data-form.
            </summary>
            <remarks>The form-processing entity uses this to ask the form-submitting
            entity to provide data.</remarks>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.RequestForm.#ctor(System.String,System.String,Xmpp.Extensions.Dataforms.DataField[])">
            <summary>
            Initializes a new instance of the RequestForm class.
            </summary>
            <param name="title">The title of the data-form.</param>
            <param name="instructions">The natural-language instructions to be
            followed by the form-submitting entity.</param>
            <param name="fields">One or several data-fields to add to the
            form.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.RequestForm.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the RequestForm class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-form element of type 'form'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.ResultForm">
            <summary>
            Represents a result form containing returned data or a generic data set.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.ResultForm.Header">
            <summary>
            Gets an enumerable collection of fields contained in the table header of
            the data set.
            </summary>
            <remarks>The table header describes the data to follow. Refer to XEP-0004
            "3.4 Multiple Items in Form Results" for more details.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.ResultForm.Cells">
            <summary>
            Gets an enumerable list of table cells of the data set.
            </summary>
            <remarks>The table cells contain the data described in the table header.
            Refer to XEP-0004 "3.4 Multiple Items in Form Results" for more
            details.</remarks>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ResultForm.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Xmpp.Extensions.Dataforms.DataField},System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{Xmpp.Extensions.Dataforms.DataField}})">
            <summary>
            Initializes a new instance of the ResultForm class.
            </summary>
            <param name="title">The title of the data-form.</param>
            <param name="instructions">The natural-language instructions to be
            followed by the form-submitting entity.</param>
            <param name="header">An enumerable collection of fields to add to the
            table header of the result form.</param>
            <param name="cells">enumerable list of table cells to add to the
            data set.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.ResultForm.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the ResultForm class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-form element of type 'result'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.SubmitForm">
            <summary>
            Represents a data-form for data submission.
            </summary>
            <remarks>The form-submitting entity uses this to submit data to the
            form-processing entity.</remarks>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.SubmitForm.#ctor(Xmpp.Extensions.Dataforms.DataField[])">
            <summary>
            Initializes a new instance of the SubmitForm class.
            </summary>
            <param name="fields">One or several data-fields to add to the
            form.</param>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.SubmitForm.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the SubmitForm class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-form element of type 'submit'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.TextField">
            <summary>
            Represents a field for gathering or providing a single line or word of
            text, which may be shown in an interface.
            </summary>
            <remarks>
            This corresponds to a Winforms TextBox control.
            </remarks>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.TextField.Value">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.TextField.#ctor(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the TextField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="value">The default value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.TextField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TextField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.TextField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the TextField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'text-single'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.TextMultiField">
            <summary>
            Represents a field for gathering or providing multiple lines of text.
            </summary>
            <remarks>
            This corresponds to a Winforms TextBox control with the Multiline
            property set to true.
            </remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.TextMultiField.values">
            <summary>
            The values of the field.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.TextMultiField.Values">
            <summary>
            Gets an enumerable collection of values set on the field.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.TextMultiField.#ctor(System.String,System.Boolean,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the TextMultiField class for use in a
            requesting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="required">Determines whether the field is required or
            optional.</param>
            <param name="label">A human-readable name for the field.</param>
            <param name="description">A natural-language description of the field,
            intended for presentation in a user-agent.</param>
            <param name="values">The default values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.TextMultiField.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the TextMultiField class for use in a
            submitting dataform.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="values">The values of the field.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.TextMultiField.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the TextMultiField class from the specified
            XML element.
            </summary>
            <param name="element">The XML 'field' element to initialize the instance
            with.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified XML element is not a
            valid data-field element, or the element is not a data-field of type
            'text-multi'.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Dataforms.XmlCollection`1">
            <summary>
            Represents an XML-backed generic collection.
            </summary>
            <typeparam name="T">The type of the elements to store in the
            collection.</typeparam>
            <remarks>As an added type constraint, the specified type must
            override the ToString method to return an XML representation of
            the calling instance.</remarks>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.XmlCollection`1.element">
            <summary>
            The underlying XML element used for implementing the collection.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.XmlCollection`1.tag">
            <summary>
            The tag name of a single collection item.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Dataforms.XmlCollection`1.conversion">
            <summary>
            A callback for converting an XML element into the specified type.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Dataforms.XmlCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified item could not be
            serialized into XML.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains the specified item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>true if the collection contains the specified item; Otherwise
            false.</returns>
            <exception cref="T:System.ArgumentNullException">The item parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection to an
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination
            of the elements copied from System.Collections.Generic.ICollection. The
            System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying
            begins.</param>
            <exception cref="T:System.NotImplementedException">The method is not
            implemented.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.Remove(`0)">
            <summary>
            Remove the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>true if the item was removed from the collection; Otherwise
            false. This method also returns false if the specified item is not
            contained in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The item parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the XmlCollection instance.
            </summary>
            <returns>An enumerator that iterates through the XmlCollection
            instance.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the XmlCollection instance.
            </summary>
            <returns>An enumerator that iterates through the XmlCollection
            instance.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.ToString">
            <summary>
            Returns a textual XML representation of the collection.
            </summary>
            <returns>A textual XML representation of the collection.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.#ctor(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,`0})">
            <summary>
            Initializes a new instance of the XmlCollection class from the specified
            XML element.
            </summary>
            <param name="element">The XML element to initialize this instance
            from.</param>
            <param name="tag">The XML tag name of an entry.</param>
            <param name="conversion">A callback method which is invoked to convert
            an XML element into an instance of the specified type.</param>
            <exception cref="T:System.ArgumentNullException">The element parameter or the tag
            parameter or the conversion parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.GetElements">
            <summary>
            Returns an enumerable collection of XML elements contained in the collection.
            </summary>
            <returns>An enumerable collection of XML elements.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Dataforms.XmlCollection`1.GetItems">
            <summary>
            Returns an enumerable collection of items contained in the collection.
            </summary>
            <returns>An enumerable collection of items.</returns>
            <exception cref="T:System.Xml.XmlException">An XML element in the collection could
            not be converted into an instance of the specified type.</exception>
        </member>
        <member name="T:Xmpp.Extensions.FeatureNegotiation">
            <summary>
            Implements the 'Feature Negotiation' extension as defined in XEP-0020.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.FeatureNegotiation.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.FeatureNegotiation.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.FeatureNegotiation.Create(Xmpp.Extensions.Dataforms.DataForm)">
            <summary>
            Creates an offer or result from the specified data-form.
            </summary>
            <param name="form">The data-form to include in the feature negotiation
            offer or result.</param>
            <returns>An XML element representing the feature negotiation
            offer or result.</returns>
            <exception cref="T:System.ArgumentNullException">The form parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.FeatureNegotiation.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parses the the specified negotiation offer or result.
            </summary>
            <param name="feature">The 'feature' element containing the data-form</param>
            <returns>An initialized data-form instance.</returns>
            <exception cref="T:System.ArgumentNullException">The feature parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The feature parameter is not a
            valid 'feature' XML element, or the feature element contains invalid
            data.</exception>
        </member>
        <member name="M:Xmpp.Extensions.FeatureNegotiation.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the FeatureNegotiation class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.Identity">
            <summary>
            Represents an identity of an XMPP entity as defined in XEP-0030.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Identity.Category">
            <summary>
            The category the XMPP entity belongs to (i.e. 'client', 'server').
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Identity.Type">
            <summary>
            The type of the XMPP entity (i.e. 'pc', 'mobile', etc.).
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Identity.Name">
            <summary>
            The name of the XMPP entity.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Identity.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Identity class.
            </summary>
            <param name="category">The category to which the XMPP entity belongs.</param>
            <param name="type">The type of the XMPP entity.</param>
            <param name="name">The name of the XMPP entity.</param>
            <exception cref="T:System.ArgumentNullException">The category parameter or the
            type parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.Item">
            <summary>
            Represents an item of an XMPP entity as defined in XEP-0030.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Item.Jid">
            <summary>
            The JID of the item.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Item.Node">
            <summary>
            The node identifier of the item. This may be null.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Item.Name">
            <summary>
            The name of the item. This may be null.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Item.#ctor(Xmpp.Jid,System.String,System.String)">
            <summary>
            Initializes a new instance of the Item class.
            </summary>
            <param name="jid">The JID of the item.</param>
            <param name="node">The node identifier of the item.</param>
            <param name="name">The name of the item.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.ServiceDiscovery">
            <summary>
            Implements the 'Service Discovery' extension as defined in XEP-0030.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.ServiceDiscovery.cache">
            <summary>
            A dictionary for caching supported services of XMPP entities.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ServiceDiscovery.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.ServiceDiscovery.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ServiceDiscovery.Features">
            <summary>
            Returns an enumerable collection of xmlns extension namespaces supported by
            this XMPP implementation.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ServiceDiscovery.Identity">
            <summary>
            The identity of this XMPP entity.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.Supports``1(Xmpp.Jid)">
            <summary>
            Determines whether the XMPP entity with the specified JID supports the
            specified XMPP extension.
            </summary>
            <typeparam name="T">The XMPP extension to probe for.</typeparam>
            <param name="jid">The JID of the XMPP entity.</param>
            <returns>true if the XMPP entity with the specified JID supports the
            specified XMPP extension; Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with the specified
            JID does not support querying of feature information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.Supports(Xmpp.Jid,Xmpp.Extensions.Extension[])">
            <summary>
            Determines whether the XMPP entity with the specified JID supports the
            specified XMPP extension(s).
            </summary>
            <param name="jid">The JID of the XMPP entity.</param>
            <param name="extensions">The XMPP extensions to probe for.</param>
            <returns>true if the XMPP entity with the specified JID supports the
            specified XMPP extension(s); Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The jid paramter or the extensions
            parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with the
            specified JID does not support querying of feature information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.GetExtensions(Xmpp.Jid)">
            <summary>
            Retrieves an enumerable collection of XMPP extensions that the XMPP
            entity with the specified JID supports.
            </summary>
            <param name="jid">The JID of the XMPP entity to retrieve supported
            extensions for.</param>
            <returns>An enumerable collection of XMPP extensions supported by the
            XMPP entity with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with the
            specified JID does not support querying of feature information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.GetIdentities(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for identity information.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An enumerable collection of identities of the XMPP entity
            with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The query could not be
            performed or the response was invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.GetItems(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for item information.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An enumerable collection of items of the XMPP entity with
            the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The query could not be
            performed or the response was invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the XmppIm class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.CompileFeatureSet">
            <summary>
            Compiles the set of supported XMPP features.
            </summary>
            <returns>The set of supported XMPP extensions.</returns>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.QueryFeatures(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for information.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An enumerable collection of values from the Extension enumeration
            denoting the XMPP extensions the entity supports.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The query could not be
            performed or the response was invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.QueryIdentities(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for identity information.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An enumerable collection of identities of the XMPP entity
            with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The query could not be
            performed or the response was invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServiceDiscovery.QueryItems(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for item information.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An enumerable collection of itms of the XMPP entity
            with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The query could not be
            performed or the response was invalid.</exception>
        </member>
        <member name="T:Xmpp.Extensions.InBandRegistration">
            <summary>
            Implements the 'In-Band Registration' extension as defined in XEP-0077.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.InBandRegistration.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.InBandRegistration.bob">
            <summary>
            A reference to the 'Bits of Binary' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.InBandRegistration.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.InBandRegistration.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.InBandRegistration.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.InBandRegistration.Register(Xmpp.Extensions.RegistrationCallback)">
            <summary>
            Registers a new XMPP account on the connected XMPP server.
            </summary>
            <param name="callback">A callback method invoked during the registration
            process to gather user information.</param>
            <exception cref="T:System.ArgumentNullException">The callback parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'In-Band Registration' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.InBandRegistration.ChangePassword(System.String)">
            <summary>
            Changes the current password to the specified new password.
            </summary>
            <param name="newPassword">The new password to use.</param>
            <exception cref="T:System.ArgumentNullException">The newPassword parameter
            is null.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the XMPP entity
            with the specified JID returned an XMPP error code. Use the Error
            property of the XmppErrorException to obtain the specific error
            condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or
            another unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.InBandRegistration.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the InBandRegistration class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.InBandRegistration.CreateDataForm(System.Xml.Linq.XElement)">
            <summary>
            Creates a DataForm from the traditional registration fields contained
            in the specified XML element.
            </summary>
            <param name="query">A 'query' XML element containing registration
            fields.</param>
            <returns>An initialized instance of the RequestForm class representing
            the registration fields contained in the specified query XML
            element.</returns>
        </member>
        <member name="T:Xmpp.Extensions.RegistrationCallback">
            <summary>
            A callback method which is invoked during the registration process to
            let the user fill out the required fields needed to complete the
            registration.
            </summary>
            <param name="form">A request form containing the fields to be filled
            out.</param>
            <returns>An initialized instance of the SubmitForm class containing the
            filled-out fields.</returns>
        </member>
        <member name="T:Xmpp.Extensions.AvatarChangedEventArgs">
            <summary>
            Provides data for the AvatarChanged event.
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.ChatState">
            <summary>
            Defines possible values for the chat state of an XMPP user.
            </summary>
            <remarks>
            Refer to XEP-0085 for a detailed description of the different states
            defined here.
            </remarks>
        </member>
        <member name="F:Xmpp.Extensions.ChatState.Active">
            <summary>
            The user is actively participating in the chat session.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.ChatState.Inactive">
            <summary>
            The user has not been actively participating in the chat session.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.ChatState.Gone">
            <summary>
            The user has effectively ended their participation in the chat session.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.ChatState.Composing">
            <summary>
            The user is composing a Message.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.ChatState.Paused">
            <summary>
            The user had been composing but now has stopped.
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.ChatStateChangedEventArgs">
            <summary>
            Provides data for the ChatStateChanged event.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ChatStateChangedEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the chat state information.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ChatStateChangedEventArgs.ChatState">
            <summary>
            The chat-state of the XMPP entity.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.ChatStateChangedEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.ChatState)">
            <summary>
            Initializes a new instance of the ChatStateChangedEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            chat-state.</param>
            <param name="state">The chat-state of the XMPP entity with the specified
            JID.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.ChatStateNotifications">
            <summary>
            Implements the 'Chat States Notifications' extension as defined in XEP-0085.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ChatStateNotifications.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.ChatStateNotifications.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="E:Xmpp.Extensions.ChatStateNotifications.ChatStateChanged">
            <summary>
            The event that is raised when the chat-state of an XMPP entity has
            changed.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.ChatStateNotifications.Input(Xmpp.Im.Message)">
            <summary>
            Invoked when a Message stanza has been received.
            </summary>
            <param name="stanza">The stanza which has been received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.ChatStateNotifications.SetChatState(Xmpp.Jid,Xmpp.Extensions.ChatState)">
            <summary>
            Sets the chat-state for the conversation with the XMPP user with the
            specified JID.
            </summary>
            <param name="jid">The JID of the XMPP user to set the chat-state
            for.</param>
            <param name="state">The new chat-state.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ChatStateNotifications.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the ChatStateNotifications class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.SoftwareVersion">
            <summary>
            Implements the 'Software Version' extension as defined in XEP-0092.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SoftwareVersion.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.SoftwareVersion.Version">
            <summary>
            The current software version.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.SoftwareVersion.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.SoftwareVersion.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.SoftwareVersion.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.SoftwareVersion.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.SoftwareVersion.GetVersion(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for its software
            version.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An instance of the VersionInformation class containing the
            entity's software version.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Software Version' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.SoftwareVersion.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the SoftwareVersion class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.VersionInformation">
            <summary>
            Provides information about the software application associated with an
            XMPP entity.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.VersionInformation.Name">
            <summary>
            The natural-language name of the software.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.VersionInformation.Version">
            <summary>
            The specific version of the software.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.VersionInformation.Os">
            <summary>
            The operating system of the entity.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.VersionInformation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the VersionInformation class.
            </summary>
            <param name="name">The natural-language name of the software.</param>
            <param name="version">The specific version of the software.</param>
            <param name="os">The operating system of the entity.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter or the version
            parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.InitiationResult">
            <summary>
            Represents the result of a stream initiation.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.InitiationResult.SessionId">
            <summary>
            The session identifier which must be used when talking to the XMPP entity
            with which the session has been negotiated.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.InitiationResult.Method">
            <summary>
            The negotiated stream-method.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.InitiationResult.Data">
            <summary>
            The 'si' data element with any additional data which may be required by
            an SI profile.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.InitiationResult.#ctor(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the InitiationResult class.
            </summary>
            <param name="sessionId">The session identifier negotiated during
            stream initiation.</param>
            <param name="method">The stream method negotiated during stream
            negotiation.</param>
            <param name="data">The 'si' element as received in the SI
            response.</param>
            <exception cref="T:System.ArgumentNullException">The sessionId parameter or
            the method parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.StreamInitiation">
            <summary>
            Implements the 'Stream Initiation' extension as defined in XEP-0095.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.StreamInitiation.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.StreamInitiation.profiles">
            <summary>
            A dictionary of registered profiles.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.StreamInitiation.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.StreamInitiation.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.InitiateStream(Xmpp.Jid,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Xml.Linq.XElement)">
            <summary>
            Attempts to initiate a data stream with the XMPP entity with the specified
            JID.
            </summary>
            <param name="to">The JID of the XMPP entity to initiate a data-stream
            with.</param>
            <param name="mimeType">The MIME type of the data to be transferred across
            the stream.</param>
            <param name="profile">The 'Stream Initiation' profile to use.</param>
            <param name="streamOptions">An enumerable collection of supported
            stream methods which are advertised to the receiving XMPP
            entity.</param>
            <param name="data">An XML element containing any additional data the
            specified 'Stream Initiation' profile may require.</param>
            <returns>An initialized instance of the InitiationResult class containing
            the negotiated stream-method and session identifier.</returns>
            <exception cref="T:System.ArgumentNullException">The to parameter or the mimeType
            parameter or the profile parameter or the streamOptions parameter
            is null.</exception>
            <exception cref="T:System.ArgumentException">The streamOptions enumerable contains
            no elements, or the stream-initiation response received contained no
            selection for the stream-method.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Stream Initiation' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server or the receiving XMPP
            entity returned an XMPP error code. Use the Error property of the
            XmppErrorException to obtain the specific error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.InitiateStreamAsync(Xmpp.Jid,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Xml.Linq.XElement,System.Action{Xmpp.Extensions.InitiationResult,Xmpp.Core.Iq})">
            <summary>
            Attempts to initiate a data stream with the XMPP entity with the specified
            JID.
            </summary>
            <param name="to">The JID of the XMPP entity to initiate a data-stream
            with.</param>
            <param name="mimeType">The MIME type of the data to be transferred across
            the stream.</param>
            <param name="profile">The 'Stream Initiation' profile to use.</param>
            <param name="streamOptions">An enumerable collection of supported
            stream methods which are advertised to the receiving XMPP
            entity.</param>
            <param name="data">An XML element containing any additional data the
            specified 'Stream Initiation' profile may require.</param>
            <param name="cb">A callback method to invoke once the result of the
            stream-initation operation has been received.</param>
            <returns>An initialized instance of the InitiationResult class containing
            the negotiated stream-method and session identifier Sid.</returns>
            <exception cref="T:System.ArgumentNullException">The to parameter or the mimeType
            parameter or the profile parameter or the streamOptions parameter
            is null.</exception>
            <exception cref="T:System.ArgumentException">The streamOptions enumerable contains
            no elements, or the stream-initiation response received contained no
            selection for the stream-method.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Stream Initiation' XMPP
            extension.</exception>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.RegisterProfile(System.String,System.Func{Xmpp.Jid,System.Xml.Linq.XElement,System.Xml.Linq.XElement})">
            <summary>
            Registers the profile with the specified name.
            </summary>
            <param name="name">The name of the SI profile to register.</param>
            <param name="cb">A callback method invoked whenever an initiation
            request for the specified profile is received.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter or the
            cb parameter is null.</exception>
            <exception cref="T:System.ArgumentException">A profile with the specified name
            has already been registered.</exception>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the StreamInitiation class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.CreateFeatureElement(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the 'feature' XML element which is part of a 'Stream Initiation'
            request.
            </summary>
            <param name="streamOptions">An enumerable collection of accepted stream
            methods.</param>
            <returns>An XML 'feature' element.</returns>
            <exception cref="T:System.ArgumentNullException">The streamOptions parameter
            is null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.CreateSiElement(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Xml.Linq.XElement)">
            <summary>
            Creates the 'si' element which contains the stream-initiation options.
            </summary>
            <param name="sid">The session id for the stream-initiation.</param>
            <param name="mimeType">The MIME type of the data to be transferred across
            the stream.</param>
            <param name="profile">The 'Stream Initiation' profile to use.</param>
            <param name="streamOptions">An enumerable collection of supported
            stream methods which are advertised to the receiving XMPP
            entity.</param>
            <param name="data">An XML element containing any additional data the
            specified 'Stream Initiation' profile may require.</param>
            <returns>The 'si' element to include in the IQ request.</returns>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.ParseStreamMethod(System.Xml.Linq.XElement)">
            <summary>
            Parses the selected stream-method from the specified 'feature' XML
            element.
            </summary>
            <param name="feature">The 'feature' XML element.</param>
            <returns>The stream method contained in the 'feature' XML
            element.</returns>
            <exception cref="T:System.ArgumentNullException">The feature parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The feature element contains
            invalid data.</exception>
        </member>
        <member name="M:Xmpp.Extensions.StreamInitiation.GenerateSessionId">
            <summary>
            Generates a random session id which is an opaque identifier which
            must be used throughout a session when talking to the Receiver.
            </summary>
            <returns>A random session id string.</returns>
        </member>
        <member name="T:Xmpp.Extensions.Mood">
            <summary>
            Defines possible values for the mood of an XMPP user.
            </summary>
            <remarks>Refer to XEP-0107 for a detailed listing and description of the
            various mood values.</remarks>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Afraid">
            <summary>
            Impressed with fear or apprehension; in fear; apprehensive.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Amazed">
            <summary>
            Astonished; confounded with fear, surprise or wonder.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Amarous">
            <summary>
            Inclined to love; having a propensity to love, or to sexual enjoyment;
            loving, fond, affectionate, passionate, lustful, sexual, etc.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Angry">
            <summary>
            Displaying or feeling anger, i.e., a strong feeling of displeasure, hostility
            or antagonism towards someone or something, usually combined with an urge
            to harm.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Annoyed">
            <summary>
            To be disturbed or irritated, especially by continued or repeated acts.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Anxious">
            <summary>
            Full of anxiety or disquietude; greatly concerned or solicitous, esp.
            respecting something future or unknown; being in painful suspense.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Aroused">
            <summary>
            To be stimulated in one's feelings, especially to be sexually stimulated.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Ashamed">
            <summary>
            Feeling shame or guilt.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Bored">
            <summary>
            Suffering from boredom; uninterested, without attention.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Brave">
            <summary>
            Strong in the face of fear; courageous.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Calm">
            <summary>
            Peaceful, quiet.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Cautious">
            <summary>
            Taking care or caution; tentative.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Cold">
            <summary>
            Feeling the sensation of coldness, especially to the point of discomfort.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Confident">
            <summary>
            Feeling very sure of or positive about something, especially about one's
            own capabilities.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Confused">
            <summary>
            Chaotic, jumbled or muddled.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Contemplative">
            <summary>
            Feeling introspective or thoughtful.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Contented">
            <summary>
            Pleased at the satisfaction of a want or desire; satisfied.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Cranky">
            <summary>
            Grouchy, irritable; easily upset.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Crazy">
            <summary>
            Feeling out of control; feeling overly excited or enthusiastic.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Creative">
            <summary>
            Feeling original, expressive, or imaginative.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Curious">
            <summary>
            Inquisitive; tending to ask questions, investigate, or explore.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Dejected">
            <summary>
            Feeling sad and dispirited.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Depressed">
            <summary>
            Severely despondent and unhappy.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Disappointed">
            <summary>
            Defeated of expectation or hope; let down.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Disgusted">
            <summary>
            Filled with disgust; irritated and out of patience.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Dismayed">
            <summary>
            Feeling a sudden or complete loss of courage in the face of trouble or danger.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Distracted">
            <summary>
            Having one's attention diverted; preoccupied.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Embarrassed">
            <summary>
            Having a feeling of shameful discomfort.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Envious">
            <summary>
            Feeling pain by the excellence or good fortune of another.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Excited">
            <summary>
            Having great enthusiasm.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Flirtatious">
            <summary>
            In the mood for flirting.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Frustrated">
            <summary>
            Suffering from frustration; dissatisfied, agitated, or discontented because
            one is unable to perform an action or fulfill a desire.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Grateful">
            <summary>
            Feeling appreciation or thanks.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Grieving">
            <summary>
            Feeling very sad about something, especially something lost; mournful;
            sorrowful.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Grumpy">
            <summary>
            Unhappy and irritable.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Guilty">
            <summary>
            Feeling responsible for wrongdoing; feeling blameworthy.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Happy">
            <summary>
            Experiencing the effect of favourable fortune; having the feeling arising
            from the consciousness of well-being or of enjoyment; enjoying good of
            any kind, as peace, tranquillity, comfort; contented; joyous.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Hopeful">
            <summary>
            Having a positive feeling, belief, or expectation that something wished
            for can or will happen.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Hot">
            <summary>
            Feeling the sensation of heat, especially to the point of discomfort.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Humbled">
            <summary>
            Having or showing a modest or low estimate of one's own importance;
            feeling lowered in dignity or importance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Humiliated">
            <summary>
            Feeling deprived of dignity or self-respect.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Hungry">
            <summary>
            Having a physical need for food.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Hurt">
            <summary>
            Wounded, injured, or pained, whether physically or emotionally.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Impressed">
            <summary>
            Favourably affected by something or someone.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.InAwe">
            <summary>
            Feeling amazement at something or someone; or feeling a combination
            of fear and reverence.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.InLove">
            <summary>
            Feeling strong affection, care, liking, or attraction.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Indignant">
            <summary>
            Showing anger or indignation, especially at something unjust or wrong.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Interested">
            <summary>
            Showing great attention to something or someone; having or showing
            interest.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Intoxicated">
            <summary>
            Under the influence of alcohol; drunk.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Invincible">
            <summary>
            Feeling as if one cannot be defeated, overcome or denied.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Jealous">
            <summary>
            Fearful of being replaced in position or affection.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Lonely">
            <summary>
            Feeling isolated, empty, or abandoned.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Lost">
            <summary>
            Unable to find one's way, either physically or emotionally.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Lucky">
            <summary>
            Feeling as if one will be favored by luck.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Mean">
            <summary>
            Causing or intending to cause intentional harm; bearing ill will
            towards another; cruel; malicious.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Moody">
            <summary>
            Given to sudden or frequent changes of mind or feeling; temperamental.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Nervous">
            <summary>
            Easily agitated or alarmed; apprehensive or anxious.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Neutral">
            <summary>
            Not having a strong mood or emotional state.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Offended">
            <summary>
            Feeling emotionally hurt, displeased, or insulted.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Outraged">
            <summary>
            Feeling resentful anger caused by an extremely violent or vicious attack,
            or by an offensive, immoral, or indecent act.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Playful">
            <summary>
            Interested in play; fun, recreational, unserious, lighthearted; joking,
            silly.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Proud">
            <summary>
            Feeling a sense of one's own worth or accomplishment.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Relaxed">
            <summary>
            Having an easy-going mood; not stressed; calm.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Relieved">
            <summary>
            Feeling uplifted because of the removal of stress or discomfort.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Remorseful">
            <summary>
            Feeling regret or sadness for doing something wrong.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Restless">
            <summary>
            Without rest; unable to be still or quiet; uneasy; continually moving.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Sad">
            <summary>
            Feeling sorrow; sorrowful, mournful.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Sarcastic">
            <summary>
            Mocking and ironical.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Satisfied">
            <summary>
            Pleased at the fulfillment of a need or desire.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Serious">
            <summary>
            Without humor or expression of happiness; grave in manner or disposition;
            earnest; thoughtful; solemn.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Shocked">
            <summary>
            Surprised, startled, confused, or taken aback.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Shy">
            <summary>
            Feeling easily frightened or scared; timid; reserved or coy.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Sick">
            <summary>
            Feeling in poor health; ill.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Sleepy">
            <summary>
            Feeling the need for sleep.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Spontaneous">
            <summary>
            Acting without planning; natural; impulsive.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Stressed">
            <summary>
            Suffering emotional pressure.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Strong">
            <summary>
            Capable of producing great physical force; or, emotionally forceful,
            able, determined, unyielding.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Surprised">
            <summary>
            Experiencing a feeling caused by something unexpected.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Thankful">
            <summary>
            Showing appreciation or gratitude.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Thirsty">
            <summary>
            Feeling the need to drink.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Tired">
            <summary>
            In need of rest or sleep.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Undefined">
            <summary>
            [Feeling any emotion not defined here.]
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Weak">
            <summary>
            Lacking in force or ability, either physical or emotional.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Mood.Worried">
            <summary>
            Thinking about unpleasant things that have happened or that might
            happen; feeling afraid and unhappy.
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.MoodChangedEventArgs">
            <summary>
            Provides data for the MoodChanged event.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.MoodChangedEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the mood information.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.MoodChangedEventArgs.Mood">
            <summary>
            The mood of the XMPP entity.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.MoodChangedEventArgs.Description">
            <summary>
            a natural-language description of, or reason for, the mood. This may be
            null.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.MoodChangedEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.Mood,System.String)">
            <summary>
            Initializes a new instance of the MoodChangedEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            mood information.</param>
            <param name="mood">One of the values from the Mood enumeration.</param>
            <param name="description">A natural-language description of, or
            reason for, the mood.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.UserMood">
            <summary>
            Implements the 'User Mood' extension as defined in XEP-0107.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.UserMood.pep">
            <summary>
            A reference to the 'Personal Eventing Protocol' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.UserMood.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.UserMood.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.UserMood.Supported">
            <summary>
            Determines whether our server supports personal eventing and thusly
            the user mood extension.
            </summary>
        </member>
        <member name="E:Xmpp.Extensions.UserMood.MoodChanged">
            <summary>
            The event that is raised when another XMPP entity has published mood
            information.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.UserMood.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.UserMood.SetMood(Xmpp.Extensions.Mood,System.String)">
            <summary>
            Sets the user's mood to the specified mood value.
            </summary>
            <param name="mood">A value from the Mood enumeration to set the user's
            mood to.</param>
            <param name="description">A natural-language description of, or reason
            for, the mood.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserMood.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the UserMood class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserMood.onMood(Xmpp.Jid,System.Xml.Linq.XElement)">
            <summary>
            Invoked when a contact has published his or her mood.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            mood information.</param>
            <param name="item">The 'item' Xml element of the pubsub publish
            event.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserMood.MoodToTagName(Xmpp.Extensions.Mood)">
            <summary>
            Returns the XMPP element name of the specified mood value.
            </summary>
            <param name="mood">A value from the Mood enumeration
            to convert into an element name.</param>
            <returns>The XML element name of the specified mood value.</returns>
        </member>
        <member name="T:Xmpp.Extensions.ActivityChangedEventArgs">
            <summary>
            Provides data for the ActivityChanged event.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ActivityChangedEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the activity information.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ActivityChangedEventArgs.Activity">
            <summary>
            The general activity of the XMPP entity.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ActivityChangedEventArgs.Specific">
            <summary>
            The specific activity of the XMPP entity.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ActivityChangedEventArgs.Description">
            <summary>
            a natural-language description of, or reason for, the activity. This
            may be null.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.ActivityChangedEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.GeneralActivity,Xmpp.Extensions.SpecificActivity,System.String)">
            <summary>
            Initializes a new instance of the ActivityChangedEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            activity information.</param>
            <param name="activity">One of the values from the GeneralActivity
            enumeration.</param>
            <param name="specific">A value from the SpecificActivity enumeration
            best describing the user's activity in more detail.</param>
            <param name="description">A natural-language description of, or
            reason for, the activity.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.GeneralActivity">
            <summary>
            Defines possible values for the general activity of an XMPP user.
            </summary>
            <remarks>Refer to XEP-0108 for a detailed taxonomy and description of the
            various activity values.</remarks>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.DoingChores">
            <summary>
            Doing chores.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Drinking">
            <summary>
            Drinking.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Eating">
            <summary>
            Eating.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Exercising">
            <summary>
            Exercising (Cycling, Jogging, Swimming, etc.).
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Grooming">
            <summary>
            Grooming.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.HavingAppointment">
            <summary>
            Having an appointment.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Inactive">
            <summary>
            Currently inactive.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Relaxing">
            <summary>
            Relaxing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Talking">
            <summary>
            Talking to somebody.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Traveling">
            <summary>
            Traveling.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Working">
            <summary>
            Working.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.GeneralActivity.Undefined">
            <summary>
            Undefined activity.
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.SpecificActivity">
            <summary>
            Defines possible values for more specific activities of an XMPP user.
            </summary>
            <remarks>Refer to XEP-0108 for a detailed taxonomy and description of the
            various activity values.</remarks>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.BuyingGroceries">
            <summary>
            User is buying groceries.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Cleaning">
            <summary>
            User is cleaning.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Cooking">
            <summary>
            User is cooking.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.DoingMaintenance">
            <summary>
            User is doing maintenance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.DoingTheDishes">
            <summary>
            User is doing the dishes.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.DoingTheLaundry">
            <summary>
            User is doing the laundry.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Gardening">
            <summary>
            User is gardening.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.RunningAnErrand">
            <summary>
            User is running an errand.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.WalkingTheDog">
            <summary>
            User is walking the dog.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingABeer">
            <summary>
            User is having a beer.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingCoffee">
            <summary>
            User is having coffee.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingTea">
            <summary>
            User is having tea.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingASnack">
            <summary>
            User is having a snack.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingBreakfast">
            <summary>
            User is having breakfast.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingDinner">
            <summary>
            User is having dinner.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HavingLunch">
            <summary>
            User is having lunch.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Cycling">
            <summary>
            User is cycling.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Dancing">
            <summary>
            User is dancing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Hiking">
            <summary>
            User is hiking.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Jogging">
            <summary>
            User is jogging.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.PlayingSports">
            <summary>
            User is playing sports.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Running">
            <summary>
            User is running.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Skiing">
            <summary>
            User is skiing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Swimming">
            <summary>
            User is swimming.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.WorkingOut">
            <summary>
            User is working out.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.AtTheSpa">
            <summary>
            User is at the spa.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.BrushingTeeth">
            <summary>
            User is brushing teeth.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.GettingAHaircut">
            <summary>
            User is getting a haircut.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Shaving">
            <summary>
            User is shaving.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.TakingABath">
            <summary>
            User is taking a bath.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.TakingAShower">
            <summary>
            User is taking a shower.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.DayOff">
            <summary>
            User is having a day off.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.HangingOut">
            <summary>
            User is hanging out.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Hiding">
            <summary>
            User is hiding.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnVacation">
            <summary>
            User is on vacation.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Praying">
            <summary>
            User is praying.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.ScheduledHoliday">
            <summary>
            User is on a scheduled holiday.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Sleeping">
            <summary>
            User is sleeping.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Thinking">
            <summary>
            User is thinking.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Fishing">
            <summary>
            User is fishing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Gaming">
            <summary>
            User is gaming.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.GoingOut">
            <summary>
            User is going out.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Partying">
            <summary>
            User is partying.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Reading">
            <summary>
            User is reading.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Rehearsing">
            <summary>
            User is rehearsing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Shopping">
            <summary>
            User is shopping.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Smoking">
            <summary>
            User is smoking.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Socializing">
            <summary>
            User is socializing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Sunbathing">
            <summary>
            User is sunbathing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.WatchingTv">
            <summary>
            User is watching TV.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.WatchingAMovie">
            <summary>
            User is watching a movie.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.InRealLife">
            <summary>
            User is talking to somebody in real life.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnThePhone">
            <summary>
            User is talking to somebody on the phone.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnVideoPhone">
            <summary>
            User is talking to somebody on video phone.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Commuting">
            <summary>
            User is commuting.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Driving">
            <summary>
            User is driving.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.InACar">
            <summary>
            User is traveling in a car.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnABus">
            <summary>
            User is traveling in a bus.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnAPlane">
            <summary>
            User is traveling on an airplane.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnATrain">
            <summary>
            User is traveling on a train.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.OnATrip">
            <summary>
            User is on a trip.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Walking">
            <summary>
            User is walking.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Coding">
            <summary>
            User is coding.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.InAMeeting">
            <summary>
            User is in a meeting.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Studying">
            <summary>
            User is studying.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Writing">
            <summary>
            User is writing.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.SpecificActivity.Other">
            <summary>
            User is performing an activity not defined herein.
            </summary>
        </member>
        <member name="T:Xmpp.Extensions.UserActivity">
            <summary>
            Implements the 'User Activity' extension as defined in XEP-0108.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.UserActivity.pep">
            <summary>
            A reference to the 'Personal Eventing Protocol' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.UserActivity.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.UserActivity.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.UserActivity.Supported">
            <summary>
            Determines whether our server supports personal eventing and thusly
            the user activity extension.
            </summary>
        </member>
        <member name="E:Xmpp.Extensions.UserActivity.ActivityChanged">
            <summary>
            The event that is raised when another XMPP entity has published activity
            information.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.UserActivity.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.UserActivity.SetActivity(Xmpp.Extensions.GeneralActivity,Xmpp.Extensions.SpecificActivity,System.String)">
            <summary>
            Sets the user's activity to the specified activity value(s).
            </summary>
            <param name="activity">A value from the GeneralActivity enumeration to
            set the user's general activity to.</param>
            <param name="specific">A value from the SpecificActivity enumeration
            best describing the user's activity in more detail.</param>
            <param name="description">A natural-language description of, or reason
            for, the activity.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserActivity.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the UserActivity class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserActivity.onActivity(Xmpp.Jid,System.Xml.Linq.XElement)">
            <summary>
            Invoked when a contact has published his or her activity.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            activity information.</param>
            <param name="item">The 'item' Xml element of the pubsub publish
            event.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserActivity.GeneralActivityToTagName(Xmpp.Extensions.GeneralActivity)">
            <summary>
            Returns the XMPP element name of the specified general activity value.
            </summary>
            <param name="activity">A value from the GeneralActivity enumeration
            to convert into an element name.</param>
            <returns>The XML element name of the specified activity value.</returns>
        </member>
        <member name="M:Xmpp.Extensions.UserActivity.SpecificActivityToTagName(Xmpp.Extensions.SpecificActivity)">
            <summary>
            Returns the XMPP element name of the specified specific activity value.
            </summary>
            <param name="activity">A value from the SpecificActivity enumeration
            to convert into an element name.</param>
            <returns>The XML element name of the specified activity value.</returns>
        </member>
        <member name="T:Xmpp.Extensions.EntityCapabilities">
            <summary>
            Implements the 'Entity Capabilities' extension as defined in XEP-0092.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.EntityCapabilities.sdisco">
            <summary>
            A reference to the 'Service Discovery' extension instance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.EntityCapabilities.hashes">
            <summary>
            A dictionary for caching the 'ver' hash of each JID.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.EntityCapabilities.cachedFeatures">
            <summary>
            A dictionary of cached features.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.EntityCapabilities.nodeUri">
            <summary>
            The value of the 'node' attribute of the 'e' element, which should
            be an URI according to specification.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.EntityCapabilities.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.EntityCapabilities.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.Input(Xmpp.Im.Presence)">
            <summary>
            Invoked when a presence stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.Output(Xmpp.Im.Presence)">
            <summary>
            Invoked when a presence stanza is being sent.
            </summary>
            <param name="stanza">The stanza which is being sent.</param>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.GetExtensions(Xmpp.Jid)">
            <summary>
            Retrieves an enumerable collection of XMPP extensions that the XMPP
            entity with the specified JID supports.
            </summary>
            <param name="jid">The JID of the XMPP entity to retrieve supported
            extensions for.</param>
            <returns>An enumerable collection of XMPP extensions supported by the
            XMPP entity with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support querying of feature
            information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.GetIdentities(Xmpp.Jid)">
            <summary>
            Queries the XMPP entity with the specified JID for identity information.
            </summary>
            <param name="jid">The JID of the XMPP entity to query.</param>
            <returns>An enumerable collection of identities of the XMPP entity
            with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The query could not be
            performed or the response was invalid.</exception>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.Supports``1(Xmpp.Jid)">
            <summary>
            Determines whether the XMPP entity with the specified JID supports the
            specified XMPP extension.
            </summary>
            <typeparam name="T">The XMPP extension to probe for.</typeparam>
            <param name="jid">The JID of the XMPP entity.</param>
            <returns>true if the XMPP entity with the specified JID supports the
            specified XMPP extension; Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support querying of feature
            information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.Supports(Xmpp.Jid,Xmpp.Extensions.Extension[])">
            <summary>
            Determines whether the XMPP entity with the specified JID supports the
            specified XMPP extension(s).
            </summary>
            <param name="jid">The JID of the XMPP entity.</param>
            <param name="extensions">The XMPP extensions to probe for.</param>
            <returns>true if the XMPP entity with the specified JID supports the
            specified XMPP extension(s); Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the
            extensions parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support querying of feature
            information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.HasIdentity(Xmpp.Jid,System.String,System.String)">
            <summary>
            Determines whether the XMPP entity with the specified JID has the
            identity with the specified category and type attributes.
            </summary>
            <param name="jid">The JID of the XMPP entity.</param>
            <param name="category">The category of the identity to probe for.</param>
            <param name="type">The type of the identity to probe for.</param>
            <returns>true if the XMPP entity with the specified JID has the
            identity with the specified attributes; Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the
            category parameter or the type parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support querying of feature
            information.</exception>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the EntityCapabilities class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.EntityCapabilities.GenerateVerificationString">
            <summary>
            Generates the verification string.
            </summary>
            <returns>The verfication string of this XMPP entity, denoting this
            client's capabilities.</returns>
        </member>
        <member name="T:Xmpp.Extensions.TuneEventArgs">
            <summary>
            Provides data for the Tune event.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneEventArgs.Jid">
            <summary>
            The JID of the XMPP entity that published the tune information.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneEventArgs.Stop">
            <summary>
            Determines whether the XMPP entity stopped play back.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneEventArgs.Information">
            <summary>
            Contains information about the music to which a user is listening.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.TuneEventArgs.#ctor(Xmpp.Jid,Xmpp.Extensions.TuneInformation)">
            <summary>
            Initializes a new instance of the TuneEventArgs class.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the
            tune information.</param>
            <param name="information">The tune information to include as part of
            the event.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.TuneInformation">
            <summary>
            Provides information about the music to which a user is listening.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Artist">
            <summary>
            The artist or performer of the song or piece.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Length">
            <summary>
            The duration of the song or piece in seconds.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Rating">
            <summary>
            The user's rating of the song or piece, from 1 (lowest) to
            10 (highest).
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Source">
            <summary>
            The collection (e.g., album) or other source (e.g., a band website
            that hosts streams or audio files).
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Title">
            <summary>
            The title of the song or piece.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Track">
            <summary>
            A unique identifier for the tune; e.g., the track number within
            a collection.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.TuneInformation.Uri">
            <summary>
            A URI or URL pointing to information about the song, collection,
            or artist.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.TuneInformation.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the TuneInformation class.
            </summary>
            <param name="title">The title of the song or piece.</param>
            <param name="artist">The artist or performer of the song or piece.</param>
            <param name="track"> A unique identifier for the tune; e.g., the track
            number within a collection.</param>
            <param name="length">The duration of the song or piece in
            seconds.</param>
            <param name="rating">The user's rating of the song or piece, from
            1 (lowest) to 10 (highest).</param>
            <param name="source">The collection (e.g., album) or other source
            (e.g., a band website that hosts streams or audio files).</param>
            <param name="uri">A URI or URL pointing to information about the
            song, collection, or artist.</param>
        </member>
        <member name="T:Xmpp.Extensions.UserTune">
            <summary>
            Implements the 'User Tune' extension as defined in XEP-0118.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.UserTune.pep">
            <summary>
            A reference to the 'Personal Eventing Protocol' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.UserTune.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.UserTune.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.UserTune.Supported">
            <summary>
            Determines whether our server supports personal eventing and thusly
            the user tune extension.
            </summary>
        </member>
        <member name="E:Xmpp.Extensions.UserTune.Tune">
            <summary>
            The event that is raised when another XMPP entity has published tune
            information.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.UserTune.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.UserTune.Publish(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Publishes the specified music information to contacts on the user's
            roster.
            </summary>
            <param name="title">The title of the song or piece.</param>
            <param name="artist">The artist or performer of the song or piece.</param>
            <param name="track">A unique identifier for the tune; e.g., the track number
            within a collection or the specific URI for the object (e.g., a
            stream or audio file).</param>
            <param name="length">The duration of the song or piece in seconds.</param>
            <param name="rating">The user's rating of the song or piece, from 1
            (lowest) to 10 (highest).</param>
            <param name="source">The collection (e.g., album) or other source
            (e.g., a band website that hosts streams or audio files).</param>
            <param name="uri">A URI or URL pointing to information about the song,
            collection, or artist</param>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Personal Eventing Protocol' extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <remarks>Publishing no information (i.e. calling Publish without any parameters
            is considered a "stop command" to disable publishing).</remarks>
        </member>
        <member name="M:Xmpp.Extensions.UserTune.Publish(Xmpp.Extensions.TuneInformation)">
            <summary>
            Publishes the specified music information to contacts on the user's
            roster.
            </summary>
            <param name="tune">The tune information to publish.</param>
            <exception cref="T:System.ArgumentNullException">The tune parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Personal Eventing Protocol' extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
            <remarks>Publishing no information (i.e. calling Publish without any parameters
            is considered a "stop command" to disable publishing).</remarks>
        </member>
        <member name="M:Xmpp.Extensions.UserTune.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the UserTune class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserTune.onTune(Xmpp.Jid,System.Xml.Linq.XElement)">
            <summary>
            Invoked when a contact has published music information.
            </summary>
            <param name="jid">The JID of the XMPP entity that published the tune
            information.</param>
            <param name="item">The 'item' Xml element of the pubsub publish
            event.</param>
        </member>
        <member name="M:Xmpp.Extensions.UserTune.GetField(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the inner text of the element with the specified name.
            </summary>
            <param name="tune">The 'tune' element of the event.</param>
            <param name="name">The name of the element whose inner text to
            retrieve.</param>
            <returns>The inner text of the specified element or null.</returns>
        </member>
        <member name="T:Xmpp.Extensions.VCardAvatars">
            <summary>
            Implements the 'vCard based Avatars' extension as defined in XEP-0153.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.VCardAvatars.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.VCardAvatars.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.VCardAvatars.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.VCardAvatars.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.VCardAvatars.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.VCardAvatars.SetAvatar(System.IO.Stream)">
            <summary>
            Set the Avatar based on the stream
            </summary>
            <param name="stream">Avatar stream</param>
        </member>
        <member name="M:Xmpp.Extensions.VCardAvatars.Hash(System.Byte[])">
            <summary>
            Convert the Image to the appropriate format for XEP-0153
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Xmpp.Extensions.VCardAvatars.RequestAvatar(Xmpp.Jid,System.String,System.Action)">
            <summary>
            Requests the avatar image with the specified hash from the node service
            running at the specified JID. It downloads it asynchronysly and executes
            a specified callback action when finished
            </summary>
            <param name="jid">The JID of the node service to request the avatar
            image from.</param>
            <param name="filepath">The full location of the file that the Avatar file we be written.</param>
            <param name="callback">A callback Action to be invoked after the end of the file write. </param>
            <exception cref="T:System.ArgumentNullException">The jid or the filepath parameter is null.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.VCardAvatars.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the vCard-Avatar class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.Pep">
            <summary>
            Implements the 'Personal Eventing Protocol' extension as defined in XEP-0163.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Pep.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Pep.supported">
            <summary>
            Determines whether our server supports the PEP extension.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Pep.initialized">
            <summary>
            true if the initial identity query has been performed.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Pep.callbacks">
            <summary>
            A dictionary of callback methods registered for specific events.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Pep.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.Pep.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Pep.Supported">
            <summary>
            Determines whether our server supports the personal eventing protocol.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Pep.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Pep.Input(Xmpp.Im.Message)">
            <summary>
            Invoked when a Message stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Pep.Publish(System.String,System.String,System.Xml.Linq.XElement[])">
            <summary>
            Publishes the specified data to the specified node.
            </summary>
            <param name="node">The Id of the node to publish to.</param>
            <param name="itemId">The id of the 'item' element which is being
            published.</param>
            <param name="data">The data to include in the 'item' element of the
            publish request. If this is omitted, no data will be added to the publish
            request.</param>
            <exception cref="T:System.ArgumentNullException">The node parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The server does not support the
            'Personal Eventing Protocol' extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Pep.Subscribe(System.String,System.Action{Xmpp.Jid,System.Xml.Linq.XElement})">
            <summary>
            Subscribes to the specified node.
            </summary>
            <param name="node">The id of the node to subscribe to.</param>
            <param name="cb">A callback method to invoke whenever an event
            notification for the node specified is received.</param>
            <exception cref="T:System.ArgumentNullException">The node parameter is null or the
            cb parameter is null.</exception>
            <exception cref="T:System.ArgumentException">A callback for the specified node id
            has already been installed.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Pep.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from the specified node.
            </summary>
            <param name="node">The id of the node to unsubscribe from.</param>
            <exception cref="T:System.ArgumentNullException">The node parameter is null.</exception>
            <remarks>If no subscription for the specified node id is found, the
            method does nothing.</remarks>
        </member>
        <member name="M:Xmpp.Extensions.Pep.RetrieveItems(Xmpp.Jid,System.String)">
            <summary>
            Requests the items of the node with the specified node id.
            </summary>
            <param name="jid">The JID of the node service.</param>
            <param name="node">The Id of the node whose items to retrieve.</param>
            <returns>An enumerable collection of items maintained by the node
            with the specified node id.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the node
            parameter is null.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Pep.RetrieveItem(Xmpp.Jid,System.String,System.String)">
            <summary>
            Retrieves the item with the specified id from the collection of items
            of the node with the specified node id.
            </summary>
            <param name="jid">The JID of the node service.</param>
            <param name="node">The Id of the node whose item to retrieve.</param>
            <param name="itemId">The id of the item to retrieve.</param>
            <returns>The item with the specified item id.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the node
            parameter or the itemId parameter is null.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Pep.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the Pep class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.Pep.QueryServer">
            <summary>
            Queries our own server to see if we support the PEP extension.
            </summary>
            <returns>true if our server supports the PEP profile; Otherwise
            false.</returns>
        </member>
        <member name="T:Xmpp.Extensions.BlockingCommand">
            <summary>
            Implements the 'Blocking Command' extension as defined in XEP-0191.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.BlockingCommand.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.BlockingCommand.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.BlockingCommand.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.BlockingCommand.Supported">
            <summary>
            Determines whether our server supports the 'Blocking Command' extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.BlockingCommand.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.BlockingCommand.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.BlockingCommand.GetBlocklist">
            <summary>
            Returns an enumerable collection of blocked contacts.
            </summary>
            <returns>An enumerable collection of JIDs which are on the client's
            blocklist.</returns>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Blocking Command' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BlockingCommand.Block(Xmpp.Jid)">
            <summary>
            Blocks all communication to and from the XMPP entity with the specified JID.
            </summary>
            <param name="jid">The JID of the XMPP entity to block.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Blocking Command' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BlockingCommand.Unblock(Xmpp.Jid)">
            <summary>
            Unblocks all communication to and from the XMPP entity with the specified
            JID.
            </summary>
            <param name="jid">The JID of the XMPP entity to unblock.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Blocking Command' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BlockingCommand.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the BlockingCommand class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.Ping">
            <summary>
            Implements the 'Ping' extension as defined in XEP-0199.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Ping.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Ping.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.Ping.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Ping.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Ping.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.Ping.PingEntity(Xmpp.Jid)">
            <summary>
            Pings the XMPP entity with the specified JID.
            </summary>
            <param name="jid">The JID of the XMPP entity to ping.</param>
            <returns>The time it took to ping the XMPP entity with the specified
            JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Ping' XMPP extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.Ping.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the Ping class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.EntityTime">
            <summary>
            Implements the 'Entity Time' extension as defined in XEP-0202.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.EntityTime.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.EntityTime.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.EntityTime.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.EntityTime.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.EntityTime.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="M:Xmpp.Extensions.EntityTime.GetTime(Xmpp.Jid)">
            <summary>
            Retrieves the time of the XMPP entity with the specified JID.
            </summary>
            <param name="jid">The JID of the XMPP entity to retrieve the time
            for.</param>
            <returns>The time of the XMPP entity with the specified JID.</returns>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Entity Time' XMPP extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.EntityTime.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the EntityTime class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.Attention">
            <summary>
            Implements the 'Attention' extension as defined in XEP-0224.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.Attention.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.Attention.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.Attention.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Attention.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.Attention.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the Attention class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.Attention.GetAttention(Xmpp.Jid,System.String)">
            <summary>
            Gets the attention of the XMPP user with the specified JID.
            </summary>
            <param name="jid">The JID of the user to grab the attention of.</param>
            <param name="message">A Message to sent along.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter
            is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Attention' XMPP
            extension.</exception>
        </member>
        <member name="T:Xmpp.Extensions.BitsOfBinary">
            <summary>
            Implements the 'Bits of Binary' extension as defined in XEP-0231.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.BitsOfBinary.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.BitsOfBinary.cache">
            <summary>
            A cache of binary data items indexed by cid.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.BitsOfBinary.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.BitsOfBinary.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.Create(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new bit of binary data.
            </summary>
            <param name="data">The data to embed.</param>
            <param name="type">The content-type of the data.</param>
            <param name="cache">true to cache the newly created bit of binary
            data.</param>
            <returns>An initialized instance of the BobData class representing the
            bit of binary data.</returns>
            <exception cref="T:System.ArgumentNullException">The data parameter or the type
            parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.Add(Xmpp.Extensions.BobData)">
            <summary>
            Adds the specified BobData object to the cache of cached bits-of-binary
            data.
            </summary>
            <param name="bob">The BobData object to add to the cache.</param>
            <exception cref="T:System.ArgumentNullException">The bob parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.Get(System.String)">
            <summary>
            Retrieves the data-item with the specified CID from the cache of
            data-items.
            </summary>
            <param name="cid">The CID of the binary data to retrieve.</param>
            <returns>The data-item with the specified CID.</returns>
            <exception cref="T:System.ArgumentNullException">The cid parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">A data-item with the specified CID
            does not exist in the local cache of data-items.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.Get(System.String,Xmpp.Jid,System.Boolean)">
            <summary>
            Retrieves the data-item with the specified CID from the XMPP entity
            with the specified JID.
            </summary>
            <param name="cid">The CID of the binary data to retrieve.</param>
            <param name="from">The JID of the XMPP entity to request the data
            from.</param>
            <param name="cache">true to store the requested item in the local
            cache for future references.</param>
            <returns>The data-item with the specified CID.</returns>
            <exception cref="T:System.ArgumentNullException">The cid parameter or the from
            parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The XMPP entity with
            the specified JID does not support the 'Bits of Binary' XMPP
            extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the BitsOfBinary class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="M:Xmpp.Extensions.BitsOfBinary.Input(Xmpp.Core.Iq)">
            <summary>
            Invoked when an IQ stanza is being received.
            </summary>
            <param name="stanza">The stanza which is being received.</param>
            <returns>true to intercept the stanza or false to pass the stanza
            on to the next handler.</returns>
        </member>
        <member name="T:Xmpp.Extensions.BobData">
            <summary>
            Represents a piece of binary data in the context of the 'Bits of Binary'
            extension.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.BobData.Data">
            <summary>
            The actual binary data.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.BobData.Type">
            <summary>
            The content-type of the binary data.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.BobData.Cid">
            <summary>
            The content-id of the data.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.BobData.ToString">
            <summary>
            Returns a textual representation of the BobData instance.
            </summary>
            <returns>A textual XML representation of the BobData instance.</returns>
        </member>
        <member name="M:Xmpp.Extensions.BobData.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parses a 'data' XML element and creates a new BobData off it.
            </summary>
            <param name="data">The XML data element to parse.</param>
            <returns>An initialized instance of the BobData class representing the
            data contained in the specified element.</returns>
            <exception cref="T:System.ArgumentNullException">The data parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The XML namespace of the specified
            XML element is not 'urn:xmpp:bob', or the mandatory type attribute is
            missing, or the contained data is not a valid Base64-encoded
            string.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BobData.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the BobData class.
            </summary>
            <param name="data">The binary data.</param>
            <param name="type">The content-type of the data.</param>
            <exception cref="T:System.ArgumentNullException">The data parameter or the
            type parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BobData.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Initializes a new instance of the BobData class.
            </summary>
            <param name="data">The binary data.</param>
            <param name="type">The content-type of the data.</param>
            <param name="cid">The CID of the binary-data.</param>
            <exception cref="T:System.ArgumentNullException">The data parameter or the
            type parameter or the cid parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Extensions.BobData.Sha1(System.Byte[])">
            <summary>
            Calculates the SHA-1 hash value of the specified data.
            </summary>
            <param name="data">The data to calculate the SHA-1 hash value of.</param>
            <returns>A SHA-1 hash as a hex-string.</returns>
            <exception cref="T:System.ArgumentNullException">The data parameter is
            null.</exception>
        </member>
        <member name="T:Xmpp.Extensions.ServerIpCheck">
            <summary>
            Implements the 'Server IP Check' extension as defined in XEP-0279.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.ServerIpCheck.ecapa">
            <summary>
            A reference to the 'Entity Capabilities' extension instance.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.ServerIpCheck.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.ServerIpCheck.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.ServerIpCheck.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.ServerIpCheck.GetExternalAddress">
            <summary>
            Retrieves the client's external IP address.
            </summary>
            <returns>The XMPP client's external IP address.</returns>
            <exception cref="T:System.NotSupportedException">The XMPP server does not
            support the 'Server IP Check' XMPP extension.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Extensions.ServerIpCheck.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the ServerIpCheck class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf this
            instance is created.</param>
        </member>
        <member name="T:Xmpp.Extensions.XmppExtension">
            <summary>
            The base class from which all implementations of XMPP extensions must
            derive.
            </summary>
        </member>
        <member name="F:Xmpp.Extensions.XmppExtension.im">
            <summary>
            A reference to the instance of the XmppIm class.
            </summary>
        </member>
        <member name="P:Xmpp.Extensions.XmppExtension.Namespaces">
            <summary>
            An enumerable collection of XMPP namespaces the extension implements.
            </summary>
            <remarks>This is used for compiling the list of supported extensions
            advertised by the 'Service Discovery' extension.</remarks>
        </member>
        <member name="P:Xmpp.Extensions.XmppExtension.Xep">
            <summary>
            The named constant of the Extension enumeration that corresponds to this
            extension.
            </summary>
        </member>
        <member name="M:Xmpp.Extensions.XmppExtension.#ctor(Xmpp.Im.XmppIm)">
            <summary>
            Initializes a new instance of the XmppExtension class.
            </summary>
            <param name="im">A reference to the XmppIm instance on whose behalf the
            extension is being created.</param>
        </member>
        <member name="M:Xmpp.Extensions.XmppExtension.Initialize">
            <summary>
            Invoked after all extensions have been loaded.
            </summary>
        </member>
        <member name="T:Xmpp.Im.Availability">
            <summary>
            Defines the possible values for a user's availability status.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Availability.Offline">
            <summary>
            The user or resource is offline and unavailable.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Availability.Online">
            <summary>
            The user or resource is online and available.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Availability.Away">
            <summary>
            The user or resource is temporarily away.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Availability.Chat">
            <summary>
            The user or resource is actively interested in chatting.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Availability.Dnd">
            <summary>
            The user or resource is busy.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Availability.Xa">
            <summary>
            The user or resource is away for an extended period.
            </summary>
        </member>
        <member name="T:Xmpp.Im.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:Xmpp.Im.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ErrorEventArgs class.
            </summary>
            <param name="e">The exception that causes the error event.</param>
            <exception cref="T:System.ArgumentNullException">The e parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.GroupPrivacyRule">
            <summary>
            Represents a privacy rule pertaining to a group.
            </summary>
        </member>
        <member name="P:Xmpp.Im.GroupPrivacyRule.Group">
            <summary>
            The name of the group the privacy rule applies to.
            </summary>
        </member>
        <member name="M:Xmpp.Im.GroupPrivacyRule.#ctor(System.String,System.Boolean,System.UInt32,Xmpp.Im.PrivacyGranularity)">
            <summary>
            Initializes a new instance of the PrivacyRule class.
            </summary>
            <param name="group">The group the privacy rule applies to.</param>
            <param name="allow">True to allow entities affected by this rule; Otherwise
            false.</param>
            <param name="order">The order of the privacy rule.</param>
            <param name="granularity">Specifies which kinds of stanzas should be
            allowed or blocked, respectively.</param>
            <exception cref="T:System.ArgumentNullException">The group parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.JidPrivacyRule">
            <summary>
            Represents a privacy rule pertaining to a JID.
            </summary>
        </member>
        <member name="P:Xmpp.Im.JidPrivacyRule.Jid">
            <summary>
            The JID the privacy rule applies to.
            </summary>
        </member>
        <member name="M:Xmpp.Im.JidPrivacyRule.#ctor(Xmpp.Jid,System.Boolean,System.UInt32,Xmpp.Im.PrivacyGranularity)">
            <summary>
            Initializes a new instance of the PrivacyRule class.
            </summary>
            <param name="jid">The JID the privacy rule applies to.</param>
            <param name="allow">True to allow entities affected by this rule; Otherwise
            false.</param>
            <param name="order">The order of the privacy rule.</param>
            <param name="granularity">Specifies which kinds of stanzas should be
            allowed or blocked, respectively.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.Message">
            <summary>
            Represents a Message stanza as defined in XMPP:IM.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Message.type">
            <summary>
            The type of the Message stanza.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Message.timestamp">
            <summary>
            The time at which the Message was originally sent.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.Type">
            <summary>
            The type of the Message stanza.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.Timestamp">
            <summary>
            The time at which the Message was originally sent.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.Thread">
            <summary>
            The conversation thread this Message belongs to.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.Subject">
            <summary>
            The subject of the Message.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.Body">
            <summary>
            The body of the Message.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.AlternateSubjects">
            <summary>
            A dictionary of alternate forms of the Message subjects. The keys of the
            dictionary denote ISO 2 language codes.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Message.AlternateBodies">
            <summary>
            A dictionary of alternate forms of the Message bodies. The keys of the
            dictionary denote ISO 2 language codes.
            </summary>
        </member>
        <member name="M:Xmpp.Im.Message.#ctor(Xmpp.Jid,System.String,System.String,System.String,System.String,System.Xml.Linq.XElement,Xmpp.Im.MessageType,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the Message class.
            </summary>
            <param name="to">The JID of the intended recipient.</param>
            <param name="body">The content of the Message.</param>
            <param name="subject">The subject of the Message.</param>
            <param name="thread">The conversation thread this Message belongs to.</param>
            <param name="type">The type of the Message. Can be one of the values from
            the MessagType enumeration.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ArgumentNullException">The to parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The body parameter is the empty string.</exception>
        </member>
        <member name="M:Xmpp.Im.Message.#ctor(Xmpp.Core.Message)">
            <summary>
            Initializes a new instance of the Message class from the specified
            instance.
            </summary>
            <param name="message">An instance of the Core.Message class to
            initialize this instance with.</param>
            <exception cref="T:System.ArgumentNullException">The Message parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The 'type' attribute of
            the specified Message stanza is invalid.</exception>
        </member>
        <member name="M:Xmpp.Im.Message.ParseType(System.String)">
            <summary>
            Parses the Message type from the specified string.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The MessageType value parsed from the string.</returns>
            <exception cref="T:System.ArgumentException">The specified value for the stanza
            type is invalid.</exception>
        </member>
        <member name="M:Xmpp.Im.Message.GetBare(System.String)">
            <summary>
            Attempts to retrieve the bare element (i.e. without an xml:lang
            attribute) with the specified tag name.
            </summary>
            <param name="tag">The tag name of the element to retrieve.</param>
            <returns>The located element or null if no such element exists.</returns>
        </member>
        <member name="T:Xmpp.Im.MessageEventArgs">
            <summary>
            Provides data for the Message event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.MessageEventArgs.Jid">
            <summary>
            The JID of the user or resource who sent the Message.
            </summary>
        </member>
        <member name="P:Xmpp.Im.MessageEventArgs.xmppMessage">
            <summary>
            The received chat Message.
            </summary>
        </member>
        <member name="M:Xmpp.Im.MessageEventArgs.#ctor(Xmpp.Jid,Xmpp.Im.Message)">
            <summary>
            Initializes a new instance of the MessageEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the Message
            parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.MessageType">
            <summary>
            Defines the possible types for Message stanzas.
            </summary>
        </member>
        <member name="F:Xmpp.Im.MessageType.Normal">
            <summary>
            The Message is a single Message that is sent outside the context of
            a one-to-one conversation or groupchat.
            </summary>
        </member>
        <member name="F:Xmpp.Im.MessageType.Chat">
            <summary>
            The Message is sent in the context of a one-to-one chat conversation.
            </summary>
        </member>
        <member name="F:Xmpp.Im.MessageType.Error">
            <summary>
            An error has occurred related to a previous Message sent by the sender.
            </summary>
        </member>
        <member name="F:Xmpp.Im.MessageType.Groupchat">
            <summary>
            The Message is sent in the context of a multi-user chat environment.
            </summary>
        </member>
        <member name="F:Xmpp.Im.MessageType.Headline">
            <summary>
            The Message is generated by an automated service that delivers or
            broadcasts content.
            </summary>
        </member>
        <member name="T:Xmpp.Im.Presence">
            <summary>
            Represents a Presence XML stanza as defined in XMPP:IM.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Presence.Type">
            <summary>
            The type of the presence stanza.
            </summary>
        </member>
        <member name="F:Xmpp.Im.Presence.type">
            <summary>
            The type of the presence stanza.
            </summary>
        </member>
        <member name="M:Xmpp.Im.Presence.#ctor(Xmpp.Core.Presence)">
            <summary>
            Initializes a new instance of the Presence class from the specified
            instance.
            </summary>
            <param name="presence">An instance of the Core.Presence class to
            initialize this instance with.</param>
            <exception cref="T:System.ArgumentNullException">The presence parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The 'type' attribute of the
            specified presence stanza is invalid.</exception>
        </member>
        <member name="M:Xmpp.Im.Presence.#ctor(Xmpp.Jid,Xmpp.Jid,Xmpp.Im.PresenceType,System.String,System.Globalization.CultureInfo,System.Xml.Linq.XElement[])">
            <summary>
            Initializes a new instance of the Presence class.
            </summary>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="type">The type of the presence stanza.</param>
            <param name="data">The content of the stanza.</param>
            <param name="id">The ID of the Presence stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
        </member>
        <member name="M:Xmpp.Im.Presence.ParseType(System.String)">
            <summary>
            Parses the Presence type from the specified string.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The PresenceType value parsed from the string.</returns>
            <exception cref="T:System.ArgumentException">The specified value for the stanza
            type is invalid.</exception>
        </member>
        <member name="T:Xmpp.Im.PresenceType">
            <summary>
            Defines the possible types for Presence stanzas.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Available">
            <summary>
            Signals that the user is available for communication.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Unavailable">
            <summary>
            Signals that the user is no longer available for communication.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Subscribe">
            <summary>
            The sender wishes to subscribe to the recipient's presence.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Subscribed">
            <summary>
            The sender has allowed the recipient to receive their presence.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Unsubscribe">
            <summary>
            The sender is unsubscribing from another entity's presence.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Unsubscribed">
            <summary>
            The subscription request has been denied or a previously-granted
            subscription has been cancelled.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Probe">
            <summary>
            A request for a user's current presence.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PresenceType.Error">
            <summary>
            An error has occurred regarding processing or delivery of a
            previously-sent presence stanza.
            </summary>
        </member>
        <member name="T:Xmpp.Im.PrivacyGranularity">
            <summary>
            Defines the possible values for specifying more granular control over
            which kinds of stanzas are to be blocked.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PrivacyGranularity.Message">
            <summary>
            Blocks incoming Message stanzas.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PrivacyGranularity.Iq">
            <summary>
            Blocks incoming IQ stanzas.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PrivacyGranularity.PresenceIn">
            <summary>
            Blocks incoming presence notifications.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PrivacyGranularity.PresenceOut">
            <summary>
            Blocks outgoing presence notifications.
            </summary>
        </member>
        <member name="T:Xmpp.Im.PrivacyList">
            <summary>
            Represents an XMPP privacy list.
            </summary>
        </member>
        <member name="F:Xmpp.Im.PrivacyList.rules">
            <summary>
            The set of rules that make up the privacy list.
            </summary>
        </member>
        <member name="P:Xmpp.Im.PrivacyList.Name">
            <summary>
            The name of the privacy list.
            </summary>
        </member>
        <member name="P:Xmpp.Im.PrivacyList.Count">
            <summary>
            Gets the number of elements contained in the privacy list.
            </summary>
        </member>
        <member name="P:Xmpp.Im.PrivacyList.IsReadOnly">
            <summary>
            Gets a value indicating whether the privacy list is read-only.
            </summary>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PrivacyList class.
            </summary>
            <param name="name">The name of the privacy list.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the privacy list.
            </summary>
            <returns>An enumerator that can be used to iterate through the privacy
            list.</returns>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the privacy list.
            </summary>
            <returns>An enumerator that can be used to iterate through the privacy
            list.</returns>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.Add(Xmpp.Im.PrivacyRule)">
            <summary>
            Adds the specified privacy rule to the privacy list.
            </summary>
            <param name="item">The item to add to the list.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The privacy list already contains
            a rule with the same order value as the item specified.</exception>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.Add(Xmpp.Im.PrivacyRule,System.Boolean)">
            <summary>
            Adds the specified privacy rule to the privacy list.
            </summary>
            <param name="item">The item to add to the list.</param>
            <param name="overWriteOrder">If true, the order value of the privacy-rule
            may be overwritten, if a rule with the same order value already
            exists.</param>
            <returns>The possibly modified order value of the privacy-rule.</returns>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.Clear">
            <summary>
            Removes all rules from the privacy list.
            </summary>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.Contains(Xmpp.Im.PrivacyRule)">
            <summary>
            Determines whether the privacy list contains the specified privacy rule.
            </summary>
            <param name="item">The privacy rule to locate.</param>
            <returns>true if the privacy rule is contained in the privacy list;
            Otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.CopyTo(Xmpp.Im.PrivacyRule[],System.Int32)">
            <summary>
            Copies the elements of the privacy list to the specified array, starting
            at the specified index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination
            of the elements copied from the privacy list.</param>
            <param name="arrayIndex">The zero-based index in array at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException">The array parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The arrayIndex parameter is
            less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in
            the source collection is greater than the available space from arrayIndex
            to the end of the destination array.</exception>
        </member>
        <member name="M:Xmpp.Im.PrivacyList.Remove(Xmpp.Im.PrivacyRule)">
            <summary>
            Removes the specified privacy rule from the privacy list.
            </summary>
            <param name="item">The privacy rule to remove.</param>
            <returns>true if item was successfully removed from the privacy list;
            Otherwise false. This method also returns false if item is not found in
            the original privacy list.</returns>
            <exception cref="T:System.ArgumentNullException">The item parameter is
            null.</exception>
            <exception cref="T:System.NotSupportedException">The privacy list is
            read-only.</exception>
        </member>
        <member name="T:Xmpp.Im.PrivacyRule">
            <summary>
            Represents a generic privacy rule.
            </summary>
        </member>
        <member name="P:Xmpp.Im.PrivacyRule.Allow">
            <summary>
            Determines whether entities affected by this rule should be blocked
            or allowed.
            </summary>
        </member>
        <member name="P:Xmpp.Im.PrivacyRule.Order">
            <summary>
            The order of the privacy rule. Privacy rules are processed in ascending
            order determined by this value.
            </summary>
        </member>
        <member name="P:Xmpp.Im.PrivacyRule.Granularity">
            <summary>
            Specifies which kinds of stanzas are to be blocked (a value of 0 denotes
            blocking of all stanzas).
            </summary>
        </member>
        <member name="M:Xmpp.Im.PrivacyRule.#ctor(System.Boolean,System.UInt32,Xmpp.Im.PrivacyGranularity)">
            <summary>
            Initializes a new instance of the PrivacyRule class.
            </summary>
            <param name="allow">True to allow entities affected by this rule; Otherwise
            false.</param>
            <param name="order">The order of the privacy rule.</param>
            <param name="granularity">Specifies which kinds of stanzas should be
            blocked.</param>
        </member>
        <member name="T:Xmpp.Im.Roster">
            <summary>
            Represents the user's roster.
            </summary>
            <remarks>In XMPP jargon, the user's contact list is called a 'roster'.</remarks>
        </member>
        <member name="F:Xmpp.Im.Roster.items">
            <summary>
            The set of items that form the roster.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Roster.Count">
            <summary>
            The number of items on the roster.
            </summary>
        </member>
        <member name="M:Xmpp.Im.Roster.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of
            roster items.
            </summary>
            <returns>An enumerator that iterates through the collection of
            roster items.</returns>
        </member>
        <member name="M:Xmpp.Im.Roster.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of
            roster items.
            </summary>
            <returns>An enumerator that iterates through the collection of
            roster items.</returns>
        </member>
        <member name="M:Xmpp.Im.Roster.#ctor(System.Collections.Generic.IEnumerable{Xmpp.Im.RosterItem})">
            <summary>
            Initializes a new instance of the Roster class.
            </summary>
            <param name="items">An enumerable collection of items to add to the
            roster.</param>
        </member>
        <member name="M:Xmpp.Im.Roster.Add(Xmpp.Im.RosterItem)">
            <summary>
            Adds the specified item to the roster.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was added to the collection of roster items;
            Otherwise false.</returns>
        </member>
        <member name="T:Xmpp.Im.RosterItem">
            <summary>
            Represents a roster item.
            </summary>
            <remarks>In XMPP jargon, the user's contact list is called a 'roster'.</remarks>
        </member>
        <member name="F:Xmpp.Im.RosterItem.groups">
            <summary>
            The groups this roster item is part of.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterItem.Jid">
            <summary>
            The JID of the user this item is associated with.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterItem.Name">
            <summary>
            The nickname associated with the JID. This may be null.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterItem.Groups">
            <summary>
            The groups or categories this item is part of.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterItem.SubscriptionState">
            <summary>
            The subscription state of this item.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterItem.Pending">
            <summary>
            Determines whether the user has sent a subscription request and is
            awaiting approval or refusal from the contact.
            </summary>
        </member>
        <member name="M:Xmpp.Im.RosterItem.#ctor(Xmpp.Jid,System.String,System.String[])">
            <summary>
            Initializes a new instance of the RosterItem class.
            </summary>
            <param name="jid">The JID of the user this item will be associated
            with.</param>
            <param name="name">The nickname with which to associate the JID.</param>
            <param name="groups">An array of groups or categories this roster item
            will be added to.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Im.RosterItem.#ctor(Xmpp.Jid,System.String,Xmpp.Im.SubscriptionState,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the RosterItem class.
            </summary>
            <param name="jid">The JID of the user this item will be associated
            with.</param>
            <param name="name">The nickname with which to associate the JID.</param>
            <param name="state">One of the values from the SubscriptionState
            enumeration.</param>
            <param name="pending">True if the user has requested subscription but
            has not received the contact's response.</param>
            <param name="groups">An enumerable collection of groups to categorize
            this item in.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.RosterUpdatedEventArgs">
            <summary>
            Provides data for the RosterUpdated Event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterUpdatedEventArgs.Item">
            <summary>
            The contact that has been added to the user's roster.
            </summary>
        </member>
        <member name="P:Xmpp.Im.RosterUpdatedEventArgs.Removed">
            <summary>
            Determines whether the item has been removed from the roster or
            added/updated.
            </summary>
        </member>
        <member name="M:Xmpp.Im.RosterUpdatedEventArgs.#ctor(Xmpp.Im.RosterItem,System.Boolean)">
            <summary>
            Initializes a new instance of the RosterUpdatedEventArgs class.
            </summary>
            <param name="item">The item the RosterUpdated event is being raised
            for.</param>
            <param name="removed">Set to true if the item is being removed from
            the roster.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.Status">
            <summary>
            Provides status information for a contact.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Status.Availability">
            <summary>
            The contact's availability.
            </summary>
        </member>
        <member name="P:Xmpp.Im.Status.Message">
            <summary>
            A user-provided description of his or her availability status.
            </summary>
            <remarks>If the Status instance contains multiple messages, this
            field returns the value of the first Message in the 'Messages'
            dictionary.</remarks>
        </member>
        <member name="P:Xmpp.Im.Status.Messages">
            <summary>
            A dictionary of user-provided descriptions of his or her availability
            status.
            </summary>
            <remarks>The keys of the dictionary are ISO 2 letter language
            Codes denoting the language of the respective value.</remarks>
        </member>
        <member name="P:Xmpp.Im.Status.Priority">
            <summary>
            The priority level of the resource.
            </summary>
            <remarks>The priority value serves as a hint for the server
            in stanza routing within instant messaging and presence
            applications.</remarks>
        </member>
        <member name="M:Xmpp.Im.Status.#ctor(Xmpp.Im.Availability,System.String,System.SByte,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
            <param name="availability">The availability state.</param>
            <param name="message">An optional Message providing a detailed
            description of the availability state.</param>
            <param name="priority">Provides a hint for stanza routing.</param>
            <param name="language">The language of the description of the
            availability state.</param>
        </member>
        <member name="M:Xmpp.Im.Status.#ctor(Xmpp.Im.Availability,System.Collections.Generic.Dictionary{System.String,System.String},System.SByte)">
            <summary>
            Initializes a new instance of the Status class.
            </summary>
            <param name="availability">The availability state.</param>
            <param name="messages">A dictionary of messages providing detailed
            descriptions of the availability state. The dictionary keys denote
            the languages of the messages and must be valid ISO 2 letter language
            codes.</param>
            <param name="priority">Provides a hint for stanza routing.</param>
        </member>
        <member name="T:Xmpp.Im.StatusEventArgs">
            <summary>
            Provides data for the Status event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.StatusEventArgs.Jid">
            <summary>
            The JID of the user or resource whose status has changed.
            </summary>
        </member>
        <member name="P:Xmpp.Im.StatusEventArgs.Status">
            <summary>
            The status of the user.
            </summary>
        </member>
        <member name="M:Xmpp.Im.StatusEventArgs.#ctor(Xmpp.Jid,Xmpp.Im.Status)">
            <summary>
            Initializes a new instance of the StatusEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter or the status
            parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.SubscriptionApprovedEventArgs">
            <summary>
            Provides data for the SubscriptionApproved Event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.SubscriptionApprovedEventArgs.Jid">
            <summary>
            The JID of the user or resource who accepted a pending subscription
            request.
            </summary>
        </member>
        <member name="M:Xmpp.Im.SubscriptionApprovedEventArgs.#ctor(Xmpp.Jid)">
            <summary>
            Initializes a new instance of the SubscriptionApprovedEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.SubscriptionPrivacyRule">
            <summary>
            Represents a privacy rule pertaining to a subscription state.
            </summary>
        </member>
        <member name="P:Xmpp.Im.SubscriptionPrivacyRule.SubscriptionState">
            <summary>
            The subscription state the privacy rule applies to.
            </summary>
        </member>
        <member name="M:Xmpp.Im.SubscriptionPrivacyRule.#ctor(Xmpp.Im.SubscriptionState,System.Boolean,System.UInt32,Xmpp.Im.PrivacyGranularity)">
            <summary>
            Initializes a new instance of the PrivacyRule class.
            </summary>
            <param name="state">The subscription state the privacy rule applies
            to.</param>
            <param name="allow">True to block entities affected by this rule; Otherwise
            false.</param>
            <param name="order">The order of the privacy rule.</param>
            <param name="granularity">Specifies which kinds of stanzas are to be
            blocked.</param>
        </member>
        <member name="T:Xmpp.Im.SubscriptionRefusedEventArgs">
            <summary>
            Provides data for the SubscriptionRefused Event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.SubscriptionRefusedEventArgs.Jid">
            <summary>
            The JID of the user or resource who refused a pending subscription
            request.
            </summary>
        </member>
        <member name="M:Xmpp.Im.SubscriptionRefusedEventArgs.#ctor(Xmpp.Jid)">
            <summary>
            Initializes a new instance of the SubscriptionRefusedEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.SubscriptionRequest">
            <summary>
            Represents a request for subscription.
            </summary>
            <param name="from">The JID of the XMPP user that is requesting
            authorization to subscribe to presence notifications.</param>
            <returns>true to approve the subscription request, or false to refuse
            the request.</returns>
        </member>
        <member name="T:Xmpp.Im.SubscriptionRequestEventArgs">
            <summary>
            Provides data for the SubscriptionRequest Event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.SubscriptionRequestEventArgs.Jid">
            <summary>
            The JID of the user or resource who wishes to subscribe to presence
            notifications.
            </summary>
        </member>
        <member name="M:Xmpp.Im.SubscriptionRequestEventArgs.#ctor(Xmpp.Jid)">
            <summary>
            Initializes a new instance of the SubscriptionRequestEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.SubscriptionState">
            <summary>
            Defines the possible values for the subscription state of a roster item.
            </summary>
        </member>
        <member name="F:Xmpp.Im.SubscriptionState.None">
            <summary>
            The user does not have a subscription to the contact's presence information,
            and the contact does not have a subscription to the user's presence
            information.
            </summary>
        </member>
        <member name="F:Xmpp.Im.SubscriptionState.To">
            <summary>
            The user has a subscription to the contact's presence information, but the
            contact does not have a subscription to the user's presence information.
            </summary>
        </member>
        <member name="F:Xmpp.Im.SubscriptionState.From">
            <summary>
            The contact has a subscription to the user's presence information, but the
            user does not have a subscription to the contact's presence information.
            </summary>
        </member>
        <member name="F:Xmpp.Im.SubscriptionState.Both">
            <summary>
            Both the user and the contact have subscriptions to each other's presence
            information.
            </summary>
        </member>
        <member name="T:Xmpp.Im.UnsubscribedEventArgs">
            <summary>
            Provides data for the Unsubscribed Event.
            </summary>
        </member>
        <member name="P:Xmpp.Im.UnsubscribedEventArgs.Jid">
            <summary>
            The JID of the user or resource who unsubscribed from receiving presence
            information of the JID associated with this instance.
            </summary>
        </member>
        <member name="M:Xmpp.Im.UnsubscribedEventArgs.#ctor(Xmpp.Jid)">
            <summary>
            Initializes a new instance of the UnsubscribedEventArgs class.
            </summary>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.XmlDictionary">
            <summary>
            An XML-backed dictionary.
            </summary>
        </member>
        <member name="F:Xmpp.Im.XmlDictionary.element">
            <summary>
            The parent XML element of the dictionary items.
            </summary>
        </member>
        <member name="F:Xmpp.Im.XmlDictionary.tag">
            <summary>
            The tag name of a single dictionary item.
            </summary>
        </member>
        <member name="F:Xmpp.Im.XmlDictionary.key">
            <summary>
            The attribute name of the items which acts as key.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.#ctor(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Initializes a new instance of the XmlDictionary class.
            </summary>
            <param name="element">The XML element which is the parant of the
            dictionary XML entries.</param>
            <param name="tag">The XML tag name of an entry.</param>
            <param name="key">The XML attribute of the entries whose value is used
            as the key into the dictionary.</param>
            <exception cref="T:System.ArgumentNullException">Any of the parameters are null.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The string to use as the key of the element to
            add.</param>
            <param name="value">The string to use as the value of the element
            to add.</param>
            <exception cref="T:System.ArgumentNullException">The key parameter is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key
            already exists in the dictionary.</exception>
            <exception cref="T:System.NotSupportedException">The dictionary is
            read-only.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element with the specified
            key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key;
            otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The key parameter is null.</exception>
        </member>
        <member name="P:Xmpp.Im.XmlDictionary.Keys">
            <summary>
            Gets an enumerable collection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.
            This method also returns false if key was not found in the original
            dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">The key parameter is null.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with
            the specified key, if the key is found; otherwise, the default value for
            the type of the value parameter. This parameter is passed
            uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified
            key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key parameter is null.</exception>
        </member>
        <member name="P:Xmpp.Im.XmlDictionary.Values">
            <summary>
            Gets an enumerable collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmlDictionary.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">The key parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            dictionary is read-only.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the dictionary.
            </summary>
            <param name="item">The object to add to the dictionary.</param>
            <exception cref="T:System.ArgumentNullException">The key value of the specified
            item is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key
            already exists in the dictionary.</exception>
            <exception cref="T:System.NotSupportedException">The dictionary is
            read-only.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.Clear">
            <summary>
            Removes all items from the dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <param name="item">The object to locate in the dictionary.</param>
            <returns>true if item is found in the dictionary; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The key value of the specified
            item is null.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an System.Array, starting
            at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the
            destination of the elements copied from the dictionary. The System.Array
            must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException">The array parameter is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The arrayIndex parameter
            is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the
            source dictionary is greater than the available space from arrayIndex
            to the end of the destination array.</exception>
        </member>
        <member name="P:Xmpp.Im.XmlDictionary.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmlDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the specific object from the dictionary.
            </summary>
            <param name="item">The object to remove from the dictionary.</param>
            <returns>true if item was successfully removed from the dictionary;
            otherwise, false. This method also returns false if item is not found
            in the original dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">The key value of the specified
            item is null.</exception>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An iterator that can be used to iterate through the
            dictionary.</returns>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An iterator that can be used to iterate through the
            dictionary.</returns>
        </member>
        <member name="M:Xmpp.Im.XmlDictionary.GetElement(System.String)">
            <summary>
            Returns the XML element with an attribute value of the specified
            key.
            </summary>
            <param name="key">The key value of the XML element to
            locate.</param>
            <returns>The XML element with an attribute value equal to the
            specified key or null if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException">The key parameter is null.</exception>
        </member>
        <member name="T:Xmpp.Im.XmppIm">
            <summary>
            Implements the basic instant messaging (IM) and presence functionality.
            </summary>
            <remarks>For implementation details, refer to RFC 3921.</remarks>
        </member>
        <member name="F:Xmpp.Im.XmppIm.core">
            <summary>
            Provides access to the core facilities of XMPP.
            </summary>
        </member>
        <member name="F:Xmpp.Im.XmppIm.disposed">
            <summary>
            True if the instance has been disposed of.
            </summary>
        </member>
        <member name="F:Xmpp.Im.XmppIm.extensions">
            <summary>
            The set of loaded extensions.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Hostname">
            <summary>
            The hostname of the XMPP server to connect to.
            </summary>
            <exception cref="T:System.ArgumentNullException">The Hostname property is being
            set and the value is null.</exception>
            <exception cref="T:System.ArgumentException">The Hostname property is being set
            and the value is the empty string.</exception>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Port">
            <summary>
            The port number of the XMPP service of the server.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The Port property is being
            set and the value is not between 0 and 65536.</exception>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Username">
            <summary>
            The username with which to authenticate. In XMPP jargon this is known
            as the 'node' part of the JID.
            </summary>
            <exception cref="T:System.ArgumentNullException">The Username property is being
            set and the value is null.</exception>
            <exception cref="T:System.ArgumentException">The Username property is being set
            and the value is the empty string.</exception>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Password">
            <summary>
            The password with which to authenticate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The Password property is being
            set and the value is null.</exception>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Tls">
            <summary>
            If true the session will be TLS/SSL-encrypted if the server supports it.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.IsEncrypted">
            <summary>
            Determines whether the session with the server is TLS/SSL encrypted.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Jid">
            <summary>
            The address of the Xmpp entity.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.DefaultTimeOut">
            <summary>
            The address of the Xmpp entity.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.DebugStanzas">
            <summary>
            Print XML stanzas for debugging purposes
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Connected">
            <summary>
            Determines whether the instance is connected to the XMPP server.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Authenticated">
            <summary>
            Determines whether the instance has been authenticated.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.SubscriptionRequest">
            <summary>
            A callback method to invoke when a request for a subscription is received
            from another XMPP user.
            </summary>
        </member>
        <member name="P:Xmpp.Im.XmppIm.CustomIqDelegate">
            <summary>
            A callback method to invoke when a Custom Iq Request is received
            from another XMPP user.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.Status">
            <summary>
            The event that is raised when a status notification from a contact has been
            received.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.Message">
            <summary>
            The event that is raised when a chat Message is received.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.SubscriptionApproved">
            <summary>
            The event that is raised when a subscription request made by the JID
            associated with this instance has been approved.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.SubscriptionRefused">
            <summary>
            The event that is raised when a subscription request made by the JID
            associated with this instance has been refused.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.Unsubscribed">
            <summary>
            The event that is raised when a user or resource has unsubscribed from
            receiving presence notifications of the JID associated with this instance.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.RosterUpdated">
            <summary>
            The event that is raised when the roster of the user has been updated,
            i.e. a contact has been added, removed or updated.
            </summary>
        </member>
        <member name="E:Xmpp.Im.XmppIm.Error">
            <summary>
            The event that is raised when an unrecoverable error condition occurs.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmppIm.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the XmppIm.
            </summary>
            <param name="hostname">The hostname of the XMPP server to connect to.</param>
            <param name="username">The username with which to authenticate. In XMPP jargon
            this is known as the 'node' part of the JID.</param>
            <param name="password">The password with which to authenticate.</param>
            <param name="port">The port number of the XMPP service of the server.</param>
            <param name="tls">If true the session will be TLS/SSL-encrypted if the server
            supports TLS/SSL-encryption.</param>
            <param name="validate">A delegate used for verifying the remote Secure Sockets
            Layer (SSL) certificate which is used for authentication. Can be null if not
            needed.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter or the
            username parameter or the password parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The hostname parameter or the username
            parameter is the empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the port parameter
            is not a valid port number.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the XmppIm.
            </summary>
            <param name="hostname">The hostname of the XMPP server to connect to.</param>
            <param name="port">The port number of the XMPP service of the server.</param>
            <param name="tls">If true the session will be TLS/SSL-encrypted if the server
            supports TLS/SSL-encryption.</param>
            <param name="validate">A delegate used for verifying the remote Secure Sockets
            Layer (SSL) certificate which is used for authentication. Can be null if not
            needed.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The hostname parameter is the empty
            string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the port parameter
            is not a valid port number.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.Connect(System.String)">
            <summary>
            Establishes a connection to the XMPP server.
            </summary>
            <param name="resource">The resource identifier to bind with. If this is null,
            a resource identifier will be assigned by the server.</param>
            <returns>The user's roster (contact list).</returns>
            <exception cref="!:AuthenticationException">An authentication error occured while
            trying to establish a secure connection, or the provided credentials were
            rejected by the server, or the server requires TLS/SSL and the Tls property has
            been set to false.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network. If the InnerException is of type SocketExcption, use the
            ErrorCode property to obtain the specific socket error code.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppException">An XMPP error occurred while negotiating the
            XML stream with the server, or resource binding failed, or the initialization
            of an XMPP extension failed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.Autenticate(System.String,System.String)">
            <summary>
            Authenticates with the XMPP server using the specified username and
            password.
            </summary>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The password to authenticate with.</param>
            <exception cref="T:System.ArgumentNullException">The username parameter or the
            password parameter is null.</exception>
            <exception cref="!:AuthenticationException">An authentication error occured while
            trying to establish a secure connection, or the provided credentials were
            rejected by the server, or the server requires TLS/SSL and the Tls property has
            been set to false.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network. If the InnerException is of type SocketExcption, use the
            ErrorCode property to obtain the specific socket error code.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppException">An XMPP error occurred while negotiating the
            XML stream with the server, or resource binding failed, or the initialization
            of an XMPP extension failed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SendMessage(Xmpp.Jid,System.String,System.String,System.Xml.Linq.XElement,System.String,System.String,Xmpp.Im.MessageType,System.Globalization.CultureInfo)">
            <summary>
            Sends a chat Message with the specified content to the specified JID.
            </summary>
            <param name="to">The JID of the intended recipient.</param>
            <param name="body">The content of the Message.</param>
            <param name="subject">The subject of the Message.</param>
            <param name="thread">The conversation thread the Message belongs to.</param>
            <param name="type">The type of the Message. Can be one of the values from
            the MessagType enumeration.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ArgumentNullException">The to parameter or the body parameter
            is null.</exception>
            <exception cref="T:System.ArgumentException">The body parameter is the empty
            string.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SendMessage(Xmpp.Im.Message)">
            <summary>
            Sends the specified chat Message.
            </summary>
            <param name="xmppMessage">The chat Message to send.</param>
            <exception cref="T:System.ArgumentNullException">The Message parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.RequestSubscription(Xmpp.Jid)">
            <summary>
            Sends a request to subscribe to the presence of the contact with the
            specified JID.
            </summary>
            <param name="jid">The JID of the contact to request a subscription
            from.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.Unsubscribe(Xmpp.Jid)">
            <summary>
            Unsubscribes from the presence of the contact with the specified JID.
            </summary>
            <param name="jid">The JID of the contact to unsubsribe from.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ApproveSubscriptionRequest(Xmpp.Jid)">
            <summary>
            Approves a subscription request received from the contact with
            the specified JID.
            </summary>
            <param name="jid">The JID of the contact wishing to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.RefuseSubscriptionRequest(Xmpp.Jid)">
            <summary>
            Refuses a subscription request received from the contact with
            the specified JID.
            </summary>
            <param name="jid">The JID of the contact wishing to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.RevokeSubscription(Xmpp.Jid)">
            <summary>
            Revokes the previously-approved subscription of the contact with
            the specified JID.
            </summary>
            <param name="jid">The JID of the contact whose subscription to
            revoke.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SetStatus(Xmpp.Im.Availability,System.String,System.SByte,System.Globalization.CultureInfo)">
            <summary>
            Sets the availability status.
            </summary>
            <param name="availability">The availability state. Can be one of the
            values from the Availability enumeration, however not
            Availability.Offline.</param>
            <param name="message">An optional Message providing a detailed
            description of the availability state.</param>
            <param name="priority">Provides a hint for stanza routing.</param>
            <param name="language">The language of the description of the
            availability state.</param>
            <exception cref="T:System.ArgumentException">The availability parameter has a
            value of Availability.Offline.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SetStatus(Xmpp.Im.Availability,System.Collections.Generic.Dictionary{System.String,System.String},System.SByte)">
            <summary>
            Sets the availability status.
            </summary>
            <param name="availability">The availability state. Can be one of the
            values from the Availability enumeration, however not
            Availability.Offline.</param>
            <param name="messages">A dictionary of messages providing detailed
            descriptions of the availability state. The dictionary keys denote
            the languages of the messages and must be valid ISO 2 letter language
            codes.</param>
            <param name="priority">Provides a hint for stanza routing.</param>
            <exception cref="T:System.ArgumentException">The availability parameter has a
            value of Availability.Offline.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SetStatus(Xmpp.Im.Status)">
            <summary>
            Sets the availability status.
            </summary>
            <param name="status">An instance of the Status class.</param>
            <exception cref="T:System.ArgumentNullException">The status parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The Availability property of the status
            parameter has a value of Availability.Offline.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetRoster">
            <summary>
            Retrieves the user's roster.
            </summary>
            <returns>The user's roster.</returns>
            <remarks>In XMPP jargon, the user's contact list is called a
            'roster'.</remarks>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.AddToRoster(Xmpp.Im.RosterItem)">
            <summary>
            Adds the specified item to the user's roster.
            </summary>
            <param name="item">The item to add to the user's roster.</param>
            <remarks>In XMPP jargon, the user's contact list is called a
            'roster'.</remarks>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.RemoveFromRoster(Xmpp.Jid)">
            <summary>
            Removes the item with the specified JID from the user's roster.
            </summary>
            <param name="jid">The JID of the roster item to remove.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.RemoveFromRoster(Xmpp.Im.RosterItem)">
            <summary>
            Removes the specified item from the user's roster.
            </summary>
            <param name="item">The item to remove.</param>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetPrivacyLists">
            <summary>
            Returns an enumerable collection of privacy lists stored on the user's
            server.
            </summary>
            <returns>An enumerable collection of all privacy lists stored on the
            user's server.</returns>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetPrivacyList(System.String)">
            <summary>
            Retrieves the privacy list with the specified name from the server.
            </summary>
            <param name="name">The name of the privacy list to retrieve.</param>
            <returns>The privacy list retrieved from the server.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.RemovePrivacyList(System.String)">
            <summary>
            Removes the privacy list with the specified name.
            </summary>
            <param name="name">The name of the privacy list to remove.</param>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.EditPrivacyList(Xmpp.Im.PrivacyList)">
            <summary>
            Creates or updates the privacy list with the name of the specified list
            on the user's server.
            </summary>
            <param name="list">An instance of the PrivacyList class to create a new
            privacy list from. If a list with the name of the provided list already
            exists on the user's server, it is overwritten.</param>
            <exception cref="T:System.ArgumentNullException">The list parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The privacy list must contain one or
            more privacy rules.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetActivePrivacyList">
            <summary>
            Returns the name of the currently active privacy list.
            </summary>
            <returns>The name of the currently active privacy list or null if no
            list is active.</returns>
            <remarks>The 'active' privacy list applies only to this connected
            resource or session, but not to the user as a whole.</remarks>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SetActivePrivacyList(System.String)">
            <summary>
            Activates the privacy list with the specified name.
            </summary>
            <param name="name">The name of the privacy list to activate. If this
            is null, any currently active list is deactivated.</param>
            <remarks>The 'active' privacy list applies only to this connected
            resource or session, but not to the user as a whole. Only one privacy list
            can be active at any time.</remarks>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetDefaultPrivacyList">
            <summary>
            Returns the name of the default privacy list.
            </summary>
            <returns>The name of the default privacy list or null if no
            list has been set as default list.</returns>
            <remarks>The 'default' privacy list applies to the user as a whole, and
            is processed if there is no active list set for the current session or
            resource.</remarks>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SetDefaultPrivacyList(System.String)">
            <summary>
            Makes the privacy list with the specified name the default privacy list.
            </summary>
            <param name="name">The name of the privacy list make the default privacy
            list. If this is null, the current default list is declined.</param>
            <remarks>The 'default' privacy list applies to the user as a whole, and
            is processed if there is no active list set for the current session or
            resource.</remarks>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host, or the XmppIm instance has not authenticated with
            the XMPP server.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:Xmpp.XmppErrorException">The server returned an XMPP error code.
            Use the Error property of the XmppErrorException to obtain the specific
            error condition.</exception>
            <exception cref="T:Xmpp.XmppException">The server returned invalid data or another
            unspecified XMPP error occurred.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.Close">
            <summary>
            Closes the connection with the XMPP server. This automatically disposes
            of the object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.Dispose">
            <summary>
            Releases all resources used by the current instance of the XmppIm class.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmppIm.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the XmppIm
            class, optionally disposing of managed resource.
            </summary>
            <param name="disposing">true to dispose of managed resources, otherwise
            false.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.LoadExtension``1">
            <summary>
            Loads the specified XMPP extension.
            </summary>
            <typeparam name="T">The type of the extension to load.</typeparam>
            <returns>An instance of the loaded extension.</returns>
        </member>
        <member name="M:Xmpp.Im.XmppIm.UnloadExtension``1">
            <summary>
            Unloads the specified extension.
            </summary>
            <typeparam name="T">The type of the extension to unload.</typeparam>
            <returns>true if the extension was unloaded; Otherwise false. This
            method also returns false if the extension is not found in the
            original list of extensions.</returns>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetExtension``1">
            <summary>
            Retrieves the instance of the specified extension.
            </summary>
            <typeparam name="T">The type of the extension to retrieve.</typeparam>
            <returns>The instance of the retrieved extension or null if the
            extension has not been loaded.</returns>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetExtension(System.Type)">
            <summary>
            Retrieves the instance of the extension of the specified type.
            </summary>
            <param name="type">The type of the extension to retrieve.</param>
            <returns>The instance of the retrieved extension or null if no
            matching instance has been found.</returns>
            <exception cref="T:System.ArgumentNullException">The type parameter is
            null.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.GetExtension(System.String)">
            <summary>
            Retrieves the instance of the extension that implements the specified
            XML namespace.
            </summary>
            <param name="namespace">The XML namespace to look for.</param>
            <returns>The instance of the extension that implements the specified
            namespace, or null if no such extension exists.</returns>
            <exception cref="T:System.ArgumentNullException">The namespace parameter is
            null.</exception>
        </member>
        <member name="P:Xmpp.Im.XmppIm.Extensions">
            <summary>
            Returns an enumerable collection of loaded extensions.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SendPresence(Xmpp.Im.Presence)">
            <summary>
            Sends the specified presence stanza to the server.
            </summary>
            <param name="presence">The presence stanza to send to the server.</param>
            <exception cref="T:System.ArgumentNullException">The presence parameter is null.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to or reading
            from the network.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.IqRequest(Xmpp.Core.IqType,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Performs an IQ set/get request and blocks until the response IQ comes in.
            </summary>
            <param name="type">The type of the request. This must be either
            IqType.Set or IqType.Get.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait
            for the arrival of the IQ response or -1 to wait indefinitely.</param>
            <returns>The IQ response sent by the server.</returns>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Set
            or IqType.Get.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of millisecondsTimeout
            is a negative number other than -1, which represents an indefinite
            timeout.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
            <exception cref="T:System.TimeoutException">A timeout was specified and it
            expired.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.IqRequestAsync(Xmpp.Core.IqType,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo,System.Action{System.String,Xmpp.Core.Iq})">
            <summary>
            Performs an IQ set/get request asynchronously and optionally invokes a
            callback method when the IQ response comes in.
            </summary>
            <param name="type">The type of the request. This must be either
            IqType.Set or IqType.Get.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <param name="callback">A callback method which is invoked once the
            IQ response from the server comes in.</param>
            <returns>The ID value of the pending IQ stanza request.</returns>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Set
            or IqType.Get.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppCore object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppCore instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.IqResponse(Xmpp.Core.IqType,System.String,Xmpp.Jid,Xmpp.Jid,System.Xml.Linq.XElement,System.Globalization.CultureInfo)">
            <summary>
            Sends an IQ response for the IQ request with the specified id.
            </summary>
            <param name="type">The type of the response. This must be either
            IqType.Result or IqType.Error.</param>
            <param name="id">The id of the IQ request.</param>
            <param name="to">The JID of the intended recipient for the stanza.</param>
            <param name="from">The JID of the sender.</param>
            <param name="data">he content of the stanza.</param>
            <param name="language">The language of the XML character data of
            the stanza.</param>
            <exception cref="T:System.ArgumentException">The type parameter is not IqType.Result
            or IqType.Error.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.IqError(Xmpp.Core.Iq,Xmpp.ErrorType,Xmpp.ErrorCondition,System.String,System.Xml.Linq.XElement[])">
            <summary>
            Sends an IQ response of type 'error' in response to the specified
            stanza.
            </summary>
            <param name="iq">The original stanza to reply to.</param>
            <param name="type">The type of the error. Can be one of the values
            from the ErrorType enumeration.</param>
            <param name="condition">The XMPP error condition. Can be one of the
            values from the ErrorCondition enumeration.</param>
            <param name="text">The text Message to include in the error.</param>
            <param name="data">Additional XML elements to include as part of
            the error element of the response.</param>
            <exception cref="T:System.ArgumentNullException">The iq parameter is
            null.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.IqResult(Xmpp.Core.Iq,System.Xml.Linq.XElement)">
            <summary>
            Sends an IQ response of type 'result' in response to the specified
            stanza.
            </summary>
            <param name="iq">The original stanza to reply to.</param>
            <param name="data">The first-level data element to include as
            part of the response.</param>
            <exception cref="T:System.ArgumentNullException">The iq parameter is
            null.</exception>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the
            network.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.EstablishSession">
            <summary>
            Establishes a session with the XMPP server.
            </summary>
            <remarks>
            For details, refer to RFC 3921, Section 3. Session Establishment.
            </remarks>
        </member>
        <member name="M:Xmpp.Im.XmppIm.SetupEventHandlers">
            <summary>
            Sets up the event handlers for the events exposed by the XmppCore instance.
            </summary>
        </member>
        <member name="M:Xmpp.Im.XmppIm.AssertValid(System.Boolean)">
            <summary>
            Asserts the instance has not been disposed of and is connected to the
            XMPP server.
            </summary>
            <param name="authRequired">Set to true to assert the instance has been
            authenticated with the XMPP server.</param>
            <exception cref="T:System.ObjectDisposedException">The XmppIm object has been
            disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The XmppIm instance is not
            connected to a remote host.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.OnIq(Xmpp.Core.Iq)">
            <summary>
            Callback method when an IQ-request stanza has been received.
            </summary>
            <param name="iq">The received IQ stanza.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.OnPresence(Xmpp.Im.Presence)">
            <summary>
            Callback invoked when a presence stanza has been received.
            </summary>
            <param name="presence">The received presence stanza.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.OnMessage(Xmpp.Im.Message)">
            <summary>
            Callback invoked when a Message stanza has been received.
            </summary>
            <param name="xmppXmppMessage">The received Message stanza.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ProcessStatusNotification(Xmpp.Im.Presence)">
            <summary>
            Processes presence stanzas containing availability and status
            information.
            </summary>
            <param name="presence">The presence stanza to process.</param>
            <exception cref="T:System.ArgumentException">The presence stanza contains
            invalid data.</exception>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ProcessSubscriptionRequest(Xmpp.Im.Presence)">
            <summary>
            Processes a presence stanza containing a subscription request.
            It does not automatically accept or reject a subscription.
            Explicit invocation of ApproveSubscriptionRequest(presence.From) or
            RefuseSubscriptionRequest(presence.From) must take placed
            </summary>
            <param name="presence">The presence stanza to process.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ProcessUnsubscribeRequest(Xmpp.Im.Presence)">
            <summary>
            Processes a presence stanza containing an unsubscribe request.
            </summary>
            <param name="presence">The presence stanza to process.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ProcessSubscriptionResult(Xmpp.Im.Presence)">
            <summary>
            Processes a presence stanza containing a response to a previously
            issues subscription requst.
            </summary>
            <param name="presence">The presence stanza to process.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ParseRoster(System.Xml.Linq.XElement)">
            <summary>
            Parses a 'query' element containing zero or more roster items.
            </summary>
            <param name="query">The 'query' element containing the roster
            items to parse.</param>
            <returns>An initialized instance of the Roster class containing
            the parsed roster items.</returns>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ProcessRosterIq(Xmpp.Core.Iq)">
            <summary>
            Processes an IQ stanza containing a roster management request.
            </summary>
            <param name="iq">The IQ stanza to process.</param>
        </member>
        <member name="M:Xmpp.Im.XmppIm.ParsePrivacyItem(System.Xml.Linq.XElement)">
            <summary>
            Parses the specified XML 'item' element containing an XMPP privacy rule.
            </summary>
            <param name="item">The XML element to parse.</param>
            <returns>An initialized instance of the PrivacyRule class.</returns>
            <exception cref="T:System.ArgumentNullException">The item parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The specified item contains invalid
            or illegal data.</exception>
            <exception cref="T:System.FormatException">The value of the mandatory order
            attribute is malformed.</exception>
            <exception cref="T:System.OverflowException">The parsed value of the mandatory
            order attribute is greater than 32 bits.</exception>
        </member>
        <member name="T:Xmpp.Jid">
            <summary>
            Represents the address of an XMPP entity, also known as Jabber Identifier (JID).
            </summary>
        </member>
        <member name="P:Xmpp.Jid.Domain">
            <summary>
            The domain identifier of the JID.
            </summary>
        </member>
        <member name="P:Xmpp.Jid.Node">
            <summary>
            The node identifier of the JID. This may be null or empty.
            </summary>
        </member>
        <member name="P:Xmpp.Jid.Resource">
            <summary>
            The resource identifier of the JID. This may be null or empty.
            </summary>
        </member>
        <member name="P:Xmpp.Jid.IsBareJid">
            <summary>
            Determines whether the JID is a 'bare JID', i.e. a JID without resource
            identifier.
            </summary>
        </member>
        <member name="P:Xmpp.Jid.IsFullJid">
            <summary>
            Determines whether the JID is a 'full JID', i.e. a JID with both a node
            and a resource identifier.
            </summary>
        </member>
        <member name="M:Xmpp.Jid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JID class.
            </summary>
            <param name="jid">A string from which to construct the JID.</param>
            <exception cref="T:System.ArgumentNullException">The jid parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The jid parameter does not
            represent a valid JID.</exception>
        </member>
        <member name="M:Xmpp.Jid.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the JID class using the specified domain,
            node and optionally resource.
            </summary>
            <param name="domain">The domain of the JID.</param>
            <param name="node">The node of the JID.</param>
            <param name="resource">The resource of the JID. This may be omitted.</param>
            <exception cref="T:System.ArgumentNullException">The domain parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The domain parameter is the
            empty string.</exception>
        </member>
        <member name="M:Xmpp.Jid.op_Implicit(System.String)~Xmpp.Jid">
            <summary>
            Implicit conversion operator for type string to type Jid.
            </summary>
            <param name="jid">The string to convert into a Jid instance.</param>
            <returns>A Jid instance created from the specified string.</returns>
        </member>
        <member name="M:Xmpp.Jid.GetBareJid">
            <summary>
            Returns a new JID instance representing the 'bare JID' constructd from
            this JID.
            </summary>
            <returns>A bare JID constructed from this JID instance.</returns>
        </member>
        <member name="M:Xmpp.Jid.ToString">
            <summary>
            Returns a textual representation of the JID.
            </summary>
            <returns>A textual representation of this JID instance.</returns>
        </member>
        <member name="M:Xmpp.Jid.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this Jid
            instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is semantically equal to this
            Jid instance; Otherwise false.</returns>
        </member>
        <member name="M:Xmpp.Jid.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this JID instance.</returns>
        </member>
        <member name="M:Xmpp.Jid.op_Equality(Xmpp.Jid,Xmpp.Jid)">
            <summary>
            Determines whether the specified Jid objects are equal.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns>True if the specified objects are semantically equal;
            Otherwise false.</returns>
        </member>
        <member name="M:Xmpp.Jid.op_Inequality(Xmpp.Jid,Xmpp.Jid)">
            <summary>
            Determines whether the specified Jid objects are unequal.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns>True if the specified objects are not semantically equal;
            Otherwise false.</returns>
        </member>
        <member name="T:Xmpp.Util">
            <summary>
            Contains utility and extension methods.
            </summary>
        </member>
        <member name="M:Xmpp.Util.ExceptionFromError(Xmpp.Core.Iq,System.String)">
            <summary>
            Creates an exception from the specified Iq stanza.
            </summary>
            <param name="errorIq">The Iq stanza to create the exception from. The
            stanza must be of type IqType.Error.</param>
            <param name="message">A description of the error. The content of Message
            is intended to be understood by humans.</param>
            <returns>An exception of type XmppErrorException if an XmppError instance
            could be created from the specified Iq stanza, or an exception of type
            XmppException denoting an unrecoverable error.</returns>
            <exception cref="T:System.ArgumentNullException">The errorIq parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The errorIq parameter is not
            of type IqType.Error.</exception>
        </member>
        <member name="M:Xmpp.Util.ExceptionFromError(System.Xml.Linq.XElement,System.String)">
            <summary>
            Creates an exception from the specified XML error element.
            </summary>
            <param name="error">An XML XMPP error element.</param>
            <param name="message">A description of the error. The content of Message
            is intended to be understood by humans.</param>
            <returns>An exception of type XmppErrorException if an XmppError instance
            could be created from the specified Iq stanza, or an exception of type
            XmppException denoting an unrecoverable error.</returns>
        </member>
        <member name="M:Xmpp.Util.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event. Ensures the event is only raised, if it is not null.
            </summary>
            <typeparam name="T">Extends System.EventHandler class</typeparam>
            <param name="event">Extends System.EventHandler class</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments associated with this event</param>
        </member>
        <member name="M:Xmpp.Util.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            </summary>
            <param name="data">The item to check for nullity.</param>
            <param name="name">The name to use when throwing an
            exception, if necessary.</param>
            <remarks>Courtesy of Jon Skeet.</remarks>
        </member>
        <member name="M:Xmpp.Util.ThrowIfNull``1(``0)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            </summary>
            <param name="data">The item to check for nullity.</param>
            <remarks>Courtesy of Jon Skeet.</remarks>
        </member>
        <member name="M:Xmpp.Util.ThrowIfOutOfRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws an ArgumentOufOfRangeExcption if the given value is not within
            the specified range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="from">The minimum value (including).</param>
            <param name="to">The maximum value (including).</param>
        </member>
        <member name="M:Xmpp.Util.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws an ArgumentOufOfRangeExcption if the given value is not within
            the specified range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="name">The name to use when throwing an
            exception, if necessary.</param>
            <param name="from">The minimum value (including).</param>
            <param name="to">The maximum value (including).</param>
        </member>
        <member name="M:Xmpp.Util.ThrowIfOutOfRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws an ArgumentOufOfRangeExcption if the given value is not within
            the specified range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="from">The minimum value (including).</param>
            <param name="to">The maximum value (including).</param>
        </member>
        <member name="M:Xmpp.Util.ThrowIfOutOfRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throws an ArgumentOufOfRangeExcption if the given value is not within
            the specified range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="name">The name to use when throwing an
            exception, if necessary.</param>
            <param name="from">The minimum value (including).</param>
            <param name="to">The maximum value (including).</param>
        </member>
        <member name="M:Xmpp.Util.ThrowIfNullOrEmpty(System.String)">
            <summary>
            Throws an ArgumentNullException if the given string is null and
            throws an ArgumentException if the given string is empty.
            </summary>
            <param name="s">The string to check for nullity and emptiness.</param>
        </member>
        <member name="M:Xmpp.Util.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if the given string is null and
            throws an ArgumentException if the given string is empty.
            </summary>
            <param name="s">The string to check for nullity and emptiness.</param>
            <param name="name">The name to use when throwing an
            exception, if necessary.</param>
        </member>
        <member name="M:Xmpp.Util.Capitalize(System.String)">
            <summary>
            Capitalizes the first character of the string.
            </summary>
            <param name="s">The string to capitalize.</param>
            <returns>A new string with the first character capitalized.</returns>
        </member>
        <member name="M:Xmpp.Util.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one
            or more enumerated constants to an equivalent enumerated object.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <param name="value">A string containing the name or value to
            convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard
            case.</param>
            <returns>An object of the specified enumeration type whose value is
            represented by value.</returns>
            <exception cref="T:System.ArgumentNullException">The value parameter is
            null.</exception>
            <exception cref="T:System.ArgumentException">The specified type is not an
            enumeration type, or value is either an empty string or only contains
            white space, or value is a name, but not one of the named
            constants.</exception>
        </member>
        <member name="T:Xmpp.Xml">
            <summary>
            Provides a factory method for creating XElement instances and adds
            a couple of useful shortcut extensions to the XElement class.
            </summary>
        </member>
        <member name="M:Xmpp.Xml.Element(System.String,System.String)">
            <summary>
            Creates a new XElement instance.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="namespace">The namespace of the element.</param>
            <returns>An initialized instance of the XElement class.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The name parameter is the
            empty string.</exception>
            <exception cref="!:XmlException">The name or the namespace parameter
            is invalid.</exception>
        </member>
        <member name="M:Xmpp.Xml.Child(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Adds the specified element to the end of the list of child nodes, of
            this node.
            </summary>
            <param name="e">The XElement instance the method is invoked for.</param>
            <param name="child">The node to add.</param>
            <returns>A reference to the XElement instance.</returns>
        </member>
        <member name="M:Xmpp.Xml.SetAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            Sets the value of the attribute with the specified name.
            </summary>
            <param name="e">The XElement instance the method is invoked for.</param>
            <param name="name">The name of the attribute to create or alter.</param>
            <param name="value">The value to set for the attribute.</param>
            <returns>A reference to the XElement instance.</returns>
        </member>
        <member name="M:Xmpp.Xml.Text(System.Xml.Linq.XElement,System.String)">
            <summary>
            Adds the specified text to the end of the list of child nodes, of
            this node.
            </summary>
            <param name="e">The XElement instance the method is invoked for.</param>
            <param name="text">The text to add.</param>
            <returns>A reference to the XElement instance.</returns>
        </member>
        <member name="M:Xmpp.Xml.ToXmlString(System.Xml.Linq.XElement,System.Boolean,System.Boolean)">
            <summary>
            Serializes the XElement instance into a string.
            </summary>
            <param name="e">The XElement instance the method is invoked for.</param>
            <param name="xmlDeclaration">true to include a XML declaration,
            otherwise false.</param>
            <param name="leaveOpen">true to leave the tag of an empty element
            open, otherwise false.</param>
            <returns>A textual representation of the XElement instance.</returns>
        </member>
        <member name="T:Xmpp.XmppDisconnectionException">
            <summary>
            The exception that is thrown when a generic XMPP error condition has been encountered.
            </summary>
        </member>
        <member name="M:Xmpp.XmppDisconnectionException.#ctor">
            <summary>
            Initializes a new instance of the XmppException class
            </summary>
        </member>
        <member name="M:Xmpp.XmppDisconnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XmppException class with its Message
            string set to <paramref name="message"/>.
            </summary>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
        </member>
        <member name="M:Xmpp.XmppDisconnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XmppException class with its Message
            string set to <paramref name="message"/> and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xmpp.XmppError">
            <summary>
            Represents an XMPP error.
            </summary>
        </member>
        <member name="F:Xmpp.XmppError.type">
            <summary>
            The type of the error.
            </summary>
        </member>
        <member name="F:Xmpp.XmppError.condition">
            <summary>
            The error condition of the error stanza.
            </summary>
        </member>
        <member name="P:Xmpp.XmppError.Type">
            <summary>
            The type of the error.
            </summary>
        </member>
        <member name="P:Xmpp.XmppError.Condition">
            <summary>
            The XMPP error condition value of this error.
            </summary>
        </member>
        <member name="P:Xmpp.XmppError.Text">
            <summary>
            A textual description of the error in more detail. This may be null.
            </summary>
        </member>
        <member name="P:Xmpp.XmppError.Data">
            <summary>
            Provides access to the XML of the underlying error stanza.
            </summary>
        </member>
        <member name="M:Xmpp.XmppError.ToString">
            <summary>
            Returns a textual representation of this Error instance.
            </summary>
            <returns>A textual representation of this Error instance.</returns>
        </member>
        <member name="M:Xmpp.XmppError.#ctor(Xmpp.ErrorType,Xmpp.ErrorCondition,System.Xml.Linq.XElement[])">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
            <param name="type">The type of the error.</param>
            <param name="condition">The condition of the error.</param>
            <param name="data">The content of the error element.</param>
        </member>
        <member name="M:Xmpp.XmppError.#ctor(Xmpp.ErrorType,Xmpp.ErrorCondition,System.String,System.Xml.Linq.XElement[])">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
            <param name="type">The type of the error.</param>
            <param name="condition">The condition of the error.</param>
            <param name="text">A more-detailed textual description of the error.</param>
            <param name="data">The content of the error element.</param>
        </member>
        <member name="M:Xmpp.XmppError.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new Error instance from the specified XML element.
            </summary>
            <param name="error">The 'error' XML element to initialize this
            instance with.</param>
            <exception cref="T:System.ArgumentNullException">The error parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The error parameter contains
            invalid XML data.</exception>
        </member>
        <member name="M:Xmpp.XmppError.SetCondition(Xmpp.ErrorCondition)">
            <summary>
            Sets the error condition of the XMPP error to the specified value.
            </summary>
            <param name="condition">A value from the ErrorCondition enumeration.</param>
        </member>
        <member name="M:Xmpp.XmppError.ErrorConditionToTagName(Xmpp.ErrorCondition)">
            <summary>
            Returns the XMPP element name of the specified error condition.
            </summary>
            <param name="condition">A value from the ErrorCondition enumeration
            to convert into an element name.</param>
            <returns>The XML element name of the specified error condition.</returns>
        </member>
        <member name="M:Xmpp.XmppError.TagNameToErrorCondition(System.String)">
            <summary>
            Returns the corresponding value from the ErrorCondition enumeration for
            the specified XML element name.
            </summary>
            <param name="tagName">An XML element name of a defined XMPP error
            condition.</param>
            <returns>The value from the ErrorCondition enumeration corresponding to
            the specified element name.</returns>
            <exception cref="T:System.ArgumentNullException">The tagName parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The specified element name
            is not a valid XMPP error condition.</exception>
        </member>
        <member name="T:Xmpp.XmppErrorException">
            <summary>
            The exception that is thrown when a recoverable XMPP error condition
            has been encountered.
            </summary>
        </member>
        <member name="P:Xmpp.XmppErrorException.Error">
            <summary>
            The XMPP error.
            </summary>
        </member>
        <member name="M:Xmpp.XmppErrorException.#ctor(Xmpp.XmppError)">
            <summary>
            Initializes a new instance of the XmppErrorException class
            </summary>
            <param name="error">The XMPP error that is the reason for the exception.</param>
            <exception cref="T:System.ArgumentNullException">The error parameter is null.</exception>
        </member>
        <member name="M:Xmpp.XmppErrorException.#ctor(Xmpp.XmppError,System.String)">
            <summary>
            Initializes a new instance of the XmppErrorException class with its Message
            string set to <paramref name="message"/>.
            </summary>
            <param name="error">The XMPP error that is the reason for the exception.</param>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
            <exception cref="T:System.ArgumentNullException">The error parameter is null.</exception>
        </member>
        <member name="M:Xmpp.XmppErrorException.#ctor(Xmpp.XmppError,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XmppErrorException class with its Message
            string set to <paramref name="message"/> and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="error">The XMPP error that is the reason for the exception.</param>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The error parameter is null.</exception>
        </member>
        <member name="T:Xmpp.XmppException">
            <summary>
            The exception that is thrown when a generic XMPP error condition has been encountered.
            </summary>
        </member>
        <member name="M:Xmpp.XmppException.#ctor">
            <summary>
            Initializes a new instance of the XmppException class
            </summary>
        </member>
        <member name="M:Xmpp.XmppException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XmppException class with its Message
            string set to <paramref name="message"/>.
            </summary>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
        </member>
        <member name="M:Xmpp.XmppException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XmppException class with its Message
            string set to <paramref name="message"/> and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="message">A description of the error. The content of Message is intended
            to be understood by humans.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
    </members>
</doc>
